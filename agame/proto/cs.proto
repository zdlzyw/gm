syntax = "proto3";

package cs;

import "base.proto";
import "out_base.proto";

option go_package = "common/out/cs;cs";

enum ID {
  MSG_ENUM_DEFAULT = 0;

  MSG_BEGIN = 100000;  // cs协议开始
  MSG_END = 199999;  // cs协议结束

  MSG_C2S_Flush = 100001;  // flush协议 刷新基础数据
  MSG_S2C_Flush = 100002;  // 返回原则：有定量的可以合并到该协议 会自增长的单独协议
  MSG_S2C_OpObject = 100003;  // 身上状态变更
  MSG_C2S_SyncTime = 100004;  // 同步时间信息
  MSG_S2C_SyncTime = 100005;
  MSG_C2S_SyncProto = 100006;  // 同步响应缓存
  MSG_S2C_SyncProto = 100007;
  MSG_S2C_GetAwardNotify = 100008;  // 掉落推送
  MSG_S2C_FlushUser = 100009;  // 输出玩家
  MSG_S2C_FlushResource = 100010;  // 输出资源
  MSG_S2C_FlushItem = 100011;  // 输出道具
  MSG_S2C_FlushRedPoint = 100012;  // 输出红点
  MSG_S2C_FlushServerInfo = 100013;  // 服务器信息
  MSG_S2C_FlushToken = 100014;  // 推送凭证
  MSG_C2S_GM_Cmd = 100015;  // GM指令
  MSG_S2C_GM_Cmd = 100016;  // GM指令
  MSG_S2C_FlushCharacter = 100017;  // 推送角色
  MSG_S2C_FlushFormation = 100018;  // 推送阵容
  MSG_S2C_FlushEquip = 100019;  // 输出装备
  MSG_S2C_FlushTreasureBox = 100020;  // 输出宝箱数据
  MSG_S2C_FlushMainDungeon = 100021;  // 输出主线副本
  MSG_S2C_FlushHangUp = 100022;  // 输出挂机数据
  MSG_S2C_FlushUserGuide = 100024;  // 输出玩家引导数据
  MSG_S2C_FlushUserWorldBoss = 100025;  // 输出世界Boss 信息
  MSG_S2C_FlushUserPlayNum = 100026;  // 输出玩法数据信息
  MSG_S2C_FlushUserShare = 100027;  // 输出分享数据
  MSG_S2C_FlushUserArena = 100028;  // 输出玩家竞技场数据
  MSG_S2C_FlushScoreShop = 100029;  // 输出积分商店
  MSG_S2C_FlushFragment = 100030;  // 输出碎片
  MSG_S2C_FlushRecruit = 100031;  // 输出卡池
  MSG_S2C_FlushRecharge = 100033;  // 输出充值
  MSG_S2C_FlushInfiniteDungeon = 100034;  // 输出地牢
  MSG_S2C_FlushUserFriendSystem = 100035;  // 输出好友系统
  MSG_S2C_FlushUserChat = 100036;  // 输出聊天
  MSG_S2C_FlushUserArtifact = 100037;  // 推送神器
  MSG_S2C_FlushUserGuildBoss = 100038;  // 输出公会BOSS
  MSG_S2C_FlushUserGuild = 100039;  // 输出公会
  MSG_S2C_FlushBattlePass = 100040;  // 输出战令
  MSG_S2C_FlushUserCasualGame = 100041;  // 输出小游戏
  MSG_S2C_FlushUserMow = 100042;  // 输出割草
  MSG_S2C_FlushDailySpecials = 100043;  // 输出每日特惠
  MSG_S2C_FlushUserFund = 100044;  // 输出基金
  MSG_S2C_FlushActivityOpen = 100045;  // 输出开服活动
  MSG_S2C_FlushFirstRecharge = 100046;  // 输出首充
  MSG_S2C_FlushAccumulatedRecharge = 100047;  // 输出累充
  MSG_S2C_FlushMonthlyCard = 100048;  // 输出月卡
  MSG_S2C_FlushAvatar = 100049;  // 输出头像&头像框
  MSG_S2C_FlushUserDailySign = 100050;  // 输出每日签到
  MSG_S2C_FlushUserPushGift = 100052;  // 输出推送礼包
  MSG_S2C_FlushUserSevenSign = 100053;  // 输出七日签到
  MSG_S2C_FlushSevenAct = 100054;  // 输出七日活动
  MSG_S2C_FlushAchievement = 100056;  // 输出成就
  MSG_S2C_FlushUserPrivilege = 100057;  // 输出特权
  MSG_S2C_FlushBack = 100058;  // 输出背饰背包
  MSG_S2C_FlushUserBack = 100059;  // 输出背饰
  MSG_S2C_FlushUserTower = 100060;  // 输出爬塔数据
  MSG_S2C_FlushCompanionBook = 100061;  // 输出佣兵图鉴
  MSG_S2C_FlushHonor = 100062;  // 输出头衔
  MSG_S2C_FlushUserSeriesGift = 100063;  // 输出一条龙礼包
  MSG_S2C_FlushUserDailySurpriseBenefit = 100064;  // 输出每日惊喜福利
  MSG_S2C_FlushUserFunctionPreview = 100065;  // 输出功能预览
  MSG_S2C_FlushDress = 100066;  // 输出时装
  MSG_S2C_FlushUserTreasury = 100067;  // 输出宝库
  MSG_S2C_FlushAdvertise = 100068;  // 输出广告数据
  MSG_S2C_FlushQuestionnaire = 100069;  // 输出问卷
  MSG_C2S_GetRedPointUpdateInfo = 100070;  // 获取红点更新信息
  MSG_S2C_GetRedPointUpdateInfo = 100071;
  MSG_S2C_FlushShortBattlePass = 100072;  // 输出短期战令
  MSG_S2C_FlushThemeActivity = 100073;  // 输出主题活动
  MSG_S2C_FlushCompanionEquipment = 100074;  // 输出佣兵装备
  MSG_S2C_FlushCompanionEquipmentFormation = 100075;  // 输出佣兵装备阵容
  MSG_S2C_FlushCloseFunction = 100076;  // 输出GM屏蔽功能
  MSG_S2C_FlushInitTime = 100077;  // 同步开服相关时间
  MSG_S2C_FlushPet = 100078;  // 输出主界面战宠信息
  MSG_S2C_FlushPeakArenaActivity = 100079;  // 输出巅峰竞技场活动
  MSG_S2C_FlushPack = 100080;  // 输出通用礼包
  MSG_S2C_FlushUnBlock = 100081;  // 输出胚子屏蔽
  MSG_S2C_FlushGoblin = 100082;  // 输出哥布林数据
  MSG_S2C_FlushSelectGift = 100083;  // 输出自选礼包
  MSG_S2C_FlushAlchemy = 100084;  // 输出炼金工坊数据
  MSG_S2C_FlushPiggyBank = 100085;  // 输出存钱罐数据
  MSG_S2C_FlushGuildGvg = 100086;  // 输出公会战役数据
  MSG_S2C_FlushFriendChat = 100087;  // 输出好友聊天（支持分包）
  MSG_S2C_FlushUserFriendData = 100088;  // 输出好友系统详细信息（支持分包）
  MSG_S2C_CmdRet = 100089;  // 协议异常

  MSG_C2S_Test_OpManager = 100090;  // OP操作
  MSG_S2C_Test_OpManager = 100091;  // OP操作响应
  MSG_C2S_Test_PVEBattleBegin = 100092;  // 测试异步战斗(PVE)
  MSG_S2C_Test_PVEBattleBegin = 100093;
  MSG_S2C_Test_PVEBattleFinish = 100094;
  MSG_C2S_Test_PVPBattleBegin = 100095;  // 测试异步战斗(PVP)
  MSG_S2C_Test_PVPBattleBegin = 100096;
  MSG_S2C_Test_PVPBattleFinish = 100097;

  MSG_C2S_GetServerMergeAward = 100111;  // 获取合服奖励
  MSG_S2C_GetServerMergeAward = 100112;
  MSG_C2S_GetServerMergeInfo = 100113;  // 获取合服信息
  MSG_S2C_GetServerMergeInfo = 100114;
  MSG_C2S_CommonRank_GetList = 100115;  // 获取通用排行榜信息
  MSG_S2C_CommonRank_GetList = 100116;
  MSG_C2S_FirstRecord_GetInfo = 100117;  // 获取首通记录
  MSG_S2C_FirstRecord_GetInfo = 100118;
  MSG_S2C_FirstRecord_Notify = 100119;  // 首通通知
  MSG_S2C_User_NotifyKickOut = 100120;  // 踢线消息
  MSG_C2S_UserInfo_ModifyName = 100121;  // 修改昵称
  MSG_S2C_UserInfo_ModifyName = 100122;  // 修改昵称响应
  MSG_C2S_UserInfo_GetDetail = 100123;  // 获取玩家详细信息
  MSG_S2C_UserInfo_GetDetail = 100124;
  MSG_S2C_AdultCheck_Warning = 100125;  // 防沉迷告警
  MSG_C2S_CommonAction_Trigger = 100126;  // 通用行为触发（客户端）
  MSG_S2C_CommonAction_Trigger = 100127;
  MSG_C2S_UserInfo_GetSnapshot = 100128;  // 获取玩家快照
  MSG_S2C_UserInfo_GetSnapshot = 100129;
  MSG_C2S_GetRechargeParams = 100130;  // 获取充值参数
  MSG_S2C_GetRechargeParams = 100131;

  MSG_C2S_Item_Use = 100250;  // 使用道具
  MSG_S2C_Item_Use = 100251;  // 使用道具响应
  MSG_C2S_Diamond_Exchange = 100252;  // 付费钻石兑换绑钻
  MSG_S2C_Diamond_Exchange = 100253;
  MSG_C2S_AccountBindAward = 100254;  // 绑定奖励
  MSG_S2C_AccountBindAward = 100255;
  MSG_S2C_CloseFunctionNtf = 100256;  // GM屏蔽功能通知
  MSG_C2S_CommunityFollowAward = 100257;  // 社区关注奖励
  MSG_S2C_CommunityFollowAward = 100258;
  MSG_S2C_UnBlockNtf = 100259;  // 胚子屏蔽通知

  // API account(100951-100960)
  MSG_S2C_API_GetRoleList = 100951;  // 获取角色信息
  MSG_S2C_API_SearchUser = 100952;  // 搜索用户

  // 通用打开数据埋点协议(100961-100970)
  MSG_C2S_Log_OpenPanel = 100961;  // 客户端打开面板触发日志埋点
  MSG_S2C_Log_OpenPanel = 100962;

  // 0.1.0-开宝箱协议(101000-101035)
  // TODO: 公会目前没有该系统暂时不定义，等以后有了再补充
  MSG_C2S_TreasureBox_Open = 101000;  // 手动开宝箱
  MSG_S2C_TreasureBox_Open = 101001;
  MSG_C2S_TreasureBox_SetAutoOpenCondition = 101004;  // 设置自动开启的条件
  MSG_S2C_TreasureBox_SetAutoOpenCondition = 101005;
  MSG_C2S_TreasureBox_Upgrade = 101006;  // 宝箱升级
  MSG_S2C_TreasureBox_Upgrade = 101007;
  MSG_C2S_TreasureBox_ItemUpSpeedTime = 101008;  // 道具加速升级时间
  MSG_S2C_TreasureBox_ItemUpSpeedTime = 101009;
  MSG_C2S_TreasureBox_AdvertiseUpSpeedTime = 101010;  // 道具加速升级时间
  MSG_S2C_TreasureBox_AdvertiseUpSpeedTime = 101011;
  MSG_C2S_TreasureBox_AutoOpen = 101016;  // 自动开宝箱
  MSG_S2C_TreasureBox_AutoOpen = 101017;
  MSG_C2S_TreasureBox_BuyUpgradeCnt = 101018;  // 购买消耗道具,本质上升级小段
  MSG_S2C_TreasureBox_BuyUpgradeCnt = 101019;
  MSG_C2S_TreasureBox_ChestUpgradeFinish = 101020;  // 没有啥用标记用
  MSG_S2C_TreasureBox_ChestUpgradeFinish = 101021;

  // 0.1.0-挂机奖励领取(101036-101039)
  MSG_C2S_HangUp_ObtainAwards = 101036;  // 领取挂机奖励
  MSG_S2C_HangUp_ObtainAwards = 101037;
  MSG_C2S_HangUp_UseItemObtainAwards = 101038;  // 使用道具获取挂机奖励
  MSG_S2C_HangUp_UseItemObtainAwards = 101039;

  // 0.1.0-主线任务(101040-101060)
  MSG_S2C_QuestMain_Flush = 101041;  // 主线任务信息推送
  MSG_C2S_QuestMain_GetReward = 101042;  // 领取主线任务奖励
  MSG_S2C_QuestMain_GetReward = 101043;  // 领取主线任务奖励响应

  // 0.1.0-主线副本(101080-101100)
  MSG_C2S_MainDungeon_ChallengeBegin = 101080;  // 主线副本-发起挑战
  MSG_S2C_MainDungeon_ChallengeBegin = 101081;
  MSG_S2C_MainDungeon_ChallengeFinish = 101082;  // 主线副本-结束挑战
  MSG_C2S_MainDungeon_ObtainAward = 101084;  // 主线副本-领取关卡奖励
  MSG_S2C_MainDungeon_ObtainAward = 101085;
  MSG_C2S_MainDungeon_GetStageRecordInfo = 101086;  // 主线副本-获取关卡的战斗记录
  MSG_S2C_MainDungeon_GetStageRecordInfo = 101087;
  MSG_C2S_MainDungeon_OnekeyObtainChapterStageRewards = 101088;  // 主线副本-一键领取章节阶段奖励
  MSG_S2C_MainDungeon_OnekeyObtainChapterStageRewards = 101089;
  MSG_C2S_MainDungeon_ObtainChapterRewards = 101090;  // 主线副本领取章节奖励
  MSG_S2C_MainDungeon_ObtainChapterRewards = 101091;
  MSG_C2S_MainDungeon_SweepLastLevel = 101092;  // 主线副本扫荡最后一关
  MSG_S2C_MainDungeon_SweepLastLevel = 101093;

  // 0.1.0-装备系统(101101-101110)
  MSG_C2S_Equipment_Wear = 101101;  // 穿戴装备
  MSG_S2C_Equipment_Wear = 101102;
  MSG_C2S_Equipment_Sale = 101103;  // 出售装备
  MSG_S2C_Equipment_Sale = 101104;
  MSG_C2S_Equipment_Illusion = 101105;  // 装备幻化
  MSG_S2C_Equipment_Illusion = 101106;
  MSG_C2S_Equipment_ManualSale = 101107;  // 手动出售装备
  MSG_S2C_Equipment_ManualSale = 101108;

  // 0.2.0-邮件系统(101111-101130)
  MSG_C2S_Mail_Info = 101111;  // 获取邮件
  MSG_S2C_Mail_Info = 101112;
  MSG_C2S_Mail_Award = 101113;  // 领取邮件奖励
  MSG_S2C_Mail_Award = 101114;
  MSG_C2S_Mail_Del = 101115;  // 删除邮件
  MSG_S2C_Mail_Del = 101116;
  MSG_C2S_Mail_Read = 101117;  // 阅读邮件
  MSG_S2C_Mail_Read = 101118;
  MSG_S2C_Mail_New = 101119;  // 新邮件推送

  // 0.1.0-主角养成(101161-101200)
  // 0.1.0-技能树
  MSG_C2S_SkillTree_Upgrade = 101161;  // 主角技能树升级
  MSG_S2C_SkillTree_Upgrade = 101162;  // 主角技能树升级响应
  // 0.2.0-主角转职
  MSG_C2S_MainCharacter_Switch = 101163;  // 主角转职
  MSG_S2C_MainCharacter_Switch = 101164;  // 主角转职响应

  // 0.1.0-玩家引导数据(101250-101300)
  MSG_C2S_Guide_BattleRecord = 101250;  // 新手引导战斗记录
  MSG_S2C_Guide_BattleRecord = 101251;
  MSG_C2S_Guide_SaveRecord = 101252;  // 新手引导各种类型计数
  MSG_S2C_Guide_SaveRecord = 101253;

  // 0.1.0-世界Boss(101301-101320)
  MSG_C2S_WorldBoss_RespawnBoss = 101301;  // 复活 Boss
  MSG_S2C_WorldBoss_RespawnBoss = 101302;
  MSG_C2S_WorldBoss_ChallengeBegin = 101303;  // 开始挑战 Boss
  MSG_S2C_WorldBoss_ChallengeBegin = 101304;
  MSG_S2C_WorldBoss_ChallengeFinish = 101305;  // 挑战Boss 结束

  // 0.1.0-玩法次数(101321-101340)
  MSG_C2S_PlayNum_BuyCnt = 101321;  // 购买玩法次数
  MSG_S2C_PlayNum_BuyCnt = 101322;  // 购买玩法次数

  // 0.2.0-阵位信息(101351-101370)
  MSG_C2S_Formation_Upgrade = 101351;  // 升级阵位
  MSG_S2C_Formation_Upgrade = 101352;
  MSG_C2S_Formation_Save = 101355;  // 保存阵容
  MSG_S2C_Formation_Save = 101356;
  MSG_C2S_Formation_SaveTeam = 101357;  // 保存编队
  MSG_S2C_Formation_SaveTeam = 101358;
  MSG_C2S_Formation_RenameTeam = 101361;  // 编队修改名字
  MSG_S2C_Formation_RenameTeam = 101362;
  MSG_C2S_Formation_Get = 101363;  // 获取指定阵容
  MSG_S2C_Formation_Get = 101364;
  MSG_S2C_FlushCharacterFormationSlot = 101365;  // 推送佣兵阵位养成信息
  MSG_C2S_Formation_GetTeam = 101366;  // 获取预设编队
  MSG_S2C_Formation_GetTeam = 101367;

  // 0.2.0-佣兵养成(101400-101450)
  MSG_C2S_CharacterCompanion_UpgradeQuality = 101400;  // 佣兵升级品质(佣兵升星)
  MSG_S2C_CharacterCompanion_UpgradeQuality = 101401;

  // 0.2.0-竞技场(101500-101530)
  MSG_C2S_Arena_MatchOpponent = 101500;  // 竞技场匹配(手动刷新)
  MSG_S2C_Arena_MatchOpponent = 101501;
  MSG_C2S_Arena_Like = 101502;  // 竞技场点赞
  MSG_S2C_Arena_Like = 101503;
  MSG_C2S_Arena_Enter = 101504;  // 进入玩法
  MSG_S2C_Arena_Enter = 101505;
  MSG_C2S_Arena_ChallengeBegin = 101510;  // 竞技场挑战开始
  MSG_S2C_Arena_ChallengeBegin = 101511;
  MSG_S2C_Arena_ChallengeFinish = 101512;  // 竞技场挑战结束
  MSG_C2S_Arena_GetScoreRank = 101513;  // 竞技场获取积分榜单数据
  MSG_S2C_Arena_GetScoreRank = 101514;
  MSG_C2S_Arena_GetBattleRecord = 101515;  // 获取对战记录
  MSG_S2C_Arena_GetBattleRecord = 101516;
  MSG_C2S_Arena_GetTaskAward = 101517;  // 获取竞技场任务奖励
  MSG_S2C_Arena_GetTaskAward = 101518;
  MSG_C2S_Arena_OneKeyGetTaskAward = 101519;  // 一键领取每日任务奖励
  MSG_S2C_Arena_OneKeyGetTaskAward = 101520;  // 一键领取每日任务奖励
  MSG_C2S_Arena_SetDefendFormation = 101521;  // 设置防守阵容
  MSG_S2C_Arena_SetDefendFormation = 101522;
  MSG_S2C_Arena_NotifyAttacked = 101523;  // 竞技场通知被打

  // 0.2.0-积分商店(101531-101540)
  MSG_C2S_ScoreShop_Buy = 101531;  // 积分商店购买
  MSG_S2C_ScoreShop_Buy = 101532;
  MSG_C2S_ScoreShop_GetRefreshShop = 101533;  // 获取刷新商店格子列表
  MSG_S2C_ScoreShop_GetRefreshShop = 101534;

  // 0.1.5-分享(101541-101560)
  MSG_C2S_Share_Award = 101541;  // 分享获得奖励
  MSG_S2C_Share_Award = 101542;

  // 0.2.0-佣兵抽卡(101561-101580)
  MSG_C2S_Recruit_Roll = 101561;  // 抽卡
  MSG_S2C_Recruit_Roll = 101562;
  MSG_C2S_Recruit_AwardExtra = 101563;  // 领取额外奖励
  MSG_S2C_Recruit_AwardExtra = 101564;

  // 0.2.0-碎片(101581-101600)
  MSG_C2S_Fragment_Compose = 101581;  // 碎片合成
  MSG_S2C_Fragment_Compose = 101582;

  // 0.2.0-行为类计数(101601-101604)
  MSG_S2C_FlushUserAction = 101603;

  // 0.3.0-地牢(101651-101670)
  MSG_C2S_InfiniteDungeon_ChallengeBegin = 101651;  // 地牢-发起挑战
  MSG_S2C_InfiniteDungeon_ChallengeBegin = 101652;
  MSG_S2C_InfiniteDungeon_ChallengeFinish = 101653;  // 地牢-结束挑战
  MSG_C2S_InfiniteDungeon_GetStageRecordInfo = 101656;  // 地牢-获取关卡的战斗记录
  MSG_S2C_InfiniteDungeon_GetStageRecordInfo = 101657;
  MSG_C2S_InfiniteDungeon_AwardHangup = 101658;  // 地牢-领取挂机奖励
  MSG_S2C_InfiniteDungeon_AwardHangup = 101659;
  MSG_C2S_InfiniteDungeon_StartHangup = 101660;  // 首次进入地牢界面开始挂机
  MSG_S2C_InfiniteDungeon_StartHangup = 101661;
  // 0.3.0-好友系统(101701-101750)
  MSG_C2S_Friend_Apply = 101701;  // 好友申请
  MSG_S2C_Friend_Apply = 101702;
  MSG_C2S_Friend_Ack = 101703;  // 好友应答
  MSG_S2C_Friend_Ack = 101704;
  MSG_C2S_Friend_Search = 101705;  // 好友搜索
  MSG_S2C_Friend_Search = 101706;
  MSG_C2S_Friend_Recommend = 101707;  // 好友推荐
  MSG_S2C_Friend_Recommend = 101708;
  MSG_C2S_Friend_DelFriend = 101709;  // 删除好友
  MSG_S2C_Friend_DelFriend = 101710;
  MSG_C2S_Friend_AddBlack = 101711;  // 添加黑名单
  MSG_S2C_Friend_AddBlack = 101712;
  MSG_C2S_Friend_DelBlack = 101713;  // 删除黑名单
  MSG_S2C_Friend_DelBlack = 101714;
  MSG_C2S_Friend_GiveGift = 101715;  // 送好友礼物
  MSG_S2C_Friend_GiveGift = 101716;
  MSG_C2S_Friend_AcceptGift = 101717;  // 接收好友礼物
  MSG_S2C_Friend_AcceptGift = 101718;
  MSG_S2C_Friend_NotifyApply = 101719;  // 通知申请好友
  MSG_S2C_Friend_NotifyAck = 101720;  // 通知好友
  MSG_S2C_Friend_NotifyDelFriend = 101721;  // 通知删除好友
  MSG_S2C_Friend_NotifyGiveGift = 101722;  // 通知赠送礼物
  MSG_S2C_Friend_NotifyAddBlack = 101723;  // 通知拉黑名单
  MSG_C2S_Friend_BatchApply = 101724;  // 批量申请添加好友
  MSG_S2C_Friend_BatchApply = 101725;
  MSG_C2S_Friend_BatchGiveGift = 101726;  // 批量送礼
  MSG_S2C_Friend_BatchGiveGift = 101727;
  MSG_C2S_Friend_BatchAcceptGift = 101728;  // 批量接收礼物
  MSG_S2C_Friend_BatchAcceptGift = 101729;
  MSG_C2S_Friend_BatchAck = 101730;  // 批量好友应答
  MSG_S2C_Friend_BatchAck = 101731;

  // 0.3.0-聊天(101751-101780)
  MSG_C2S_Chat_Content = 101751;  // 聊天
  MSG_S2C_Chat_Content = 101752;
  MSG_S2C_Chat_Notify_Content = 101753;  // 通知聊天消息
  MSG_S2C_Chat_Notify_System = 101754;  // 通知系统消息
  MSG_S2C_Chat_SetForbidPrivate = 101755;  // 设置禁止私聊
  MSG_C2S_Chat_SetForbidPrivate = 101756;  // 设置禁止私聊
  MSG_C2S_Chat_GetForbidPrivate = 101757;  // 获取玩家是否设置禁止私聊
  MSG_S2C_Chat_GetForbidPrivate = 101758;
  MSG_S2C_Chat_Notify_GuildSystem = 101759;  // 通知公会系统消息
  MSG_C2S_Chat_GetInfos = 101760;  // 获取聊天信息
  MSG_S2C_Chat_GetInfos = 101761;
  MSG_C2S_Chat_GetSystemInfos = 101762;  // 获取系统信息
  MSG_S2C_Chat_GetSystemInfos = 101763;
  MSG_C2S_Chat_DeleteFriendChat = 101764;  // 删除好友聊天记录
  MSG_S2C_Chat_DeleteFriendChat = 101765;
  MSG_C2S_Chat_SetLatestReadTm = 101766;  // 设置最后阅读时间戳
  MSG_S2C_Chat_SetLatestReadTm = 101767;

  // 0.3.0-充值(101781-101800)
  MSG_S2C_Recharge_NotifySuccess = 101782;  // 充值成功通知

  // 0.4.0-神器(101801-101850)
  MSG_C2S_Artifact_UpLevel = 101801;  // 神器升级
  MSG_S2C_Artifact_UpLevel = 101802;
  MSG_C2S_Artifact_UpStar = 101803;  // 神器升星
  MSG_S2C_Artifact_UpStar = 101804;
  MSG_C2S_Artifact_Compose_Active = 101805;  // 神器缘分激活
  MSG_S2C_Artifact_Compose_Active = 101806;
  MSG_C2S_Artifact_Compose_UpLevel = 101807;  // 神器缘分升级
  MSG_S2C_Artifact_Compose_UpLevel = 101808;
  MSG_C2S_Artifact_Equip = 101809;  // 神器上阵
  MSG_S2C_Artifact_Equip = 101810;
  MSG_C2S_Artifact_Equip_OneKey = 101811;  // 神器上阵-一键
  MSG_S2C_Artifact_Equip_OneKey = 101812;
  MSG_C2S_Artifact_Compose_ActiveAndUpLevel = 101813;  // 神器缘分激活/升级-一键
  MSG_S2C_Artifact_Compose_ActiveAndUpLevel = 101814;

  // 0.4.0-公会BOSS(101851-101870)
  MSG_C2S_GuildBoss_ChallengeBegin = 101851;  // 公会BOSS-发起挑战
  MSG_S2C_GuildBoss_ChallengeBegin = 101852;
  MSG_S2C_GuildBoss_ChallengeFinish = 101853;  // 公会BOSS-结束挑战
  MSG_C2S_GuildBoss_GetRank = 101854;  // 公会BOSS-获取公会内个人榜
  MSG_S2C_GuildBoss_GetRank = 101855;

  // 0.4.0-公会(101900-102000)
  MSG_C2S_Guild_Create = 101900;  // 创建公会
  MSG_S2C_Guild_Create = 101901;
  MSG_C2S_Guild_Join = 101902;  // 加入公会
  MSG_S2C_Guild_Join = 101903;
  MSG_C2S_Guild_Quit = 101904;  // 退出公会
  MSG_S2C_Guild_Quit = 101905;
  MSG_C2S_Guild_FastJoin = 101906;  // 快速加入
  MSG_S2C_Guild_FastJoin = 101907;
  MSG_C2S_Guild_EditName = 101908;  // 编辑公会名
  MSG_S2C_Guild_EditName = 101909;
  MSG_C2S_Guild_SetUpgradeStrategy = 101910;  // 公会升级方案
  MSG_S2C_Guild_SetUpgradeStrategy = 101911;
  MSG_C2S_Guild_ObtainTaskReward = 101912;  // 领取公会计数奖励
  MSG_S2C_Guild_ObtainTaskReward = 101913;
  MSG_C2S_Guild_ObtainQuestReward = 101914;  // 领取个人任务奖励
  MSG_S2C_Guild_ObtainQuestReward = 101915;
  MSG_C2S_Guild_GetQuestInfo = 101916;  // 获取任务数据
  MSG_S2C_Guild_GetQuestInfo = 101917;
  MSG_C2S_Guild_AssignTitle = 101918;  // 任命职位
  MSG_S2C_Guild_AssignTitle = 101919;
  MSG_C2S_Guild_Kick = 101920;  // 成员被踢出公会
  MSG_S2C_Guild_Kick = 101921;
  MSG_C2S_Guild_InGuild = 101922;  // 设置玩家是否在公会大厅内
  MSG_S2C_Guild_InGuild = 101923;
  MSG_C2S_Guild_DailySign = 101924;  // 公会每日签到
  MSG_S2C_Guild_DailySign = 101925;
  MSG_C2S_Guild_LearnTech = 101926;  // 学习公会科技(升级公会科技节点)
  MSG_S2C_Guild_LearnTech = 101927;
  MSG_C2S_Guild_Search = 101928;  // 公会搜索
  MSG_S2C_Guild_Search = 101929;
  MSG_C2S_Guild_Approve = 101930;  // 批准其加入公会
  MSG_S2C_Guild_Approve = 101931;
  MSG_C2S_Guild_UpspeedTech = 101932;  // 使用道具加速科技升级
  MSG_S2C_Guild_UpspeedTech = 101933;
  MSG_C2S_Guild_Recommend = 101934;  // 公会推荐
  MSG_S2C_Guild_Recommend = 101935;
  MSG_C2S_Guild_GetGuildInfo = 101936;  // 获取公会信息
  MSG_S2C_Guild_GetGuildInfo = 101937;
  MSG_C2S_Guild_Attorn = 101938;  // 转让职位
  MSG_S2C_Guild_Attorn = 101939;
  MSG_C2S_Guild_SetInfo = 101940;  // 设置信息,所有信息同一个协议设置
  MSG_S2C_Guild_SetInfo = 101941;
  MSG_C2S_Guild_OnekeyObtainQuestReward = 101942;  // 一键领取所有玩家个人任务
  MSG_S2C_Guild_OnekeyObtainQuestReward = 101943;
  MSG_C2S_Guild_SetAnnounce = 101944;  // 设置公会宣言
  MSG_S2C_Guild_SetAnnounce = 101945;
  MSG_C2S_Guild_CancelTechUpgrade = 101946;  // 取消科技加速
  MSG_S2C_Guild_CancelTechUpgrade = 101947;
  MSG_C2S_Guild_AssistOther = 101948;  // 协助公会中其它玩家
  MSG_S2C_Guild_AssistOther = 101949;
  MSG_C2S_Guild_ReqAssist = 101950;  // 请求公会中其它玩家协助
  MSG_S2C_Guild_ReqAssist = 101951;
  MSG_C2S_Guild_GetAssistInfo = 101952;  // 获取需要协助玩家列表信息
  MSG_S2C_Guild_GetAssistInfo = 101953;
  MSG_S2C_Guild_NotifyDismiss = 101960;  // 公会自动解散的通知消息
  MSG_S2C_Guild_NotifyJoin = 101961;  // 通知新成员加入
  MSG_S2C_Guild_NotifyQuit = 101962;  // 通知成员主动退出公会
  MSG_S2C_Guild_NotifyUserOnline = 101963;  // 通知公会成员上线
  MSG_S2C_Guild_NotifyEditName = 101964;  // 通知公会名字被修改
  MSG_S2C_Guild_NotifySetUpgradeStrategy = 101965;  // 通知公会升级
  MSG_S2C_Guild_NotifyLearnTech = 101966;  // 通知升级科技
  MSG_S2C_Guild_NotifyUpspeedTech = 101967;  // 通知加速科技
  MSG_S2C_Guild_NotifySignRecord = 101968;  // 通知签到记录
  MSG_S2C_Guild_NotifyAssignTitle = 101969;  // 通知玩家职位被修改
  MSG_S2C_Guild_NotifyKick = 101970;  // 通知玩家被踢出公会
  MSG_S2C_Guild_NotifyApplyJoin = 101973;  // 通知申请加入
  MSG_S2C_Guild_NotifyDeleteApply = 101974;  // 通知删除申请玩家
  MSG_S2C_Guild_NotifyGuildResourceOp = 101975;  // 通知所有玩家资源有更新
  MSG_S2C_Guild_NotifyAttorn = 101976;  // 通知职位被转让,本质上是职位互换
  MSG_S2C_Guild_NotifySetInfo = 101977;  // 通知设置变化
  MSG_S2C_Guild_NotifySetAnnounce = 101978;  // 通知公会宣言变化
  MSG_S2C_Guild_NotifyApprove = 101979;  // 通知批准
  MSG_S2C_Guild_NotifyGuildLog = 101980;  // 通知公会日志
  MSG_S2C_Guild_NotifyUserOffline = 101981;  // 通知玩家离线
  MSG_S2C_Guild_NotifyCancelTech = 101982;  // 通知取消公会科技
  MSG_S2C_Guild_NotifyAssistMe = 101983;  // 其它玩家协助我,通知我
  MSG_S2C_Guild_NotifyReqAssist = 101984;  // 其它玩家请求协助通知
  MSG_S2C_Guild_NotifyUserGuildWeeklyData = 101985;  // 一些数据有变化通知客户端
  MSG_C2S_Guild_GetDetail = 101986;  // 获取公会详情
  MSG_S2C_Guild_GetDetail = 101987;
  MSG_C2S_Guild_GetSignAward = 101988;  // 公会累签奖励
  MSG_S2C_Guild_GetSignAward = 101989;
  MSG_C2S_Guild_SendMail = 101990;  // 公会邮件
  MSG_S2C_Guild_SendMail = 101991;
  MSG_C2S_Guild_GetGuildList = 101992;  // 获取公会列表
  MSG_S2C_Guild_GetGuildList = 101993;
  MSG_C2S_Guild_CancelApply = 101994;  // 取消申请
  MSG_S2C_Guild_CancelApply = 101995;
  MSG_S2C_Guild_NotifyCancelApply = 101996;  // 通知取消申请

  // 0.4.0-迷宫（102001-102050）
  MSG_C2S_Rogue_GetInfo = 102001;  // 获取迷宫信息
  MSG_S2C_Rogue_GetInfo = 102002;
  MSG_C2S_Rogue_SelectDifficulty = 102003;  // 选择难度
  MSG_S2C_Rogue_SelectDifficulty = 102004;
  MSG_C2S_Rogue_SelectCharacter = 102005;  // 选择佣兵
  MSG_S2C_Rogue_SelectCharacter = 102006;
  MSG_C2S_Rogue_EnterGrid = 102007;  // 进入格子
  MSG_S2C_Rogue_EnterGrid = 102008;
  MSG_C2S_Rogue_ChallengeBegin = 102009;  // 挑战
  MSG_S2C_Rogue_ChallengeBegin = 102010;
  MSG_C2S_Rogue_Try = 102011;  // 宝箱/掉落/事件
  MSG_S2C_Rogue_Try = 102012;
  MSG_C2S_Rogue_UseItem = 102013;  // 使用消耗品
  MSG_S2C_Rogue_UseItem = 102014;
  MSG_C2S_Rogue_SelectAward = 102015;  // 奖励领取（1:战斗/2:事件/3:温泉/4:机制）
  MSG_S2C_Rogue_SelectAward = 102016;
  MSG_C2S_Rogue_FlushShop = 102017;  // 刷新商店
  MSG_S2C_Rogue_FlushShop = 102018;
  MSG_C2S_Rogue_BuyShop = 102019;  // 购买商店
  MSG_S2C_Rogue_BuyShop = 102020;
  MSG_C2S_Rogue_Recruit = 102021;  // 招募
  MSG_S2C_Rogue_Recruit = 102022;
  MSG_C2S_Rogue_Wish = 102023;  // 心愿单
  MSG_S2C_Rogue_Wish = 102024;
  MSG_C2S_Rogue_RecruitSelect = 102025;  // 招募选择
  MSG_S2C_Rogue_RecruitSelect = 102026;
  MSG_C2S_Rogue_UseDevice = 102027;  // 使用装置
  MSG_S2C_Rogue_UseDevice = 102028;
  MSG_C2S_Rogue_ActiveTree = 102029;  // 激活科技树
  MSG_S2C_Rogue_ActiveTree = 102030;
  MSG_C2S_Rogue_TaskAward = 102031;  // 周任务奖励
  MSG_S2C_Rogue_TaskAward = 102032;
  MSG_C2S_Rogue_BookAward = 102033;  // 图鉴奖励
  MSG_S2C_Rogue_BookAward = 102034;
  MSG_C2S_Rogue_Quit = 102035;  // 退出（结算）
  MSG_S2C_Rogue_Quit = 102036;
  MSG_S2C_Rogue_ChallengeFinish = 102037;  // 挑战结束
  MSG_S2C_Rogue_SyncInnerInfo = 102038;  // 同步局内数据
  MSG_C2S_Rogue_UseSpring = 102039;  // 使用温泉
  MSG_S2C_Rogue_UseSpring = 102040;
  MSG_C2S_Rogue_DiscardResource = 102041;  // 丢弃资源
  MSG_S2C_Rogue_DiscardResource = 102042;
  MSG_S2C_Rogue_SyncBook = 102043;  // 同步图鉴信息
  MSG_C2S_Rogue_RetryChallenge = 102044;  // 重新挑战
  MSG_S2C_Rogue_RetryChallenge = 102045;
  MSG_S2C_Rogue_TriggerEvent = 102046;  // 触发事件（机制）
  MSG_S2C_Rogue_TriggerEventResource = 102047;  // 触发事件资源通知

  // 0.5.0-日常任务(102051-102070)
  MSG_C2S_DailyQuest_AwardQuest = 102051;  // 领取任务奖励
  MSG_S2C_DailyQuest_AwardQuest = 102052;
  MSG_C2S_DailyQuest_AwardActive = 102053;  // 领取活跃奖励
  MSG_S2C_DailyQuest_AwardActive = 102054;

  // 0.5.0-战令(102071-102100)
  MSG_S2C_BattlePass_BuyNtf = 102071;  // 战令购买档位通知
  MSG_C2S_BattlePass_AwardLv = 102072;  // 战令领取等级奖励
  MSG_S2C_BattlePass_AwardLv = 102073;
  MSG_C2S_BattlePass_BuyLv = 102074;  // 战令购买等级
  MSG_S2C_BattlePass_BuyLv = 102075;
  MSG_C2S_BattlePass_AwardQuest = 102076;  // 战令领取任务奖励
  MSG_S2C_BattlePass_AwardQuest = 102077;

  // 0.8.0-迷宫扩展（102101-102150）
  MSG_C2S_Rogue_GetFirstAward = 102103;  // 领取首通奖励
  MSG_S2C_Rogue_GetFirstAward = 102104;

  // 0.5.0-小游戏(102201-102250)
  MSG_C2S_CasualGame_EnterGame = 102201;  // 创建新的小游戏
  MSG_S2C_CasualGame_EnterGame = 102202;
  MSG_S2C_CasualGame_NotifyPlayCnt = 102203;  // 通知玩法次数
  MSG_C2S_CasualGame_FinishGame = 102204;  // 结束小游戏
  MSG_S2C_CasualGame_FinishGame = 102205;

  // 0.5.0-宝库、割草(102251-102260)
  MSG_C2S_Mow_BeginMow = 102251;  // 开始宝库、割草游戏
  MSG_S2C_Mow_BeginMow = 102252;
  MSG_C2S_Mow_FinishMow = 102253;  // 结算宝库、割草游戏
  MSG_S2C_Mow_FinishMow = 102254;
  MSG_C2S_Mow_Sweep = 102255;  // 宝库、割草扫荡
  MSG_S2C_Mow_Sweep = 102256;

  // 0.5.0-每日特惠(102261-102270)
  MSG_C2S_DailySpecials_Award = 102261;  // 每日特惠领取
  MSG_S2C_DailySpecials_Award = 102262;
  MSG_S2C_DailySpecials_BuyNtf = 102263;  // 每日特惠购买通知
  MSG_S2C_DailySpecials_ContinueBuyNtf = 102264;  // 每日特惠连续购买通知

  // 0.5.0-基金(102271-102280)
  MSG_C2S_Fund_OnekeyObtainReward = 102271;  // 一键领取奖励
  MSG_S2C_Fund_OnekeyObtainReward = 102272;
  MSG_C2S_Fund_ObtainReward = 102273;  // 领取奖励
  MSG_S2C_Fund_ObtainReward = 102274;

  // 0.5.0-首充(102281-102290)
  MSG_C2S_FirstRecharge_Award = 102281;  // 首充领奖
  MSG_S2C_FirstRecharge_Award = 102282;
  MSG_S2C_FirstRecharge_BuyNtf = 102283;  // 首充购买通知

  // 0.5.0-累充(102291-102300)
  MSG_C2S_AccumulatedRecharge_Award = 102291;  // 累充领奖
  MSG_S2C_AccumulatedRecharge_Award = 102292;

  // 0.5.0-月卡(102301-102310)
  MSG_C2S_MonthlyCard_DailyAward = 102301;  // 每日领奖
  MSG_S2C_MonthlyCard_DailyAward = 102302;
  MSG_S2C_MonthlyCard_BuyNtf = 102303;  // 购买通知
  MSG_C2S_MonthlyCard_Active = 102304;  // 激活终身卡
  MSG_S2C_MonthlyCard_Active = 102305;

  // 0.5.0-头像&头像框(102311-102320)
  MSG_C2S_Avatar_Set = 102311;  // 设置头像
  MSG_S2C_Avatar_Set = 102312;
  MSG_C2S_Avatar_Frame_Set = 102313;  // 设置头像框
  MSG_S2C_Avatar_Frame_Set = 102314;

  // 0.5.0-每日签到(1023121-102330)
  MSG_C2S_DailySign_ObtainReward = 102321;  // 每日领奖
  MSG_S2C_DailySign_ObtainReward = 102322;

  // 0.5.0-推送礼包(102351-102370)
  MSG_C2S_PushGift_Buy = 102351;  // 推送礼包购买
  MSG_S2C_PushGift_Buy = 102352;
  MSG_S2C_PushGift_NotifyTrigger = 102353;  // 通知触发推送礼包

  // 0.5.0-七日签到(102371-102380)
  MSG_C2S_SevenSign_Award = 102371;  // 七日签到领奖
  MSG_S2C_SevenSign_Award = 102372;

  // 0.6.0-成就(102381-102390)
  MSG_C2S_Achievement_Award = 102381;  // 领取奖励
  MSG_S2C_Achievement_Award = 102382;
  MSG_S2C_Achievement_Notify = 102383;  // 通知成就达成

  // 0.6.0-七日活动(102391-102400)
  MSG_C2S_SevenAct_AwardPoint = 102391;  // 积分领奖
  MSG_S2C_SevenAct_AwardPoint = 102392;
  MSG_C2S_SevenAct_AwardQuest = 102393;  // 任务领奖
  MSG_S2C_SevenAct_AwardQuest = 102394;

  // 0.8.0-背饰(102421-102460)
  MSG_C2S_Back_Decompose = 102425;  // 分解背饰
  MSG_S2C_Back_Decompose = 102426;
  MSG_C2S_Back_Lock = 102427;  // 背饰上锁
  MSG_S2C_Back_Lock = 102428;
  MSG_C2S_Back_UpgradeLv = 102429;  // 背饰升级
  MSG_S2C_Back_UpgradeLv = 102430;
  MSG_C2S_Back_UpgradeStar = 102431;  // 背饰升星
  MSG_S2C_Back_UpgradeStar = 102432;
  MSG_C2S_Back_Refresh = 102433;  // 刷新背饰商店
  MSG_S2C_Back_Refresh = 102434;
  MSG_C2S_Back_Buy = 102435;  // 购买背饰
  MSG_S2C_Back_Buy = 102436;
  MSG_C2S_Back_SetWish = 102437;  // 设置心愿
  MSG_S2C_Back_SetWish = 102438;
  MSG_C2S_Back_ExpandBag = 102441;  // 解锁背包格子
  MSG_S2C_Back_ExpandBag = 102442;
  MSG_C2S_Back_UpgradeBook = 102443;  // 激活/升级图鉴
  MSG_S2C_Back_UpgradeBook = 102444;

  // 0.9.0-爬塔(102461-102500)
  MSG_C2S_Tower_ChallengeBegin = 102461;  // 爬塔挑战
  MSG_S2C_Tower_ChallengeBegin = 102462;
  MSG_S2C_Tower_ChallengeFinish = 102463;
  MSG_C2S_Tower_ObtainGlobalFirstPassRewards = 102464;  // 领取服务器首通奖励
  MSG_S2C_Tower_ObtainGlobalFirstPassRewards = 102465;
  MSG_C2S_Tower_FastSweep = 102466;  // 快速扫荡
  MSG_S2C_Tower_FastSweep = 102467;
  MSG_C2S_Tower_UnlockBuffSlot = 102468;  // 扩展 Buff 插槽
  MSG_S2C_Tower_UnlockBuffSlot = 102469;
  MSG_C2S_Tower_RefreshBuff = 102470;  // 刷新 buff
  MSG_S2C_Tower_RefreshBuff = 102471;
  MSG_C2S_Tower_SelectBuff = 102472;  // 选择 buff
  MSG_S2C_Tower_SelectBuff = 102473;
  MSG_C2S_Tower_SetBuffPefer = 102474;  // 设置 Buff 偏好
  MSG_S2C_Tower_SetBuffPefer = 102475;
  MSG_S2C_Tower_NotifyServerMaxId = 102476;  // 通知爬塔全服最新关卡 id
  MSG_C2S_Tower_GetUserByFloors = 102477;  // 根据爬塔层数获取玩家数据
  MSG_S2C_Tower_GetUserByFloors = 102478;
  MSG_C2S_Tower_GetInfo = 102479;
  MSG_S2C_Tower_GetInfo = 102480;

  // 0.9.0-佣兵图鉴(102501-102510)
  MSG_C2S_CompanionBook_UpgradeLv = 102501;  // 图鉴激活/升级
  MSG_S2C_CompanionBook_UpgradeLv = 102502;

  // 0.9.0-头衔(102511-102520)
  MSG_C2S_Honor_AwardQuest = 102511;  // 领取任务
  MSG_S2C_Honor_AwardQuest = 102512;
  MSG_C2S_Honor_Upgrade = 102513;  // 晋升
  MSG_S2C_Honor_Upgrade = 102514;

  // 0.9.50-一条龙礼包(102521-102530)
  MSG_C2S_SeriesGift_Buy = 102521;  // 购买一条龙礼包
  MSG_S2C_SeriesGift_Buy = 102522;
  MSG_S2C_SeriesGift_NotifyTrigger = 102523;  // 通知触发了一条龙礼包

  // 0.9.50-每日惊喜福利(102531-102540)
  MSG_C2S_DailySurpriseBenefit_ObtainRewards = 102531;  // 领取每日惊喜福利
  MSG_S2C_DailySurpriseBenefit_ObtainRewards = 102532;

  // 0.9.50-功能预览(102541-102550)
  MSG_C2S_FunctionPreview_ObtainRewards = 102541;  // 领取功能预览奖励
  MSG_S2C_FunctionPreview_ObtainRewards = 102542;

  // 0.9.50-宝库(102551-102560)
  MSG_C2S_Treasury_ChallengeBegin = 102551;  // 开始挑战宝库
  MSG_S2C_Treasury_ChallengeBegin = 102552;
  MSG_S2C_Treasury_ChallengeFinish = 102553;  // 挑战宝库结束
  MSG_C2S_Treasury_Sweep = 102554;  // 扫荡
  MSG_S2C_Treasury_Sweep = 102555;

  // 0.9.50-广告(102561-102570)
  MSG_C2S_Advertise_Use = 102561;  // 看广告增加次数，要特殊处理 仅对7|8|9生效
  MSG_S2C_Advertise_Use = 102562;

  // 0.9.50-礼包码(102571-102580)
  MSG_C2S_GiftCode_Award = 102571;  // 礼包码领取
  MSG_S2C_GiftCode_Award = 102572;

  // 1.0.0-短期战令(102581-102600)
  MSG_C2S_ShortBattlePass_Start = 102581;  // 短期战令开启
  MSG_S2C_ShortBattlePass_Start = 102582;
  MSG_C2S_ShortBattlePass_AwardBp = 102583;  // 活跃战令领取战令奖励
  MSG_S2C_ShortBattlePass_AwardBp = 102584;
  MSG_S2C_ShortBattlePass_BuyBpNtf = 102585;  // 短期战令购买通知
  MSG_C2S_ShortBattlePass_AwardQuest = 102586;  // 短期战令领取任务奖励
  MSG_S2C_ShortBattlePass_AwardQuest = 102587;
  MSG_C2S_ShortBattlePass_AwardPack = 102588;  // 短期战令领取礼包
  MSG_S2C_ShortBattlePass_AwardPack = 102589;
  MSG_S2C_ShortBattlePass_BuyPackNtf = 102590;  // 短期战令购买礼包通知
  MSG_C2S_ShortBattlePass_AwardProgress = 102591;  // 短期战令领取进度奖励
  MSG_S2C_ShortBattlePass_AwardProgress = 102592;

  // 1.0.0-主题活动(102601-102620)
  MSG_S2C_ThemeActivity_Notify = 102601;  // 主题活动通知
  MSG_C2S_ThemeActivity_Roll = 102602;  // 主题活动抽奖
  MSG_S2C_ThemeActivity_Roll = 102603;
  MSG_C2S_ThemeActivity_Scrape = 102604;  // 主题活动刮奖
  MSG_S2C_ThemeActivity_Scrape = 102605;
  MSG_C2S_ThemeActivity_AwardAccRoll = 102606;  // 主题活动领取累计抽数奖励
  MSG_S2C_ThemeActivity_AwardAccRoll = 102607;
  MSG_S2C_ThemeActivity_BuyPackNtf = 102608;  // 主题活动购买礼包通知
  MSG_C2S_ThemeActivity_AwardQuest = 102609;  // 主题活动领取任务奖励
  MSG_S2C_ThemeActivity_AwardQuest = 102610;
  MSG_C2S_ThemeActivity_NewLottery = 102611;  // 主题活动新建刮刮卡
  MSG_S2C_ThemeActivity_NewLottery = 102612;
  MSG_C2S_ThemeActivity_AwardPack = 102613;  // 主题活动领取礼包
  MSG_S2C_ThemeActivity_AwardPack = 102614;
  MSG_C2S_ThemeActivity_SetWish = 102615;  // 主题活动设置心愿
  MSG_S2C_ThemeActivity_SetWish = 102616;

  // 1.0.0-领地(102651-102750)
  MSG_C2S_Territory_GetInfo = 102651;  // 获取领地信息
  MSG_S2C_Territory_GetInfo = 102652;
  MSG_C2S_Territory_UpgradeMainCity = 102653;  // 升级主城
  MSG_S2C_Territory_UpgradeMainCity = 102654;
  MSG_C2S_Territory_RefreshTradeArea = 102655;  // 刷新贸易区
  MSG_S2C_Territory_RefreshTradeArea = 102656;
  MSG_C2S_Territory_TradeDispatch = 102657;  // 贸易派遣
  MSG_S2C_Territory_TradeDispatch = 102658;
  MSG_C2S_Territory_AutoTradeDispatch = 102659;  // 自动贸易派遣
  MSG_S2C_Territory_AutoTradeDispatch = 102660;
  MSG_C2S_Territory_ObtainTradeDispatchRewards = 102661;  // 领取贸易派遣奖励
  MSG_S2C_Territory_ObtainTradeDispatchRewards = 102662;
  MSG_C2S_Territory_UpgradeBuilding = 102663;  // 升级建筑
  MSG_S2C_Territory_UpgradeBuilding = 102664;
  MSG_C2S_Territory_ObtainBuildingReward = 102665;  // 领取建筑奖励
  MSG_S2C_Territory_ObtainBuildingReward = 102666;
  MSG_C2S_Territory_ObtainBuildingRewardsUseItem = 102667;  // 使用道具领取建筑奖励
  MSG_S2C_Territory_ObtainBuildingRewardsUseItem = 102668;
  MSG_C2S_Territory_VisitFriend = 102669;  // 拜访好友
  MSG_S2C_Territory_VisitFriend = 102670;
  MSG_S2C_Territory_NotifyLog = 102671;  // 新增日志通知
  MSG_C2S_Territory_Like = 102672;  // 点赞
  MSG_S2C_Territory_Like = 102673;
  MSG_S2C_Territory_NotifyLike = 102674;  // 通知好友点赞
  MSG_C2S_Territory_ObtainEventRewards = 102675;  // 领取事件奖励
  MSG_S2C_Territory_ObtainEventRewards = 102676;
  MSG_C2S_Territory_ObtainFriendEventRewards = 102677;  // 领取好友事件奖励
  MSG_S2C_Territory_ObtainFriendEventRewards = 102678;
  MSG_C2S_Territory_ObtainQuestRewards = 102679;  // 领取任务奖励
  MSG_S2C_Territory_ObtainQuestRewards = 102680;
  MSG_S2C_Territory_NotifyEventAssignFriend = 102681;  // 通知事件分配好友
  MSG_C2S_Territory_ObtainRewardsByAdv = 102682;  // 广告领取奖励
  MSG_S2C_Territory_ObtainRewardsByAdv = 102683;
  MSG_C2S_Territory_CompanionEquip = 102684;  // 佣兵驻守
  MSG_S2C_Territory_CompanionEquip = 102685;

  // 1.0.0-佣兵装备(102751-102800)
  MSG_C2S_CompanionEquip_ChangeFormation = 102751;  // 佣兵装备调整阵容
  MSG_S2C_CompanionEquip_ChangeFormation = 102752;
  MSG_C2S_CompanionEquip_Upgrade = 102753;  // 佣兵装备升级
  MSG_S2C_CompanionEquip_Upgrade = 102754;
  MSG_C2S_CompanionEquip_Forge = 102755;  // 佣兵装备锻造
  MSG_S2C_CompanionEquip_Forge = 102756;
  MSG_C2S_CompanionEquip_Decompose = 102757;  // 佣兵装备分解
  MSG_S2C_CompanionEquip_Decompose = 102758;
  MSG_C2S_CompanionEquip_Combine = 102759;  // 佣兵装备合成
  MSG_S2C_CompanionEquip_Combine = 102760;
  MSG_C2S_CompanionEquip_Lock = 102761;  // 佣兵装备上锁/解锁
  MSG_S2C_CompanionEquip_Lock = 102762;

  // 1.1.0-公会gve(102801-102850)
  MSG_C2S_GuildGVE_ChallengeBegin = 102801;  // 公会gve挑战
  MSG_S2C_GuildGVE_ChallengeBegin = 102802;
  MSG_S2C_GuildGVE_ChallengeFinish = 102803;
  MSG_C2S_GuildGVE_GetRank = 102804;  // 获取排行榜
  MSG_S2C_GuildGVE_GetRank = 102805;
  MSG_C2S_GuildGVE_GetGiveLog = 102806;  // 获取赠送/受赠记录
  MSG_S2C_GuildGVE_GetGiveLog = 102807;
  MSG_C2S_GuildGVE_Give = 102808;  // 赠送
  MSG_S2C_GuildGVE_Give = 102809;
  MSG_S2C_GuildGVE_GiveNtf = 102810;  // 赠送通知
  MSG_C2S_GuildGVE_BoxAward = 102811;  // 宝库领奖
  MSG_S2C_GuildGVE_BoxAward = 102812;
  MSG_C2S_GuildGVE_StartAddition = 102813;  // 发起公会加成
  MSG_S2C_GuildGVE_StartAddition = 102814;
  MSG_C2S_GuildGVE_GetInfo = 102815;  // 获取公会gve信息
  MSG_S2C_GuildGVE_GetInfo = 102816;
  MSG_S2C_GuildGVE_MonsterNtf = 102817;  // 怪物血量通知
  MSG_S2C_GuildGVE_OpenNtf = 102818;  // 玩法开启通知
  MSG_S2C_GuildGVE_AdditionNtf = 102819;  // 公会加成通知
  MSG_C2S_GuildGVE_Sweep = 102820;  // 扫荡
  MSG_S2C_GuildGVE_Sweep = 102821;

  // 1.1.0-签到送全英雄(102851-102860)
  MSG_S2C_FlushUserSignIn = 102851;
  MSG_C2S_SignIn_DailyAward = 102852;  // 每日签到奖励
  MSG_S2C_SignIn_DailyAward = 102853;
  MSG_C2S_SignIn_CumulateAward = 102854;  // 累计签到奖励
  MSG_S2C_SignIn_CumulateAward = 102855;

  // 1.1.0-战宠(102861-102900)
  MSG_C2S_Pet_UpLevel = 102861;  // 战宠升级
  MSG_S2C_Pet_UpLevel = 102862;
  MSG_C2S_Pet_UpQuality = 102863;  // 战宠合成(升品)
  MSG_S2C_Pet_UpQuality = 102864;
  MSG_C2S_Pet_UpQuality_OneKey = 102865;  // 战宠一键合成
  MSG_S2C_Pet_UpQuality_OneKey = 102866;
  MSG_C2S_Pet_Formation_Equip = 102867;  // 战宠上阵
  MSG_S2C_Pet_Formation_Equip = 102868;
  MSG_C2S_Pet_Equipment_UpLevel = 102869;  // 战宠装备升级
  MSG_S2C_Pet_Equipment_UpLevel = 102870;
  MSG_C2S_Pet_Equipment_Equip = 102871;  // 战宠装备上阵
  MSG_S2C_Pet_Equipment_Equip = 102872;
  MSG_C2S_Pet_Equipment_Lock = 102873;  // 战宠装备上锁
  MSG_S2C_Pet_Equipment_Lock = 102874;
  MSG_C2S_Pet_Compose_Active = 102875;  // 战宠收藏激活
  MSG_S2C_Pet_Compose_Active = 102876;
  MSG_C2S_Pet_Recruit_GetInfo = 102877;  // 战宠招募信息
  MSG_S2C_Pet_Recruit_GetInfo = 102878;
  MSG_C2S_Pet_Recruit_Roll = 102879;  // 战宠招募
  MSG_S2C_Pet_Recruit_Roll = 102880;
  MSG_C2S_Pet_Recruit_Select = 102881;  // 战宠招募选择
  MSG_S2C_Pet_Recruit_Select = 102882;
  MSG_C2S_Pet_Recruit_SetMultiple = 102883;  // 战宠招募设置多倍
  MSG_S2C_Pet_Recruit_SetMultiple = 102884;

  // 1.1.0-神兽秘境&神兽boss(102901-103000)
  MSG_C2S_Secret_GetInfo = 102901;  // 获取神兽秘境信息
  MSG_S2C_Secret_GetInfo = 102902;
  MSG_C2S_Secret_ChallengeBegin = 102903;  // 挑战神兽
  MSG_S2C_Secret_ChallengeBegin = 102904;
  MSG_S2C_Secret_ChallengeFinish = 102905;
  MSG_C2S_Secret_GetBossInfo = 102906;  // 获取神兽Boss信息
  MSG_S2C_Secret_GetBossInfo = 102907;
  MSG_C2S_Secret_EnterBossRoom = 102908;  // 进入神兽Boss房间
  MSG_S2C_Secret_EnterBossRoom = 102909;
  MSG_C2S_Secret_LeaveBossRoom = 102910;  // 离开神兽Boss房间（放弃）
  MSG_S2C_Secret_LeaveBossRoom = 102911;
  MSG_C2S_Secret_GetBossRankList = 102912;  // 获取神兽Boss排行榜
  MSG_S2C_Secret_GetBossRankList = 102913;
  MSG_C2S_Secret_ClearBossCD = 102914;  // 清除挑战CD（复活）
  MSG_S2C_Secret_ClearBossCD = 102915;
  MSG_C2S_Secret_ChallengeBossBegin = 102916;  // 挑战神兽Boss
  MSG_S2C_Secret_ChallengeBossBegin = 102917;
  MSG_S2C_Secret_ChallengeBossFinish = 102918;
  MSG_C2S_Secret_ChallengeQuick = 102919;  // 扫荡神兽
  MSG_S2C_Secret_ChallengeQuick = 102920;
  MSG_S2C_Secret_BossRankAward = 102921;  // 神兽Boss排行奖励
  MSG_S2C_Secret_BossRankNotify = 102922;  // 神兽Boss排行变化通知

  // 1.0.1-跨服竞技场(103001-103100)
  MSG_C2S_PeakArena_GetInfo = 103001;  // 获取玩法信息
  MSG_S2C_PeakArena_GetInfo = 103002;
  MSG_C2S_PeakArena_RefreshMatch = 103003;  // 刷新匹配
  MSG_S2C_PeakArena_RefreshMatch = 103004;
  MSG_C2S_PeakArena_ChallengeBegin = 103005;  // 竞技场挑战开始
  MSG_S2C_PeakArena_ChallengeBegin = 103006;
  MSG_S2C_PeakArena_ChallengeFinish = 103007;  // 竞技场挑战结束
  MSG_C2S_PeakArena_GetDefendTeamDetail = 103008;  // 获取防守队伍详细信息
  MSG_S2C_PeakArena_GetDefendTeamDetail = 103009;
  MSG_C2S_PeakArena_SetTeam = 103016;  // 设置进攻或者防守队伍
  MSG_S2C_PeakArena_SetTeam = 103017;
  MSG_C2S_PeakArena_GetBattleRecord = 103010;  // 获取对战记录
  MSG_S2C_PeakArena_GetBattleRecord = 103011;
  MSG_S2C_PeakArena_NotifyAttacked = 103018;  // 竞技场通知被打
  MSG_C2S_PeakArena_GetRank = 103019;  // 获取排行榜
  MSG_S2C_PeakArena_GetRank = 103020;
  MSG_C2S_PeakArena_Sweep = 103021;  // 扫荡
  MSG_S2C_PeakArena_Sweep = 103022;

  // 1.1.0-新服竞赛(103101-103130)
  MSG_S2C_FlushCompetitions = 103101;  // 输出竞赛数据
  MSG_C2S_Competition_ObtainQuestAward = 103102;  // 竞赛任务奖励
  MSG_S2C_Competition_ObtainQuestAward = 103103;
  MSG_C2S_Competition_ObtainScoreAward = 103104;  // 积分奖励
  MSG_S2C_Competition_ObtainScoreAward = 103105;

  // 1.1.50 - 领地领主(103131-103230)
  MSG_C2S_TerritoryLord_GetInfo = 103131;
  MSG_S2C_TerritoryLord_GetInfo = 103132;
  MSG_C2S_TerritoryLord_CaptureChallengeBegin = 103133;  // 征服封臣
  MSG_S2C_TerritoryLord_CaptureChallengeBegin = 103134;
  MSG_S2C_TerritoryLord_CaptureChallengeFinish = 103135;
  MSG_C2S_TerritoryLord_EscapeChallengeBegin = 103136;  // 逃离领主
  MSG_S2C_TerritoryLord_EscapeChallengeBegin = 103137;
  MSG_S2C_TerritoryLord_EscapeChallengeFinish = 103138;
  MSG_C2S_TerritoryLord_FastEscape = 103139;  // 付费快速逃离
  MSG_S2C_TerritoryLord_FastEscape = 103140;
  MSG_C2S_TerritoryLord_SetConfrontState = 103141;  // 设置迎战状态
  MSG_S2C_TerritoryLord_SetConfrontState = 103142;
  MSG_C2S_TerritoryLord_LevyAward = 103143;  // 征收
  MSG_S2C_TerritoryLord_LevyAward = 103144;
  MSG_C2S_TerritoryLord_GrantAward = 103145;  // 封赏
  MSG_S2C_TerritoryLord_GrantAward = 103146;
  MSG_C2S_TerritoryLord_Recommend = 103147;  // 推荐
  MSG_S2C_TerritoryLord_Recommend = 103148;
  MSG_C2S_TerritoryLord_Search = 103149;  // 精确查找
  MSG_S2C_TerritoryLord_Search = 103150;
  MSG_C2S_TerritoryLord_ReleaseVassal = 103151;  // 驱逐封臣
  MSG_S2C_TerritoryLord_ReleaseVassal = 103152;
  MSG_C2S_TerritoryLord_FastSetConfrontState = 103153;  // 一键设置迎战状态
  MSG_S2C_TerritoryLord_FastSetConfrontState = 103154;
  MSG_C2S_TerritoryLord_RefreshRecommend = 103155;  // 刷新推荐列表
  MSG_S2C_TerritoryLord_RefreshRecommend = 103156;
  MSG_S2C_TerritoryLord_Notify = 103157;  // 领主跟封臣变化推送

  // 1.1.50-通用礼包(103231-103240)
  MSG_C2S_Pack_Buy = 103231;  // 通用礼包购买
  MSG_S2C_Pack_Buy = 103232;

  // 1.2.0-节庆活动(103241-103260)
  MSG_C2S_FestivalActivity_GetInfo = 103241;  // 获取活动信息
  MSG_S2C_FestivalActivity_GetInfo = 103242;
  MSG_C2S_FestivalActivity_StageChallenge = 103243;  // 关卡挑战
  MSG_S2C_FestivalActivity_StageChallenge = 103244;
  MSG_C2S_FestivalActivity_StageEnd = 103245;  // 进入下一关
  MSG_S2C_FestivalActivity_StageEnd = 103246;
  MSG_C2S_FestivalActivity_QuestAward = 103247;  // 领取任务奖励
  MSG_S2C_FestivalActivity_QuestAward = 103248;
  MSG_S2C_FestivalActivity_NoticeInfo = 103249;  // 活动信息更新推送

  // 1.2.0-永恒战场(103280-103320)
  MSG_C2S_Slg_Enter = 103280;  // 进入大地图
  MSG_S2C_Slg_Enter = 103281;
  MSG_C2S_Slg_UpgradeMainCity = 103282;  // 主城升级
  MSG_S2C_Slg_UpgradeMainCity = 103283;
  MSG_C2S_Slg_StationMainCity = 103284;  // 驻扎主城
  MSG_S2C_Slg_StationMainCity = 103285;
  MSG_C2S_Slg_UpgradeBarrack = 103286;  // 兵营升级
  MSG_S2C_Slg_UpgradeBarrack = 103287;
  MSG_C2S_Slg_UpgradeSupply = 103288;  // 补给站升级
  MSG_S2C_Slg_UpgradeSupply = 103289;
  MSG_C2S_Slg_ObtainSupplyReward = 103290;  // 领取补给站奖励
  MSG_S2C_Slg_ObtainSupplyReward = 103291;
  MSG_C2S_Slg_UseSupplyToken = 103292;  // 使用补给令
  MSG_S2C_Slg_UseSupplyToken = 103293;
  MSG_S2C_Slg_NotifyActivity = 103294;  // 活动通知
  MSG_C2S_Slg_MoveHome = 103295;  // 迁城
  MSG_S2C_Slg_MoveHome = 103296;
  MSG_C2S_Slg_GetMapShowData = 103299;  // 获取地图显示数据
  MSG_S2C_Slg_GetMapShowData = 103300;
  MSG_C2S_Slg_GetMapSimpleShowData = 103301;  // 获取地图简单显示数据
  MSG_S2C_Slg_GetMapSimpleShowData = 103302;
  MSG_S2C_Slg_FlushBattleResults = 103304;
  MSG_C2S_Slg_ObtainBattleReward = 103305;  // 领取战场奖励
  MSG_S2C_Slg_ObtainBattleReward = 103306;
  MSG_S2C_Slg_NotifyMoveUnit = 103307;  // 通知移动部队
  MSG_C2S_Slg_Leave = 103308;  // 离开大地图
  MSG_S2C_Slg_Leave = 103309;
  MSG_S2C_Slg_NotifyMapShow = 103310;  // 通知地图玩家显示
  MSG_C2S_Slg_ObtainSupplyRewardsByAdv = 103311;  // 广告领取补给站奖励
  MSG_S2C_Slg_ObtainSupplyRewardsByAdv = 103312;
  MSG_C2S_Slg_ObtainPreheatRewards = 103313;  // 领取预热奖励
  MSG_S2C_Slg_ObtainPreheatRewards = 103314;
  MSG_C2S_Slg_GetUserShowStatistics = 103315;  // 获取玩家显示统计数据
  MSG_S2C_Slg_GetUserShowStatistics = 103316;
  MSG_C2S_Slg_GetUserShowRankStatistic = 103317;  // 获取玩家显示排行统计数据
  MSG_S2C_Slg_GetUserShowRankStatistic = 103318;
  MSG_C2S_Slg_ObtainShowRewards = 103319;  // 领取展示期奖励
  MSG_S2C_Slg_ObtainShowRewards = 103320;

  // 1.2.0-永恒战场组队boss(103321-103380)
  MSG_C2S_Slg_BossCreateTeam = 103321;  // 组队boss - 创建队伍
  MSG_S2C_Slg_BossCreateTeam = 103322;
  MSG_C2S_Slg_BossJoinTeam = 103323;  // 组队boss - 加入队伍
  MSG_S2C_Slg_BossJoinTeam = 103324;
  MSG_C2S_Slg_BossTeamKickOut = 103325;  // 组队boss - 踢出队伍
  MSG_S2C_Slg_BossTeamKickOut = 103326;
  MSG_C2S_Slg_BossTransferLeader = 103327;  // 组队boss - 转让队长
  MSG_S2C_Slg_BossTransferLeader = 103328;
  MSG_C2S_Slg_BossLeave = 103329;  // 组队boss - 离开队伍
  MSG_S2C_Slg_BossLeave = 103330;
  MSG_C2S_Slg_BossTeamList = 103331;  // 组队boss - 队伍列表
  MSG_S2C_Slg_BossTeamList = 103332;
  MSG_C2S_Slg_BossTeamInfo = 103333;  // 组队boss - 获得队伍信息
  MSG_S2C_Slg_BossTeamInfo = 103334;
  MSG_S2C_Slg_BossUserStateNotify = 103335;  // 组队boss - 玩家状态变化通知
  MSG_S2C_Slg_BossTeamJoinNotify = 103336;  // 组队boss - 玩家加入通知
  MSG_S2C_Slg_BossBattleStartNotify = 103337;  // 组队boss - 战斗开始通知
  MSG_S2C_Slg_BossBattleFinishNotify = 103338;  // 组队boss - 战斗完成通知
  MSG_C2S_Slg_BossDismissTeam = 103340;  // 组队boss - 解散队伍
  MSG_S2C_Slg_BossDismissTeam = 103341;
  MSG_C2S_Slg_BossMonsterTeam = 103342;  // 组队boss - 获取怪物队伍
  MSG_S2C_Slg_BossMonsterTeam = 103343;
  MSG_C2S_Slg_BossQuickJoinTeam = 103344;  // 组队boss - 快速加入队伍
  MSG_S2C_Slg_BossQuickJoinTeam = 103345;
  MSG_C2S_Slg_BossTeamInstantArrival = 103346;  // 组队boss - 立即到达
  MSG_S2C_Slg_BossTeamInstantArrival = 103347;
  MSG_S2C_Slg_BossTeamInstantArrivalNotify = 103348;  // 组队boss - 立即到达操作通知

  // 1.2.0-永恒战场-攻城&战报(103381-103480)
  MSG_C2S_Slg_GetReport = 103381;  // 获取历史战报
  MSG_S2C_Slg_GetReport = 103382;
  MSG_C2S_Slg_GetRank = 103383;  // 获取排行榜（非通用排行榜）
  MSG_S2C_Slg_GetRank = 103384;
  MSG_C2S_Slg_SimulateBattle = 103385;  // 模拟战斗
  MSG_S2C_Slg_SimulateBattle = 103386;
  MSG_C2S_Slg_CityMarch = 103387;  // 攻城出征
  MSG_S2C_Slg_CityMarch = 103388;
  MSG_C2S_Slg_CityCancelMove = 103389;  // 攻城撤军
  MSG_S2C_Slg_CityCancelMove = 103390;
  MSG_C2S_Slg_GetCityGather = 103391;  // 获取攻城集结信息
  MSG_S2C_Slg_GetCityGather = 103392;
  MSG_C2S_Slg_GetCityDefInfo = 103393;  // 获取攻城防守信息
  MSG_S2C_Slg_GetCityDefInfo = 103394;
  MSG_S2C_Slg_CityNtf = 103397;  // 攻城通知
  MSG_S2C_Slg_CityBattleEnd = 103398;  // 攻城战斗结束通知
  MSG_C2S_Slg_CityDeclare = 103399;  // 攻城宣战
  MSG_S2C_Slg_CityDeclare = 103400;
  MSG_S2C_Slg_CityDeclareNtf = 103401;  // 攻城宣战通知
  MSG_S2C_Slg_CityBeDeclaredNtf = 103402;  // 攻城被宣战通知
  MSG_S2C_Slg_CityMarchNtf = 103404;  // 城池集结通知
  MSG_C2S_Slg_BuildCity = 103405;  // 捐赠补给
  MSG_S2C_Slg_BuildCity = 103406;
  MSG_C2S_Slg_GetCityBuildInfo = 103407;  // 获取城池捐赠信息
  MSG_S2C_Slg_GetCityBuildInfo = 103408;
  MSG_S2C_Slg_CityBattleGuildSummaryNtf = 103409;  // 攻城结果公会汇总
  MSG_C2S_Slg_GetInfoOnCityBattleEnd = 103410;  // 攻城结束后拉取信息
  MSG_S2C_Slg_GetInfoOnCityBattleEnd = 103411;
  MSG_C2S_Slg_SetCityDeclaration = 103412;  // 设置城池集结宣言
  MSG_S2C_Slg_SetCityDeclaration = 103413;
  MSG_C2S_Slg_GetCityShowData = 103414;  // 获取城池显示数据
  MSG_S2C_Slg_GetCityShowData = 103415;
  MSG_C2S_Slg_GetCityExtraShowData = 103416;  // 获取城池额外显示数据
  MSG_S2C_Slg_GetCityExtraShowData = 103417;

  // 1.2.0-永恒战场-野怪&外围系统(103600-103699)
  MSG_C2S_Slg_PVEMarch = 103600;  // 打野
  MSG_S2C_Slg_PVEMarch = 103601;
  MSG_C2S_Slg_MainQuestAward = 103602;  // 主线任务奖励
  MSG_S2C_Slg_MainQuestAward = 103603;
  MSG_C2S_Slg_CityQuestAward = 103606;  // 攻城任务奖励
  MSG_S2C_Slg_CityQuestAward = 103607;
  MSG_C2S_Slg_GetBattlePassInfo = 103608;  // 获取战令信息
  MSG_S2C_Slg_GetBattlePassInfo = 103609;
  MSG_C2S_Slg_BattlePassAwardQuest = 103610;  // 领取战令奖励
  MSG_S2C_Slg_BattlePassAwardQuest = 103611;
  MSG_S2C_Slg_BattlePassBuyNtf = 103612;  // 战令购买档位通知
  MSG_C2S_Slg_BattlePassBuyLv = 103613;  // 购买等级
  MSG_S2C_Slg_BattlePassBuyLv = 103614;
  MSG_C2S_Slg_BattlePassAwardLv = 103615;  // 战令领取等级奖励
  MSG_S2C_Slg_BattlePassAwardLv = 103616;
  MSG_C2S_Slg_GetMonsterInfo = 103617;  // 查看怪物队伍信息（个人野怪）
  MSG_S2C_Slg_GetMonsterInfo = 103618;
  MSG_C2S_Slg_PVEWithdraw = 103619;  // 打野撤军
  MSG_S2C_Slg_PVEWithdraw = 103620;
  MSG_S2C_Slg_SyncUserTeam = 103621;  // 同步玩家队伍
  MSG_S2C_Slg_PVEBattleReport = 103622;  // 打野战报
  MSG_C2S_Slg_GetUserDetail = 103623;  // 获取玩家详细信息
  MSG_S2C_Slg_GetUserDetail = 103624;
  MSG_S2C_Slg_SyncMainQuest = 103625;  // 主线任务进度更新
  MSG_S2C_Slg_PVEBattleResult = 103626;  // 打野战斗结果
  MSG_S2C_Slg_NotifyCheckpointQuest = 103627;  // 关卡任务计数通知
  MSG_S2C_Slg_NotifyCheckpointQuestAward = 103628;  // 关卡任务奖励通知
  MSG_S2C_Slg_SyncCityQuestProgress = 103629;  // 同步攻城任务进度
  MSG_C2S_Slg_EditUserTeam = 103630;  // 编辑队伍
  MSG_S2C_Slg_EditUserTeam = 103631;
  MSG_S2C_Slg_SyncUserScore = 103632;  // 同步玩家贡献值
  // 1.3.0-公会战场-S2任务
  MSG_C2S_Slg_ObtainQuestReward = 103633;  // 领取任务奖励
  MSG_S2C_Slg_ObtainQuestReward = 103634;
  MSG_C2S_Slg_OnekeyObtainRewards = 103635;  // 一键领取公会奖励
  MSG_S2C_Slg_OnekeyObtainRewards = 103636;
  MSG_C2S_Slg_MoveTargetRightNow = 103637;  // 立刻到达目的地
  MSG_S2C_Slg_MoveTargetRightNow = 103638;
  MSG_S2C_Slg_DeleteMoveUnit = 103639;  // 删除移动部队

  // 1.2.0-公会-红包(103700-103749)
  MSG_C2S_Guild_RedPacket_GetInfo = 103700;  // 获取公会红包信息
  MSG_S2C_Guild_RedPacket_GetInfo = 103701;
  MSG_C2S_Guild_RedPacket_Send = 103702;  // 发送红包
  MSG_S2C_Guild_RedPacket_Send = 103703;
  MSG_C2S_Guild_RedPacket_Pick = 103704;  // 拾取红包
  MSG_S2C_Guild_RedPacket_Pick = 103705;
  MSG_C2S_Guild_RedPacket_Open = 103706;  // 开启红包
  MSG_S2C_Guild_RedPacket_Open = 103707;

  // 1.2.0-许愿池(钓鱼)(103750-103760)
  MSG_C2S_WishPool_GetInfo = 103750;  // 基本信息
  MSG_S2C_WishPool_GetInfo = 103751;
  MSG_C2S_WishPool_DailyAward = 103752;  // 每日领奖
  MSG_S2C_WishPool_DailyAward = 103753;
  MSG_C2S_WishPool_Draw = 103754;  // 抽奖
  MSG_S2C_WishPool_Draw = 103755;
  MSG_C2S_WishPool_Exchange = 103756;  // 兑换
  MSG_S2C_WishPool_Exchange = 103757;
  MSG_C2S_WishPool_GetResource = 103758;  // 获取资源
  MSG_S2C_WishPool_GetResource = 103759;
  MSG_S2C_WishPool_Sync = 103760;  // 数据同步

  // 1.2.50-哥布林(103761-103780)
  MSG_C2S_Goblin_WearDress = 103761;  // 穿戴时装
  MSG_S2C_Goblin_WearDress = 103762;

  // 1.2.60-一番赏活动（103781-103800）
  MSG_C2S_Gacha_GetInfo = 103781;  // 获取信息
  MSG_S2C_Gacha_GetInfo = 103782;
  MSG_C2S_Gacha_ChoseAward = 103783;  // 选择奖励
  MSG_S2C_Gacha_ChoseAward = 103784;
  MSG_C2S_Gacha_QuestAward = 103785;  // 领取任务奖励
  MSG_S2C_Gacha_QuestAward = 103786;
  MSG_C2S_Gacha_Draw = 103787;  // 抽奖
  MSG_S2C_Gacha_Draw = 103788;
  MSG_C2S_Gacha_Reset = 103789;  // 重置奖池
  MSG_S2C_Gacha_Reset = 103790;
  MSG_C2S_Gacha_AccumulatedAward = 103791;  // 领取累抽奖励
  MSG_S2C_Gacha_AccumulatedAward = 103792;

  // 1.2.60-循环活动(103801-103820)
  MSG_C2S_CirculateAct_GetInfo = 103801;  // 获取信息
  MSG_S2C_CirculateAct_GetInfo = 103802;
  MSG_C2S_CirculateAct_QuestAward = 103803;  // 领取任务
  MSG_S2C_CirculateAct_QuestAward = 103804;

  // 1.2.60 - 炼金工坊(103821-103880)
  MSG_C2S_Alchemy_GetInfo = 103821;  // 获取信息
  MSG_S2C_Alchemy_GetInfo = 103822;
  MSG_C2S_Alchemy_GuildChests = 103823;  // 公会宝箱
  MSG_S2C_Alchemy_GuildChests = 103824;
  MSG_C2S_Alchemy_ObtainChestAward = 103825;  // 领取宝箱奖励
  MSG_S2C_Alchemy_ObtainChestAward = 103826;
  MSG_C2S_Alchemy_PotionCompose = 103827;  // 药剂合成
  MSG_S2C_Alchemy_PotionCompose = 103828;
  MSG_C2S_Alchemy_Build = 103829;  // 炼金
  MSG_S2C_Alchemy_Build = 103830;
  MSG_S2C_Alchemy_AwardLogNotify = 103831;
  MSG_C2S_Alchemy_RequestLogs = 103832;  // 获取请求日志
  MSG_S2C_Alchemy_RequestLogs = 103833;
  MSG_C2S_Alchemy_SendRequest = 103834;  // 发送求助请求
  MSG_S2C_Alchemy_SendRequest = 103835;
  MSG_C2S_Alchemy_SupportRequest = 103836;  // 帮助请求
  MSG_S2C_Alchemy_SupportRequest = 103837;
  MSG_C2S_Alchemy_ObtainRequestAward = 103838;  // 领取求助奖励
  MSG_S2C_Alchemy_ObtainRequestAward = 103839;
  MSG_C2S_Alchemy_RequestList = 103840;  // 请求列表
  MSG_S2C_Alchemy_RequestList = 103841;
  MSG_S2C_Alchemy_SupportNotify = 103842;  // 帮助通知
  MSG_S2C_Alchemy_AppendGuildChestNotify = 103843;  // 公会宝箱通知
  MSG_C2S_Alchemy_ObtainGuildPointAward = 103844;  // 领取公会积分奖励
  MSG_S2C_Alchemy_ObtainGuildPointAward = 103845;
  MSG_C2S_Alchemy_ObtainQuestAward = 103846;  // 领取任务奖励
  MSG_S2C_Alchemy_ObtainQuestAward = 103847;
  MSG_S2C_Alchemy_SendRequestNotify = 103848;  // 发送求助请求通知(暂不使用)
  MSG_C2S_Alchemy_GetSimpleInfo = 103849;  // 获取简单信息
  MSG_S2C_Alchemy_GetSimpleInfo = 103850;

  // 1.2.60-广告(103881-103900)
  MSG_S2C_Advertisement_NotifyUpdate = 103881;  // 通知更新广告信息
  MSG_S2C_Advertisement_NotifyDelete = 103882;  // 通知删除广告信息

  // 1.2.60-滚屏公告(103901-103910)
  MSG_C2S_ScrollAnnounce_GetInfo = 103901;  // 滚屏公告
  MSG_S2C_ScrollAnnounce_GetInfo = 103902;
  MSG_S2C_ScrollAnnounce_Update = 103903;  // 滚屏公告更新

  // 1.2.60-自选礼包(103911-103920)
  MSG_C2S_SelectGift_Buy = 103911;  // 非充值礼包购买
  MSG_S2C_SelectGift_Buy = 103912;
  MSG_S2C_SelectGift_NotifyTrigger = 103913;  // 通知触发礼包

  // 1.2.70-个人竞赛(103921-103930)
  MSG_C2S_PersonalComp_GetInfo = 103921;  // 获取信息
  MSG_S2C_PersonalComp_GetInfo = 103922;
  MSG_C2S_PersonalComp_AwardQuest = 103923;  // 任务奖励
  MSG_S2C_PersonalComp_AwardQuest = 103924;
  MSG_C2S_PersonalComp_AwardScore = 103925;  // 积分奖励
  MSG_S2C_PersonalComp_AwardScore = 103926;

  // 1.3.0-公会战役(103951-103990)
  MSG_C2S_GuildGvg_GetInfo = 103951;  // 获取信息
  MSG_S2C_GuildGvg_GetInfo = 103952;
  MSG_C2S_GuildGvg_GuildMatchDetail = 103953;  // 公会战况
  MSG_S2C_GuildGvg_GuildMatchDetail = 103954;
  MSG_C2S_GuildGvg_ChallengeBegin = 103955;  // 挑战开始
  MSG_S2C_GuildGvg_ChallengeBegin = 103956;
  MSG_S2C_GuildGvg_ChallengeFinish = 103957;  // 挑战结束
  MSG_C2S_GuildGvg_Weaken = 103958;  // 削弱
  MSG_S2C_GuildGvg_Weaken = 103959;
  MSG_C2S_GuildGvg_GuildContributeRank = 103960;  // 公会贡献排行
  MSG_S2C_GuildGvg_GuildContributeRank = 103961;
  MSG_C2S_GuildGvg_GetUserDetail = 103962;  // 获取玩家详细信息
  MSG_S2C_GuildGvg_GetUserDetail = 103963;
  MSG_C2S_GuildGvg_GetBattleRecords = 103964;  // 获取战报
  MSG_S2C_GuildGvg_GetBattleRecords = 103965;
  MSG_S2C_GuildGvg_BattleLogNotify = 103966;  // 战绩通知
  MSG_C2S_GuildGvg_BattleLogLike = 103967;  // 战绩点赞
  MSG_S2C_GuildGvg_BattleLogLike = 103968;
  MSG_C2S_GuildGvg_GuildRank = 103969;  // 公会排行
  MSG_S2C_GuildGvg_GuildRank = 103970;
  MSG_C2S_GuildGvg_GetUserBase = 103971;  // 获取玩家基本信息
  MSG_S2C_GuildGvg_GetUserBase = 103972;
  MSG_C2S_GuildGvg_BattleResult = 103973;  // 战斗结果
  MSG_S2C_GuildGvg_BattleResult = 103974;
  MSG_S2C_GuildGvg_BattleDefendNotify = 103975;  // 战斗防守通知
  MSG_C2S_GuildGvg_SetDefendFormation = 103976;  // 设置防守阵容
  MSG_S2C_GuildGvg_SetDefendFormation = 103977;
  MSG_S2C_GuildGvg_GuildScoreNotify = 103978;  // 公会积分通知
  MSG_C2S_GuildGvg_DynamicGuildRank = 103979;  // 公会动态榜单
  MSG_S2C_GuildGvg_DynamicGuildRank = 103980;
  MSG_S2C_GuildGvg_NotifyActivity = 103981;  // 活动通知
  MSG_C2S_GuildGvg_Leave = 103982;  // 离开
  MSG_S2C_GuildGvg_Leave = 103983;
  MSG_C2S_GuildGvg_PreGuildContributeRank = 103984;  // 之前轮次的公会贡献排行
  MSG_S2C_GuildGvg_PreGuildContributeRank = 103985;

  // 1.3.0 - 存钱罐 (103991-104000)
  MSG_C2S_PiggyBank_ObtainAward = 103991;  // 领取奖励
  MSG_S2C_PiggyBank_ObtainAward = 103992;
  MSG_S2C_PiggyBank_NotifyRechargeSuccess = 103993;  // 充值成功通知
  MSG_C2S_PiggyBank_DiamondBuy = 103994;  // 钻石购买
  MSG_S2C_PiggyBank_DiamondBuy = 103995;

  // 1.4.0-宝石棋盘(104001-104020)
  MSG_S2C_FlushGemBoard = 104001;  // 输出宝石棋盘
  MSG_C2S_GemBoard_UnlockGrid = 104002;  // 解锁方块组
  MSG_S2C_GemBoard_UnlockGrid = 104003;
  MSG_C2S_GemBoard_Save = 104004;  // 保存棋盘
  MSG_S2C_GemBoard_Save = 104005;

  // 1.4.0-宝石养成(104021-104030)
  MSG_S2C_FlushGem = 104021;  // 宝石信息
  MSG_C2S_Gem_Compose = 104022;  // 宝石合成
  MSG_S2C_Gem_Compose = 104023;

  // 1.4.0-跨服组队玩法(104101-104250)
  MSG_C2S_CrossTeam_Create = 104101;  // 创建队伍
  MSG_S2C_CrossTeam_Create = 104102;
  MSG_C2S_CrossTeam_Search = 104103;  // 搜索队伍
  MSG_S2C_CrossTeam_Search = 104104;
  MSG_C2S_CrossTeam_Join = 104105;  // 加入队伍
  MSG_S2C_CrossTeam_Join = 104106;
  MSG_S2C_CrossTeam_NotifyJoin = 104107;  // 通知加入队伍
  MSG_C2S_CrossTeam_Quit = 104108;  // 退出队伍
  MSG_S2C_CrossTeam_Quit = 104109;
  MSG_S2C_CrossTeam_NotifyQuit = 104110;  // 通知退出队伍
  MSG_C2S_CrossTeam_Attorn = 104111;  // 转让队长
  MSG_S2C_CrossTeam_Attorn = 104112;
  MSG_S2C_CrossTeam_NotifyAttorn = 104113;  // 通知转让队长
  MSG_C2S_CrossTeam_Kick = 104114;  // 踢出队伍
  MSG_S2C_CrossTeam_Kick = 104115;
  MSG_S2C_CrossTeam_NotifyKick = 104116;  // 通知踢出队伍
  MSG_C2S_CrossTeam_FastJoin = 104117;  // 快速加入队伍
  MSG_S2C_CrossTeam_FastJoin = 104118;
  MSG_C2S_CrossTeam_ModifyBaseInfo = 104119;  // 修改队伍基本信息
  MSG_S2C_CrossTeam_ModifyBaseInfo = 104120;
  MSG_S2C_CrossTeam_NotifyModifyBaseInfo = 104121;  // 通知修改队伍基本信息
  MSG_C2S_CrossTeam_GetInfo = 104122;  // 获取自己队伍信息
  MSG_S2C_CrossTeam_GetInfo = 104123;
  MSG_C2S_CrossTeam_Refresh = 104124;  // 随机队伍列表
  MSG_S2C_CrossTeam_Refresh = 104125;
  MSG_C2S_CrossTeam_Dismiss = 104126;  // 解散队伍
  MSG_S2C_CrossTeam_Dismiss = 104127;
  MSG_S2C_CrossTeam_NotifyDismiss = 104128;  // 通知解散队伍
  MSG_S2C_CrossTeam_NotifyActivity = 104129;  // 通知活动
  MSG_C2S_CrossTeam_Enter_MainRoom = 104130;  // 进入主房间
  MSG_S2C_CrossTeam_Enter_MainRoom = 104131;
  MSG_C2S_CrossTeam_Enter_SubRoom = 104132;  // 进入副房间
  MSG_S2C_CrossTeam_Enter_SubRoom = 104133;
  MSG_C2S_CrossTeam_ChallengeBegin = 104134;  // 发起挑战
  MSG_S2C_CrossTeam_ChallengeBegin = 104135;
  MSG_S2C_CrossTeam_ChallengeFinish = 104136;  // 结束挑战
  MSG_C2S_CrossTeam_DigMine = 104137;  // 挖矿
  MSG_S2C_CrossTeam_DigMine = 104138;
  MSG_S2C_CrossTeam_NotifyForceEnterNextMain = 104139;  // 通知强制进入下一关
  MSG_C2S_CrossTeam_GetRoomChat = 104140;  // 获取组队房间聊天信息
  MSG_S2C_CrossTeam_GetRoomChat = 104141;
  MSG_C2S_CrossTeam_UseItem = 104142;  // 使用道具
  MSG_S2C_CrossTeam_UseItem = 104143;
  MSG_C2S_CrossTeam_SelectEvent = 104144;  // 选择事件
  MSG_S2C_CrossTeam_SelectEvent = 104145;
  MSG_C2S_CrossTeam_TimeBossChallengeBegin = 104146;  // 发起限时 Boss 挑战
  MSG_S2C_CrossTeam_TimeBossChallengeBegin = 104147;
  MSG_S2C_CrossTeam_TimeBossChallengeFinish = 104148;  // 结束挑战
  MSG_C2S_CrossTeam_SelectItems = 104149;  // 选择道具
  MSG_S2C_CrossTeam_SelectItems = 104150;
  MSG_S2C_CrossTeam_NotifyOnline = 104151;  // 通知玩家是否上限
  MSG_S2C_CrossTeam_NotifyTimeBossStart = 104153;  // 通知限时 boss 的开始时间
  MSG_S2C_CrossTeam_NotifyMainRoomMonsterAttacked = 104154;  // 通知住房间怪物被攻击
  MSG_S2C_CrossTeam_NotifyMainRoomMontserKilled = 104155;  // 通知主房间怪物被击杀
  MSG_S2C_CrossTeam_NotifyTimeBossMonsterKilled = 104156;  // 通知限时 boss 怪物被击杀
  MSG_C2S_CrossTeam_OpenTreasureBox = 104157;  // 开宝箱
  MSG_S2C_CrossTeam_OpenTreasureBox = 104158;
  MSG_S2C_CrossTeam_NotifyEnterRoom = 104159;  // 通知进入房间
  MSG_C2S_CrossTeam_GetRankList = 104160;  // 获取排行榜数据
  MSG_S2C_CrossTeam_GetRankList = 104161;
  MSG_S2C_CrossTeam_NotifyObtainRewards = 104162;  // 通知获得奖励
  MSG_S2C_CrossTeam_NotifyMainMonsterFightValue = 104163;  // 通知主房间当前怪物战力
  MSG_S2C_CrossTeam_FlushTeamCrossRedpoint = 104164;  // 刷新组队跨服红点,刷新跨服组队红点

  // 1.3.60 - 神器特权(104251-104260)
  MSG_S2C_Privilege_UpdateNotify = 104031;  // 获取神器特权信息

  // 1.4.0-公会合并(104201-104240)
  MSG_C2S_Guild_SendMergeRequest = 104201;  // 发送合并请求
  MSG_S2C_Guild_SendMergeRequest = 104202;
  MSG_C2S_Guild_HandleMergeRequest = 104203;  // 处理合并请求
  MSG_S2C_Guild_HandleMergeRequest = 104204;
  MSG_C2S_Guild_SetMergeSetting = 104205;  // 设置合并设置
  MSG_S2C_Guild_SetMergeSetting = 104206;
  MSG_C2S_Guild_GetMergeIntentionList = 104207;  // 获取合并意向列表
  MSG_S2C_Guild_GetMergeIntentionList = 104208;
  MSG_C2S_Guild_GetMergeRequestList = 104209;  // 获取合并请求列表
  MSG_S2C_Guild_GetMergeRequestList = 104210;
  MSG_S2C_Guild_NotifyMergeRequest = 104211;  // 通知合并请求
  MSG_S2C_Guild_NotifyMerge = 104212;  // 通知合并

  // 1.3.90-节庆BOSS(104241-104280)
  MSG_C2S_CelebrationBoss_Roll = 104241;  // boss抽卡
  MSG_S2C_CelebrationBoss_Roll = 104242;
  MSG_C2S_CelebrationBoss_GetInfo = 104243;  // 拉取主界面数据
  MSG_S2C_CelebrationBoss_GetInfo = 104244;
  MSG_C2S_CelebrationBoss_GetShare = 104245;  // 拉取他人分享
  MSG_S2C_CelebrationBoss_GetShare = 104246;
  MSG_C2S_CelebrationBoss_Share = 104247;  // 分享
  MSG_S2C_CelebrationBoss_Share = 104248;
  MSG_C2S_CelebrationBoss_ShareAward = 104249;  // 领取分享奖励
  MSG_S2C_CelebrationBoss_ShareAward = 104250;
  MSG_C2S_CelebrationBoss_ChallengeBegin = 104251;  // 发起挑战
  MSG_S2C_CelebrationBoss_ChallengeBegin = 104252;
  MSG_S2C_CelebrationBoss_ChallengeFinish = 104253;  // 结束挑战
  MSG_S2C_CelebrationBoss_HelpKillNtf = 104254;  // 助战击杀通知
  MSG_C2S_CelebrationBoss_RankExtraAward = 104255;  // 领取排行额外奖励
  MSG_S2C_CelebrationBoss_RankExtraAward = 104256;
  MSG_C2S_CelebrationBoss_GetAlive = 104257;  // 获取BOSS是否存活
  MSG_S2C_CelebrationBoss_GetAlive = 104258;

  // 1.3.90-节庆活动(104281-104350)
  MSG_C2S_Celebration_GetInfo = 104281;  // 获取信息
  MSG_S2C_Celebration_GetInfo = 104282;
  MSG_C2S_Celebration_ObtainTreeAward = 104283;  // 领取阶段奖励
  MSG_S2C_Celebration_ObtainTreeAward = 104284;
  MSG_C2S_Celebration_TeamBuy = 104285;  // 团购
  MSG_S2C_Celebration_TeamBuy = 104286;
  MSG_C2S_Celebration_SignIn = 104287;  // 签到
  MSG_S2C_Celebration_SignIn = 104288;
  MSG_C2S_Celebration_SharePrayCard = 104289;  // 分享祈福卡
  MSG_S2C_Celebration_SharePrayCard = 104290;
  MSG_C2S_Celebration_ReceivePrayCard = 104291;  // 领取祈福卡
  MSG_S2C_Celebration_ReceivePrayCard = 104292;
  MSG_C2S_Celebration_SubmitPrayCard = 104293;  // 提交祈福卡
  MSG_S2C_Celebration_SubmitPrayCard = 104294;
  MSG_C2S_Celebration_PrayCardShareState = 104295;  // 祈福卡分享状态
  MSG_S2C_Celebration_PrayCardShareState = 104296;
  MSG_C2S_Celebration_BattlePassAwardQuest = 104297;  // 领取战令任务奖励
  MSG_S2C_Celebration_BattlePassAwardQuest = 104298;
  MSG_C2S_Celebration_BattlePassBuyLv = 104299;  // 购买战令等级
  MSG_S2C_Celebration_BattlePassBuyLv = 104300;
  MSG_S2C_Celebration_BattlePassBuyNtf = 104301;  // 战令购买通知
  MSG_C2S_Celebration_BattlePassAwardLv = 104302;  // 领取战令等级奖励
  MSG_S2C_Celebration_BattlePassAwardLv = 104303;
  MSG_S2C_FlushCelebration = 104306;  // 刷新活动
  MSG_C2S_Celebration_PrayCardGiveLog = 104307;  // 祈福卡赠送日志
  MSG_S2C_Celebration_PrayCardGiveLog = 104308;
  MSG_C2S_Celebration_GetTeamBuyInfo = 104309;  // 获取团购信息
  MSG_S2C_Celebration_GetTeamBuyInfo = 104310;
  MSG_C2S_Celebration_ObtainQuestAward = 104311;  // 领取任务奖励
  MSG_S2C_Celebration_ObtainQuestAward = 104312;

  // 1.4.50-vip功能(104351-104360)
  MSG_C2S_Vip_GetInfo = 104351;  // 获取vip基础信息
  MSG_S2C_Vip_GetInfo = 104352;
  MSG_C2S_Vip_GetAwards = 104353;  // 领奖
  MSG_S2C_Vip_GetAwards = 104354;
  MSG_S2C_Vip_RechargeNotify = 104355;  // 充值成功回调
  MSG_S2C_Vip_UpgradeNotify = 104356;  // 升级推送

  // 1.4.50-转盘活动(104361-104370)
  MSG_C2S_LuckyWheel_GetInfo = 104361;  // 获取信息
  MSG_S2C_LuckyWheel_GetInfo = 104362;
  MSG_C2S_LuckyWheel_Roll = 104363;  // 转盘
  MSG_S2C_LuckyWheel_Roll = 104364;
  MSG_S2C_LuckyWheel_NotifyWheelDiamond = 104365;  // 通知

  // 1.5.0-6v6-推送阵容奖励(104371-104375)
  MSG_C2S_RecommendTeam_GetAward = 104371;  // 领奖
  MSG_S2C_RecommendTeam_GetAward = 104372;

  // 1.5.0 组队boss(104380-104500)
  MSG_C2S_TeamBoss_GetInfo = 104380;  // 获取信息
  MSG_S2C_TeamBoss_GetInfo = 104381;
  MSG_C2S_TeamBoss_CreateTeam = 104382;  // 创建队伍
  MSG_S2C_TeamBoss_CreateTeam = 104383;
  MSG_C2S_TeamBoss_JoinTeam = 104384;  // 加入队伍
  MSG_S2C_TeamBoss_JoinTeam = 104385;
  MSG_S2C_TeamBoss_JoinTeamNotify = 104386;  // 队友通知队长开启战斗
  MSG_C2S_TeamBoss_RemindStart = 104387;  // 队友通知队长开启战斗
  MSG_S2C_TeamBoss_RemindStart = 104388;
  MSG_S2C_TeamBoss_RemindStartNotify = 104389;  // 队友通知队长开启战斗
  MSG_C2S_TeamBoss_ArrangeFormation = 104390;  // 调整站位
  MSG_S2C_TeamBoss_ArrangeFormation = 104391;
  MSG_S2C_TeamBoss_ArrangeFormationNotify = 104392;  // 调整站位
  MSG_C2S_TeamBoss_KickOut = 104393;  // 踢人
  MSG_S2C_TeamBoss_KickOut = 104394;
  MSG_S2C_TeamBoss_KickOutNotify = 104395;  // 踢人通知
  MSG_S2C_TeamBoss_BattleStartNotify = 104396;  // 开启战斗通知协议
  MSG_C2S_TeamBoss_ConfirmBattle = 104397;  // 确认开战
  MSG_S2C_TeamBoss_ConfirmBattle = 104398;
  MSG_S2C_TeamBoss_ConfirmBattleNotify = 104399;  // 确认开战通知
  MSG_C2S_TeamBoss_RefuseBattle = 104400;  // 拒绝开战
  MSG_S2C_TeamBoss_RefuseBattle = 104401;
  MSG_S2C_TeamBoss_RefuseBattleNotify = 104402;  // 拒绝开战
  MSG_C2S_TeamBoss_BattleStart = 104403;  // 开启战斗
  MSG_S2C_TeamBoss_BattleStart = 104404;
  MSG_S2C_TeamBoss_BattleFinish = 104405;  // 开启战斗通知协议
  MSG_C2S_TeamBoss_InviteUserList = 104406;  // 邀请列表
  MSG_S2C_TeamBoss_InviteUserList = 104407;
  MSG_C2S_TeamBoss_InviteUser = 104408;  // 发送邀请
  MSG_S2C_TeamBoss_InviteUser = 104409;
  MSG_S2C_TeamBoss_InviteUserNotify = 104410;  // 发送邀请
  MSG_C2S_TeamBoss_LeaveTeam = 104411;  // 离开队伍
  MSG_S2C_TeamBoss_LeaveTeam = 104412;
  MSG_S2C_TeamBoss_LeaveTeamNotify = 104413;  // 离开队伍
  MSG_C2S_TeamBoss_ObtainAchievementAward = 104414;  // 领取成就奖励
  MSG_S2C_TeamBoss_ObtainAchievementAward = 104415;
  MSG_C2S_TeamBoss_ObtainAchievementLevelAward = 104416;  // 领取成就等级奖励
  MSG_S2C_TeamBoss_ObtainAchievementLevelAward = 104417;
  MSG_C2S_TeamBoss_GetFirstPassRecord = 104418;  // 首通记录
  MSG_S2C_TeamBoss_GetFirstPassRecord = 104419;
  MSG_C2S_TeamBoss_ObtainFirstPassAward = 104420;  // 首通奖励
  MSG_S2C_TeamBoss_ObtainFirstPassAward = 104421;
  MSG_C2S_TeamBoss_ObtainSelfFirstPassAward = 104422;  // 自身首通奖励
  MSG_S2C_TeamBoss_ObtainSelfFirstPassAward = 104423;
  MSG_C2S_TeamBoss_Like = 104424;  // 点赞
  MSG_S2C_TeamBoss_Like = 104425;
}

message Empty_Message {
}

// 同步时间请求
message C2S_SyncTime {
  uint32 client_time = 1;  // 客户端时间
}

// 同步时间响应
message S2C_SyncTime {
  uint32 ret = 1;  // 返回值
  uint32 client_time = 2;  // 客户端时间
  uint32 server_time = 3;  // 服务器时间
  int32 zone = 4;  // 时区
  uint32 open = 5;  // 开服时间
  repeated out_base.InitTimeInfo init_time = 6;  // 与开服时间有关活动初始化时间
}

message S2C_FlushInitTime {
  repeated out_base.InitTimeInfo init_time = 1;  // 与开服时间有关活动初始化时间
}

// 同步响应缓存请求
message C2S_SyncProto {
  uint32 pure_login_time = 1;  // 最后一次非重连登陆时间
  uint64 client_id = 2;  // 客户端当前请求ID
  uint64 server_id = 3;  // 服务器当前响应ID
}

// 同步响应缓存响应
message S2C_SyncProto {
  uint32 ret = 1;  // 返回值
  uint64 client_id = 2;  // 服务器最后回包的客户端请求ID
  uint64 server_id = 3;  // 服务器最后发送的服务器响应ID
}

// 输出信息请求
message C2S_Flush {
  bool all = 1;   // 是否输出全部数据 如果设置为true，后续字段全部忽略
  bool red_point = 2;   // 是否输出红点
  bool server_info = 3;   // 开服信息
  bool token = 4;   // api凭据
  bool user = 5;   // 是否需要输出玩家
  bool resource = 6;   // 是否需要输出资源
  bool item = 7;   // 是否需要输出道具
  bool formation = 8;   // 是否需要输出阵容
  bool character = 9;   // 是否需要输出角色
  bool equip = 10;  // 是否需要输出装备                // 通过 S2C_FlushEquip 消息通知
  bool treasure_box = 11;  // 是否需要宝箱数据         // 通过 S2C_FlushTreasureBox 消息通知
  bool quest_main = 12;  // 是否需要输出主线任务
  bool main_dungeon = 13;  // 是否需要输出主线副本相关数据    // 通过 S2C_FlushMainDungeon 消息通知
  bool hang_up = 14;  // 是否输出挂机数据                     // 通过 S2C_FlushHangUp 消息通知
  bool back = 15;  // 是否输出背饰背包     // 通过 S2C_FlushBack 消息通知
  bool guide = 16;  // 是否需要输出玩家引导相关数据       // 通过 S2C_FlushUserGuide 消息通知
  bool world_boss = 17;  // 是否需要输出世界Boss             // 通过 S2C_FlushUserWorldBoss 消息通知
  bool play_num = 18;  // 是否输出玩法次数                 // 通过 S2C_FlushUserPlayNum 消息通知
  bool share = 19;  // 是否输出玩家分享                 // 通过 S2C_FlushUserShare 消息通知
  bool arena = 20;  // 是否输出竞技场数据               // 通过 S2C_FlushUserArena 消息通知
  bool score_shop = 21;  // 是否输出积分商店数据               // 通过 S2C_FlushScoreShop 消息通知
  bool fragment = 22;  // 是否输出碎片数据               // 通过 S2C_FlushFragment 消息通知
  bool recruit = 23;  // 是否输出卡池数据               // 通过 S2C_FlushRecruit 消息通知
  bool init_time = 24;  // 是否输出开服相关活动时间 // 通过 S2C_FlushInitTime 消息通知
  bool recharge = 25;  // 是否输出充值数据               // 通过 S2C_FlushRecharge 消息通知
  bool friend_system = 26;  // 是否输出好友系统            // 通过 S2C_FlushUserFriendSystem 消息通知
  bool chat = 27;  // 是否输出聊天系统            // 通过 S2C_FlushUserChat 消息通知
  bool infinite_dungeon = 28;  // 是否输出地牢数据 // 通过 S2C_FlushInfiniteDungeon 消息通知
  bool artifact = 29;  // 是否推送神器数据    //通过 S2C_FlushUserArtifact 消息通知
  bool guild_boss = 30;  // 是否输出公会BOSS    //通过 S2C_FlushUserGuildBoss 消息通知
  bool guild = 31;  // 是否输出公会信息   // 通过 S2C_FlushUserGuild 消息通知
  bool battle_pass = 32;  // 是否输出战令   // 通过 S2C_FlushBattlePass 消息通知
  bool casual_game = 33;  // 是否输出小游戏数据 // 通过 S2C_FlushUserCasualGame 消息通知
  bool mow = 34;  // 是否输出割草 // 通过 S2C_FlushUserMow 消息通知
  bool daily_specials = 35;  // 是否输出每日特惠 // 通过 S2C_FlushDailySpecials 消息通知
  bool fund = 36;  // 是否输出基金 // 通过 S2C_FlushUserFund 消息通知
  bool activity_open = 37;  // 是否输出开服活动 // 通过 S2C_FlushActivityOpen 消息通知
  bool first_recharge = 38;  // 是否输出首充 // 通过 S2C_FlushFirstRecharge 消息通知
  bool accumulated_recharge = 39;  // 是否输出首充 // 通过 S2C_FlushAccumulatedRecharge 消息通知
  bool monthly_card = 40;  // 是否输出月卡 // 通过 S2C_FlushMonthlyCard 消息通知
  bool avatar = 41;  // 是否输出头像&头像框 //通过 MSG_S2C_FlushAvatar 消息通知
  bool daily_sign = 42;  // 是否输出每日签到 // 通过 S2C_FlushUserDailySign 消息通知
  bool push_gift = 44;  // 是否输出推送礼包  // 通过 S2C_FlushUserPushGift 消息推送
  bool seven_sign = 46;  // 是否输出七日签到  // 通过 S2C_FlushUserSevenSign 消息通知
  bool seven_act = 47;  // 是否输出七日活动  // 通过 S2C_FlushSevenAct 消息通知
  bool achievement = 49;  // 是否输出成就 // 通过 S2C_FlushAchievement 消息通知
  bool privilege = 51;  // 是否输出特权 // 通过 S2C_FlushUserPrivilege 消息通知
  bool user_back = 53;  // 是否输出背饰    // 通过 S2C_FlushUserBack 消息通知
  bool companion_book = 55;  // 是否输出佣兵图鉴    // 通过 S2C_FlushCompanionBook 消息通知
  bool honor = 56;  // 是否输出头衔    // 通过 S2C_FlushHonor 消息通知
  bool series_gift = 57;  // 是否输出一条龙礼包     // 通过 S2C_FlushUserSeriesGift 消息通知
  bool daily_surprise_benefit = 58;  // 是否输出每日惊喜福利  // 通过 S2C_FlushUserDailySupriseBenefit 消息通知
  bool function_preview = 59;  // 是否输出功能预览    // 通过 S2C_FlushUserFunctionPreview 消息通知
  bool dress = 60;  // 是否输出时装    // 通过 S2C_FlushDress 消息通知
  bool treasury = 61;  // 是否输出宝库        // 通过 S2C_FlushUserTreasury 消息通知
  bool advertise = 62;  // 是否输出广告    // 通过 S2C_FlushAdvertise 消息通知
  bool questionnaire = 63;  // 是否输出问卷    // 通过 S2C_FlushQuestionnaire 消息通知
  bool short_battle_pass = 64;  // 是否输出短期战令    // 通过 S2C_FlushShortBattlePass 消息通知
  bool theme_activity = 65;  // 是否输出主题活动    // 通过 S2C_FlushThemeActivity 消息通知
  bool companion_equipment = 66;  // 是否输出佣兵装备    // 通过 S2C_FlushCompanionEquipment 消息通知
  bool companion_equipment_formation = 67;  // 是否输出佣兵装备阵容    // 通过 S2C_FlushCompanionEquipmentFormation 消息通知
  bool user_action = 68;  // 是否输出行为类计数    // 通过 S2C_FlushUserAction 消息通知
  bool close_function = 69;  // 是否输出GM屏蔽功能    // 通过 S2C_FlushCloseFunction 消息通知
  bool pet = 70;  // 是否输出战宠信息(主界面需要) // 通过  S2C_FlushPet 消息通知
  bool sign_in = 71;  // 是否输出签到数据 // 通过S2C_FlushUserSignIn 消息通知
  bool competition = 72;  // 是否输出新服竞赛
  bool peak_arena_activity = 73;  // 是否输出跨服活动 // 通过 S2C_FlushPeakArenaActivity 消息通知
  bool pack = 74;  // 是否输出通用礼包 // 通过 S2C_FlushPack 消息通知
  bool character_formation_slot = 75;  // 是否输出佣兵阵位养成信息 // 通过 S2C_FlushCharacterFormationSlot 消息通知
  bool un_block = 76;  // 是否输出胚子屏蔽信息 // 通过 S2C_FlushUnBlock 消息通知
  bool goblin = 77;  // 是否输出哥布林数据 // 通过 S2C_FlushGoblin 消息通知
  bool select_gift = 78;  // 是否输出自选礼包  // 通过 S2C_FlushSelectGift 消息推送
  bool alchemy = 79;  // 是否输出炼金工坊活动数据 // 通过 S2C_FlushAlchemy 消息通知
  bool piggy_bank = 80;  // 是否输出存钱罐数据 // 通过 S2C_FlushPiggyBank 消息通知
  bool guild_gvg = 81;  // 是否输出公会战役数据 // 通过 S2C_FlushGuildGvg 消息通知
  bool gem_board = 82;  // 是否输出宝石棋盘数据 // 通过 S2C_FlushGemBoard 消息通知
  bool gem = 83;  // 是否输出宝石信息 // 通过S2C_FlushGem消息通知
  bool celebration = 84;  // 是否输出节庆活动数据 // 通过 S2C_FlushCelebration 消息通知

  // 注意：非主界面核心功能需要单独GetInfo协议，并且红点依赖数据放到out_base.RedPoint中
  // bool world_boss = 17;  //是否需要输出世界Boss             // 通过 S2C_FlushUserWorldBoss 消息通知
  // bool arena = 20;       //是否输出竞技场数据               // 通过 S2C_FlushUserArena 消息通知
  // bool friend_system = 26;    //是否输出好友系统            // 通过 S2C_FlushUserFriendSystem 消息通知
  // bool infinite_dungeon = 28; //是否输出地牢数据 // 通过 S2C_FlushInfiniteDungeon 消息通知
  // bool guild_boss = 30; //是否输出公会BOSS    //通过 S2C_FlushUserGuildBoss 消息通知
  // bool guild = 31;      // 是否输出公会信息   // 通过 S2C_FlushUserGuild 消息通知

  // bool rogue = 45; //是否输出迷宫数据 // 通过 S2C_Rogue_GetInfo 消息推送
  // bool mail = 50; // 是否输出新邮件 // 通过 S2C_Mail_New 消息通知
  // bool tower = 54;     // 是否输出爬塔数据   // 通过 S2C_FlushUserTower 消息通知
  // bool treasury = 61;              // 是否输出宝库        // 通过 S2C_FlushUserTreasury 消息通知
}

// 输出信息响应
message S2C_Flush {
  uint32 ret = 1;  // 返回值
  bool all = 2;  // 返回 all 标记
}

// 输出红点（异步红点数据必须单独节点）
message S2C_FlushRedPoint {
  out_base.RedPoint red_point = 1;
  out_base.SlgCrossRedPoint cross_slg = 2;  // 跨服永恒竞技场红点数据
}

// 输出玩家玩家数据
message S2C_FlushUser {
  out_base.User user = 1;
}

// 输出所有资源
message S2C_FlushResource {
  repeated out_base.Resource resources = 1;
}

// 输出所有道具
message S2C_FlushItem {
  repeated out_base.Item items = 1;
}

// 输出所有碎片
message S2C_FlushFragment {
  repeated base.KV fragments = 1;
}

// 输出所有卡池数据
message S2C_FlushRecruit {
  repeated out_base.RecruitData recruits = 1;
}

// 输出所有装备
message S2C_FlushEquip {
  repeated base.UserEquipment equips = 1;  // 玩家穿戴装备列表
  repeated base.EquipmentData bag = 2;  // 装备临时背包信息
}

// 输出装备数据
message S2C_FlushTreasureBox {
  base.TreasureData treasure_box = 1;  // 宝箱数据
}

// 输出主线副本相关数据
message S2C_FlushMainDungeon {
  base.MainDungeonData main_dungeon = 1;  // 主线副本数据
}

// 输出挂机数据
message S2C_FlushHangUp {
  base.HangUpData hang_up = 1;  // 挂机数据
}

// 输出引导相关数据
message S2C_FlushUserGuide {
  base.GuideData guide = 1;  // 引导相关数据
}

// 输出世界 Boss 相关数据
message S2C_FlushUserWorldBoss {
  out_base.WorldBoss world_boss = 1;
}

// 输出玩法次数数据
message S2C_FlushUserPlayNum {
  repeated base.PlayNumData play_num = 1;  // 各个玩法次数信息
}

message S2C_FlushUserShare {
  repeated base.ShareData shares = 1;
}

message S2C_FlushScoreShop {
  map<uint64, uint32> items = 1;  // 购买记录 key:商品ID value:购买次数 不包括无限制道具
  map<uint32, base.RefreshShop> refresh_shop = 2;  // 刷新商店数据 key:商店类型 value:商店数据
}

message S2C_FlushPack {
  map<uint32, uint32> items = 1;  // 购买记录 key:礼包ID value:购买次数 不包括无限制道具
}

message S2C_FlushUnBlock {
  repeated base.UnBlockInfo un_blocks = 1;  // 胚子屏蔽信息
}

message S2C_FlushUserArena {
  uint32 ret = 1;  // 状态码
  out_base.UserArenaData arena = 2;  // 具体信息
}

message S2C_FlushUserFriendSystem {
  uint32 ret = 1;
  out_base.UserFriendSystem friend_system = 2;
}

message S2C_FlushUserFriendData {
  uint32 index = 1;  // 索引
  uint32 total = 2;  // 总量
  repeated base.SimpleUser users = 3;  // 玩家列表（单条协议最多100个玩家）
}

message S2C_FlushUserChat {
  out_base.UserChat chat = 1;
}

message S2C_FlushFriendChat {
  uint32 index = 1;  // 索引
  uint32 total = 2;  // 总量
  repeated base.PrivateChat friend_chats = 3;  // 好友聊天（单条协议最多50个玩家）
}

message S2C_FlushRecharge {
  map<uint32, out_base.RechargeData> recharges = 1;  // key:充值ID
}

// 输出凭据
message S2C_FlushToken {
  string api_token = 1;  // api凭据
}

message S2C_FlushUserAction {
  uint32 reset_type = 1;  // 重置类型（enums.ACTION_PROGRESS_RESET_TYPE）
  int64 init_time = 2;  // 初始化时间（用于定期重置任务）
  repeated out_base.UserAction user_action = 3;  // 用户行为计数
}

// 输出地牢数据
message S2C_FlushInfiniteDungeon {
  map<uint32, out_base.InfiniteDungeonData> datas = 1;
  out_base.InfiniteDungeonHangUp hang_up = 2;  // 挂机数据
  int64 start_tm = 3;  // 活动开启时间
}

// 操作对象
message S2C_OpObject {
  out_base.User user = 1;   // 玩家
  out_base.OpResource resource = 2;   // 资源
  out_base.OpItem item = 3;   // 道具
  out_base.OpCharacter character = 4;   // 资源
  out_base.OpEquipment equips = 5;   // 装备
  out_base.QuestMain quest_main = 6;   // 主线任务
  repeated base.PlayNumData play_num = 7;   // 玩法次数
  out_base.OpKV fragment = 8;   // 碎片
  repeated uint32 artifact_id = 9;   // 新获得神器
  repeated base.AvatarInfo avatar = 10;  // 新获得的头像
  repeated base.AvatarFrameInfo avatar_frame = 11;  // 新获得的头像框
  repeated uint32 equip_icons = 12;  // 新获得的装备图标
  out_base.OpBack back = 13;  // 背饰
  out_base.OpDress dress = 14;  // 时装
  map<uint32, uint32> advertise_use_num = 15;  // 广告观看次数
  out_base.OpQuestNotify quest_notify = 16;  // 任务通知
  out_base.OpCompanionEquipment companion_equipment = 17;  // 佣兵装备
  out_base.OpCompanionEquipmentFormation companion_equipment_formation = 18;  // 佣兵装备阵型
  map<uint32, out_base.OpUserAction> user_action = 19;  // 用户行为计数（key为重置类型（enums.ACTION_PROGRESS_RESET_TYPE））
  out_base.OpPet pet = 20;  // 战宠
  out_base.OpPetEquipment pet_equipment = 21;  // 战宠装备
  out_base.OpCharacterFormationSlot character_formation_slot = 22;  // 佣兵阵位养成
  out_base.OpGoblinDress goblin_dress = 23;  // 哥布林时装
  out_base.OpGem gem = 24;  // 宝石
}

// 掉落推送
message S2C_GetAwardNotify {
  uint32 tip_type = 1;  // 奖励弹窗类型
  repeated base.RealAward awards = 2;  // 掉落
  repeated base.Award mail_awards = 3;  // 通过邮件发放的奖励
}

// 推送神器
message S2C_FlushUserArtifact {
  base.UserArtifact artifact = 1;  // 玩家神器信息
}

// 输出公会BOSS
message S2C_FlushUserGuildBoss {
  uint32 challenge_cnt = 1;  // 已使用挑战次数
}

message S2C_FlushUserGuild {
  out_base.UserGuild guild = 1;  // 公会
}

message S2C_FlushBattlePass {
  out_base.UserBattlePass battle_pass = 1;  // 玩家战令数据
}

message S2C_FlushUserCasualGame {
  out_base.UserCasualGame casual_game = 1;
}

message S2C_FlushDailySpecials {
  repeated uint32 buy_packs = 1;  // 已购买的礼包列表
  repeated uint32 award_packs = 2;  // 已领取的礼包列表
  map<uint32, int64> continue_buy = 3;  // 连续购买列表 key-id value-结束时间戳，取零点
}

message S2C_FlushUserMow {
  repeated out_base.UserMow mow = 1;
}

message S2C_FlushUserFund {
  repeated out_base.UserFund fund = 1;
  uint32 version = 2;
}

message S2C_FlushActivityOpen {
  repeated out_base.ActivityOpenInfo info_list = 1;  // 开启中的id列表
}

message S2C_FlushFirstRecharge {
  repeated out_base.FirstRechargeGroup groups = 1;
}

message S2C_FlushAccumulatedRecharge {
  uint32 group = 1;  // 累充组id  为0说明首充未开启
  int64 end_tm = 2;  // 结束时间戳 为0永不结束
  uint64 money = 3;  // 累计金额
  repeated uint32 awarded_ids = 4;  // 已领取的奖励
}

message S2C_FlushMonthlyCard {
  map<uint32, out_base.MonthlyCard> monthly_card = 1;
}

message S2C_FlushAvatar {
  uint32 avatar_id = 1;  // 当前设置的头像id
  uint32 frame_id = 2;  // 当前设置的头像框id
  repeated base.AvatarInfo avatars = 3;  // 拥有的头像列表
  repeated base.AvatarFrameInfo frames = 4;  // 拥有的头像框列表
}

message S2C_FlushUserDailySign {
  out_base.UserDailySign daily_sign = 1;
}

message S2C_FlushUserPushGift {
  repeated out_base.PushGiftData push_gifts = 1;
}

message S2C_FlushSelectGift {
  repeated out_base.SelectGift gifts = 1;
}

message S2C_FlushUserSevenSign {
  out_base.UserSevenSign seven_sign = 1;
}

message S2C_FlushSevenAct {
  out_base.UserSevenAct seven_act = 1;
}

message S2C_FlushAchievement {
  repeated out_base.AchievementInfo achievements = 2;  // 成就列表
}
message S2C_FlushUserPrivilege {
  repeated out_base.UserPrivilege privileges = 1;  // 玩家特权
}

message S2C_FlushBack {
  repeated base.Back backs = 1;
}

message S2C_FlushUserBack {
  out_base.UserBack back = 1;
}

message S2C_FlushUserTower {
  out_base.UserTower tower = 1;
}

message S2C_FlushUserSeriesGift {
  repeated out_base.UserSeriesGift series_gift = 1;
}

message S2C_FlushUserDailySurpriseBenefit {
  out_base.UserDailySurpriseBenefit surprise_benefit = 1;
}

message S2C_FlushUserFunctionPreview {
  out_base.UserFunctionPreview function_preview = 1;
}

message S2C_FlushUserTreasury {
  out_base.UserTreasury treasury = 1;  // 宝库
}

message S2C_FlushCompanionBook {
  out_base.UserCompanionBook book = 1;
}

message S2C_FlushHonor {
  out_base.UserHonor honor = 1;
}

message S2C_FlushDress {
  repeated out_base.Dress dress = 1;
}

message S2C_FlushGoblin {
  uint32 wear_dress_id = 1;  // 穿戴的时装id
  repeated out_base.GoblinDress goblin_dresses = 2;  // 已获得的时装
}

message S2C_FlushAdvertise {
  map<uint32, uint32> use_num = 1;  // 观看次数
}

message S2C_FlushQuestionnaire {
  repeated out_base.Questionnaire data = 1;
}

message S2C_FlushShortBattlePass {
  out_base.UserShortBattlePass bp = 1;
  base.SimpleActivityInfo activity = 2;
}

message S2C_FlushThemeActivity {
  out_base.UserThemeActivity theme_activity = 1;
}

message S2C_FlushCompanionEquipment {
  repeated out_base.CompanionEquipment equipments = 1;
}

message S2C_FlushCompanionEquipmentFormation {
  repeated out_base.CompanionEquipmentFormation formations = 1;
}

message S2C_FlushCloseFunction {
  repeated uint32 function_ids = 1;
}

// 输出服务器信息
message S2C_FlushServerInfo {
  out_base.ServerInfo server_info = 1;
}

message S2C_FlushPiggyBank {
  out_base.UserPiggyBank piggy_bank = 1;
}

message C2S_GetRedPointUpdateInfo {
  bool tower = 1;  // 是否需要爬塔红点
  bool rogue = 2;  // 是否需要迷宫红点
}

message S2C_GetRedPointUpdateInfo {
  uint32 ret = 1;
  out_base.TowerRedPointUpdateInfo tower = 2;
  out_base.RogueRedPointUpdateInfo rogue = 3;
}

// 测试op接口
message C2S_Test_OpManager {
}

// 测试op响应
message S2C_Test_OpManager {
  uint32 ret = 1;  // 返回值
}

// 获取通用排行榜
message C2S_CommonRank_GetList {
  uint32 id = 1;  // 排行榜id
  uint32 limit = 2;  // 0-全部拉取 非0-拉取前N个
  uint32 logic_id = 3;  // 0-默认拉取最新的榜 非0-拉取指定logicId的榜
}

// 通用排行榜
message S2C_CommonRank_GetList {
  uint32 ret = 1;
  uint32 id = 2;
  uint32 limit = 3;
  uint32 self_rank = 4;
  repeated out_base.RankUnit rank_units = 5;
  out_base.RankUnit self_unit = 6;
}

// 修改昵称
message C2S_UserInfo_ModifyName {
  string name = 1;  // 新昵称
}

// 修改昵称响应
message S2C_UserInfo_ModifyName {
  uint32 ret = 1;  // 返回值
}

// 使用道具
message C2S_Item_Use {
  uint32 id = 1;  // 道具ID
  uint32 num = 2;  // 使用数量
  uint32 index = 3;  // 可选道具用于选择位置 非可选道具没用 从1开始
  string extra = 4;  // 额外参数，使用代金券要通过它透传充值额外参数，跟正式充值透传的sdk_ex一致。格式如 {"rechargeId":10001}
  bool quiet = 5;  // 是否静默使用，true时不推送MSG_S2C_GetAwardNotify
}

// 使用道具响应
message S2C_Item_Use {
  uint32 ret = 1;  // 返回值
  uint32 id = 2;
  uint32 num = 3;
  uint32 index = 4;
  bool quiet = 5;
  repeated base.Award origin_awards = 6;  // 原始奖励
  repeated base.RealAwards awards = 7;  // 最终奖励
}

message C2S_Diamond_Exchange {
  uint32 num = 1;  // 兑换数量
}

message S2C_Diamond_Exchange {
  uint32 ret = 1;  // 返回错误码
  uint32 num = 2;
}

message C2S_AccountBindAward {
}
message S2C_AccountBindAward {
  uint32 ret = 1;  // 返回值
  repeated base.Award awards = 2;  // 奖励
}

message C2S_CommunityFollowAward {
}
message S2C_CommunityFollowAward {
  uint32 ret = 1;  // 返回值
  repeated base.Award awards = 2;  // 奖励
}

message S2C_CloseFunctionNtf {
  repeated uint32 function_ids = 1;
}

message S2C_UnBlockNtf {
  repeated base.UnBlockInfoOp un_blocks = 1;
}

message C2S_GM_Cmd {
  string cmd = 1;  // 指令content
}

message S2C_GM_Cmd {
  uint32 ret = 1;  // 返回值
}

message S2C_FlushCharacter {
  repeated base.Character characters = 1;
}

message S2C_FlushFormation {
  uint32 type = 1;  // 阵容类型
  base.Formation formation = 2;  // 主阵容
}

message S2C_FlushCharacterFormationSlot {
  repeated out_base.CharacterFormationSlot slots = 1;  // 阵位养成
}

message C2S_Formation_GetTeam {
}

message S2C_Formation_GetTeam {
  uint32 ret = 1;
  repeated out_base.FormationTeam formation_teams = 2;  // 预设编队
}

message C2S_Test_PVEBattleBegin {
}

message S2C_Test_PVEBattleBegin {
  uint32 ret = 1;
  uint64 battle_id = 2;
}

message S2C_Test_PVEBattleFinish {
  uint32 ret = 1;
  base.CheckResult result = 2;
}

message C2S_Test_PVPBattleBegin {
  uint64 uid = 1;
}

message S2C_Test_PVPBattleBegin {
  uint32 ret = 1;
  uint64 battle_id = 2;
}

message S2C_Test_PVPBattleFinish {
  uint32 ret = 1;
  base.CheckResult result = 2;
}

message S2C_Default {
  uint32 Code = 1;
}

message S2C_User_NotifyKickOut {
}

// API account 获取角色信息
message S2C_API_GetRoleList {
  uint32 ret = 1;
  uint32 opgame_id = 2;
  string uuid = 3;
  map<uint64, base.Account> accountInfo = 4;  // key:sid
}

message S2C_API_SearchUser {
  uint32 ret = 1;
  repeated base.SimpleUser list = 2;
}

message S2C_Recharge_Callback {
  uint32 ret = 1;
}

// 0.1.0-开宝箱协议
message C2S_TreasureBox_Open {
}

message S2C_TreasureBox_Open {
  uint32 ret = 1;  // 错误码
  uint64 id = 2;  // 打开获得装备 id
  repeated base.PrivilegeAward privilege_awards = 3;  // 特权奖励
}

message C2S_TreasureBox_SetAutoOpenCondition {
  base.TreasureAutoOpenCondition condition = 1;
}

message S2C_TreasureBox_SetAutoOpenCondition {
  uint32 ret = 1;  // 错误码
  base.TreasureAutoOpenCondition condition = 2;
}

message C2S_TreasureBox_Upgrade {
}

message S2C_TreasureBox_Upgrade {
  uint32 ret = 1;  // 错误码
  uint64 upgrade_cd_time = 2;  // 升级冷却时间
}

message C2S_TreasureBox_ItemUpSpeedTime {
  repeated base.Award use_items = 1;  // 使用道具
}

message S2C_TreasureBox_ItemUpSpeedTime {
  uint32 ret = 1;  // 错误码
  uint32 adv_cnt = 2;  // 观看广告次数
  uint32 adv_time = 3;  // 观看广告时间戳
  uint32 level = 4;  // 等级
  uint32 buy_cnt = 5;  // 购买次数
  uint64 upgrade_cd_time = 6;  // 冷却时间戳,单位秒(0 表示没有冷却时间)
}

message C2S_TreasureBox_AdvertiseUpSpeedTime {
}

message S2C_TreasureBox_AdvertiseUpSpeedTime {
  uint32 ret = 1;  // 错误码
  uint32 adv_cnt = 2;  // 观看广告次数
  uint32 adv_time = 3;  // 观看广告时间戳
  uint32 level = 4;  // 等级
  uint32 buy_cnt = 5;  // 购买次数
  uint64 upgrade_cd_time = 6;  // 冷却时间戳,单位秒(0 表示没有冷却时间)
}

message C2S_TreasureBox_AutoOpen {
}

message S2C_TreasureBox_AutoOpen {
  uint32 ret = 1;  // 错误码
  repeated uint64 equip_ids = 2;  // 本次开箱开到的装备唯一 id 列表
  bool stop = 3;  // 是否找到合适的需要停止
  repeated base.PrivilegeAward privilege_awards = 4;  // 特权奖励
}

message C2S_TreasureBox_BuyUpgradeCnt {
}

message S2C_TreasureBox_BuyUpgradeCnt {
  uint32 ret = 1;  // 错误码
  uint32 buy_cnt = 2;  // 购买升级次数
}

message C2S_TreasureBox_ChestUpgradeFinish {
}

message S2C_TreasureBox_ChestUpgradeFinish {
  uint32 ret = 1;
}

// 0.1.0-装备系统
message C2S_Equipment_Wear {
  uint64 id = 1;  // 装备唯一id
}

message S2C_Equipment_Wear {
  uint32 ret = 1;  // 错误码
  uint64 wear_id = 2;  // 装备唯一 id,穿在玩家身上
  uint64 id = 3;  // 脱下来存在临时背包中的装备唯一 id
}

message C2S_Equipment_Sale {
  repeated uint64 ids = 1;  // 出售装备唯一 id
  bool ignore_performance = 2;
}

message S2C_Equipment_Sale {
  uint32 ret = 1;  // 错误码
  repeated uint64 ids = 2;  // 出售装备唯一 id
  bool ignore_performance = 3;
}

message C2S_Equipment_ManualSale {
  uint64 id = 1;  // 出售装备唯一 id
}

message S2C_Equipment_ManualSale {
  uint32 ret = 1;  // 错误码
  uint64 id = 2;  // 出售装备唯一 id
}

message C2S_Equipment_Illusion {
  repeated uint32 equip_pos = 1;  // 装备位置,位置从 1 开始,12代表背饰
  repeated uint32 icon = 2;  // 图标,由base.EQUIPMENT_ICON_TP 和 id 拼接而成
  bool quiet = 3;  // 是否静默
}

message S2C_Equipment_Illusion {
  uint32 ret = 1;
  repeated uint32 equip_pos = 2;
  repeated uint32 icon = 3;
  bool quiet = 4;
}

//================================== 0.1.0-主线任务(101040-101060) ==================================
// 主线任务 - 获取全部数据响应
message S2C_QuestMain_Flush {
  out_base.QuestMain quest = 1;  // 当前任务
}

// 主线任务 - 领取当前主线任务奖励
message C2S_QuestMain_GetReward {
}

// 主线任务 - 领取当前主线任务奖励响应
message S2C_QuestMain_GetReward {
  uint32 ret = 1;  // 返回错误码
  out_base.QuestMain quest = 2;  // 新接取的主线任务 没接取到则current.id = 0
}

// 0.1.0-主线副本相关协议
message C2S_MainDungeon_ChallengeBegin {
  uint32 id = 1;  // 挑战主线副本 id(这个字段本质上没有啥用)
}

message S2C_MainDungeon_ChallengeBegin {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 主线副本 id
  uint64 battle_id = 3;  // 战斗 id
}

message S2C_MainDungeon_ChallengeFinish {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 主线副本 id
  bool is_win = 3;  // 战斗结果
  repeated base.Award awards = 4;  // 挑战胜利奖励
}

message C2S_MainDungeon_ObtainAward {
  uint32 id = 1;  // 主动领取主线副本阶段奖励
}

message S2C_MainDungeon_ObtainAward {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 主动领取主线副本阶段奖励
  repeated base.Award awards = 3;  // 获得奖励
}

message C2S_MainDungeon_GetStageRecordInfo {
  uint32 id = 1;
}

message S2C_MainDungeon_GetStageRecordInfo {
  uint32 ret = 1;
  uint32 id = 2;
  out_base.CommonFightRecordList records = 3;
}

message C2S_MainDungeon_OnekeyObtainChapterStageRewards {
  uint32 chapter_id = 1;
}

message S2C_MainDungeon_OnekeyObtainChapterStageRewards {
  uint32 ret = 1;
  uint32 chapter_id = 2;
  repeated uint32 obtain_ids = 3;  // 领取的 id
  repeated base.Award rewards = 4;  // 领取的奖励
}

message C2S_MainDungeon_ObtainChapterRewards {
  repeated uint32 obtain_chapter_reward_ids = 1;  // 领取奖励额 id 列表
}

message S2C_MainDungeon_ObtainChapterRewards {
  uint32 ret = 1;
  repeated uint32 obtain_chapter_reward_ids = 2;  // 当前领取的最大关卡 id
  repeated base.Award rewards = 3;  // 领取的奖励
}

message C2S_MainDungeon_SweepLastLevel {
}

message S2C_MainDungeon_SweepLastLevel {
  uint32 ret = 1;
}

// 0.1.0-挂机奖励
message C2S_HangUp_ObtainAwards {
  uint32 award_type = 1;  // 挂机类型,0:正常时间挂机奖励;1:免费加速时间挂机奖励
  bool adv = 2;  // 是否广告
}

message S2C_HangUp_ObtainAwards {
  uint32 ret = 1;  // 返回错误码
  uint32 award_type = 2;  // 挂机类型
  base.HangUpData hang_up = 3;  // 返回新的挂机信息
  repeated base.Award awards = 4;  // 获得奖励
  bool adv = 5;
}

message C2S_HangUp_UseItemObtainAwards {
  base.Award use_item = 1;  // 使用道具
}

message S2C_HangUp_UseItemObtainAwards {
  uint32 ret = 1;
  base.Award use_item = 2;
  base.HangUpData hang_up = 3;  // 返回新的挂机信息
  repeated base.Award awards = 4;  // 获得奖励
}

message C2S_SkillTree_Upgrade {
  uint32 id = 1;  // 目标id
}

message S2C_SkillTree_Upgrade {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 目标id
}

message C2S_MainCharacter_Switch {
  uint32 base_id = 1;  // 目标主角BaseId
}

message S2C_MainCharacter_Switch {
  uint32 ret = 1;  // 返回错误码
  uint32 base_id = 2;  // 目标主角BaseId
}

// 玩家引导
message C2S_Guide_BattleRecord {
  uint32 id = 1;  // 新手引导战斗记录 id
}

message S2C_Guide_BattleRecord {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 新手引导战斗记录 id
}

message C2S_Guide_SaveRecord {
  uint32 type = 1;  // 记录类型
  uint32 id = 2;  // 记录值
}

message S2C_Guide_SaveRecord {
  uint32 ret = 1;  // 返回错误码
  uint32 type = 2;  // 记录类型
  uint32 id = 3;  // 记录值
}

// 世界Boss
message C2S_WorldBoss_RespawnBoss {
  uint32 id = 1;  // boss 副本id
}

message S2C_WorldBoss_RespawnBoss {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // boss 副本id
  uint64 respawn_cnt = 3;  // 已使用的复活次数
}

message C2S_WorldBoss_ChallengeBegin {
  uint32 id = 1;  // 世界Boss副本 id
}

message S2C_WorldBoss_ChallengeBegin {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 世界Boss副本 id
  uint64 battle_id = 3;  // 战斗 id
}

message S2C_WorldBoss_ChallengeFinish {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 世界Boss副本 id
  bool is_win = 3;  // 战斗结果
  repeated base.Award awards = 4;  // 挑战胜利奖励
  int64 respawn_time = 5;
}

// 玩法次数
message C2S_PlayNum_BuyCnt {
  uint32 id = 1;  // 玩法类型 id
  uint32 cnt = 2;  // 购买次数
  uint32 buy_price = 3;  // 预扣款价格(前端计算)
}

message S2C_PlayNum_BuyCnt {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 玩法类型 id
  uint32 cnt = 3;  // 购买次数
  uint32 buy_price = 4;  // 预扣款价格(前端计算)
}

message C2S_Log_OpenPanel {
  uint32 panel_type = 1;  // 打开面板类型(23:表示打开技能面板,26:打开幻化装备界面)
  string params = 2;  // 功能面板的子参数，如果有多级参数使用','分割，埋点时间间隔是 1 分钟
}

message S2C_Log_OpenPanel {
  uint32 ret = 1;  // 返货错误码
  uint32 panel_type = 2;  // 打开面板类型
}

message C2S_Formation_Upgrade {
  uint32 slot = 1;  // 升级 slot id,当前版本只能取2和3
}

message S2C_Formation_Upgrade {
  uint32 ret = 1;  // 返回的错误码
  uint32 slot = 2;  // 升级的阵位类型
}

// message C2S_Formation_Exchange {
//   uint32 type = 1;            // 阵位类型，读enums.FORMATION_TYPE
//   uint64 character_id = 2;    // 角色 id
//   uint32 slot = 3;            // 交换 slot id,当前版本只能取2和3
//   bool adjust = 4; // 上阵后是否需要调整到默认位置
// }
//
// message S2C_Formation_Exchange {
//   uint32 ret = 1;                          // 返回的错误码
//   uint32 type = 2;                         // 阵位类型
//   uint64 character_id = 3;                 // 角色 id
//   uint32 slot = 4;                         // 交换 slot id,当前版本只能取2和3
//   uint64 fight_value = 6;
// }

message C2S_CharacterCompanion_UpgradeQuality {
  repeated out_base.CharacterCompanionUpgradeQuality upgrade_group = 1;  // 升级组
  bool quick = 2;  // 是否快捷飞升
}

message S2C_CharacterCompanion_UpgradeQuality {
  uint32 ret = 1;
  repeated out_base.CharacterCompanionUpgradeQuality succ_group = 2;  // 升级成功组
  repeated out_base.CharacterCompanionUpgradeQuality fail_group = 3;  // 升级失败组
  bool quick = 4;  // 是否快捷飞升
}

// 获取邮件
message C2S_Mail_Info {
}

message S2C_Mail_Info {
  uint32 ret = 1;
  repeated out_base.Mail mails = 2;  // 邮件内容
  uint32 index = 3;  // 分页标记
  uint32 total = 4;  // 邮件总页数
  uint32 un_read = 5;  // 未读邮件数量
}

// 领取邮件奖励
message C2S_Mail_Award {
  repeated uint64 ids = 1;  // 邮件id列表
}

message S2C_Mail_Award {
  uint32 ret = 1;
  repeated uint64 ids = 2;  // 邮件id列表
  repeated uint64 fail_ids = 4;  // 领取失败的邮件id列表
  repeated base.Award awards = 5;  // 获得奖励
  uint32 un_read = 6;  // 未读邮件数量
}

// 删除邮件
message C2S_Mail_Del {
  repeated uint64 ids = 1;  // 邮件id列表
}

message S2C_Mail_Del {
  uint32 ret = 1;
  repeated uint64 ids = 2;  // 邮件id列表
  uint32 un_read = 3;  // 未读邮件数量
}

// 阅读邮件
message C2S_Mail_Read {
  repeated uint64 ids = 2;  // 邮件id列表
}

message S2C_Mail_Read {
  uint32 ret = 1;
  repeated uint64 ids = 2;  // 邮件id列表
  repeated uint64 fail_ids = 4;  // 阅读失败的邮件id列表
  uint32 un_read = 5;  // 未读邮件数量
}

message S2C_Mail_New {
  uint32 un_read = 1;  // 未读邮件数量
}

message C2S_Share_Award {
  uint32 play_id = 1;  // 分享类型 id
}

message S2C_Share_Award {
  uint32 ret = 1;
  uint32 play_id = 2;
  uint32 share_cnt = 3;  // 当前类型分享次数
  int64 share_time = 4;  // 分享时间
}

// 0.2.0-竞技场
message C2S_Arena_MatchOpponent {
  bool adv = 1;  // 是否广告
}

message S2C_Arena_MatchOpponent {
  uint32 ret = 1;  // 返回错误码
  out_base.UserArenaData arena = 2;
  bool adv = 3;
}

message C2S_Arena_Like {
  uint64 uid = 1;
}

message S2C_Arena_Like {
  uint32 ret = 1;  // 错误码
  uint64 uid = 2;  // 被点赞玩家 id
  repeated uint64 like_uids = 3;  // 已点赞玩家列表
  uint32 oppenent_likes = 4;  // 被点赞玩家当前收到的点赞数目
}

message C2S_Arena_ChallengeBegin {
  uint64 uid = 1;  // 挑战玩家 uid
  uint32 battle_reason = 2;  // 挑战原因,0:表示正常挑战匹配到的玩家,1:表示复仇挑战玩家
  uint32 id = 3;  // 复仇需要传唯一 id
}

message S2C_Arena_ChallengeBegin {
  uint32 ret = 1;  // 返回错误码
  uint64 uid = 2;  // 挑战玩家 uid
  uint64 battle_id = 3;  // 战斗 id
}

message S2C_Arena_ChallengeFinish {
  uint32 ret = 1;  // 返回错误码
  uint64 uid = 2;  // 挑战玩家 uid
  bool is_win = 3;  // 战斗结果
  uint32 rank = 4;  // 当前排名
  uint32 self_score = 5;  // 自己积分变动
  uint32 opponent_score = 6;  // 对面积分变动
  repeated base.Award awards = 7;  // 奖励
}

message C2S_Arena_Enter {
}

message S2C_Arena_Enter {
  uint32 ret = 1;  // 返回值
}

// 先暂时不分页优化,需要客户端的配合，等后面客户端有时间了再考虑优化问题
message C2S_Arena_GetScoreRank {
}

message S2C_Arena_GetScoreRank {
  uint32 ret = 1;  // 返回错误码
  out_base.UserArenaRankData self = 2;  // 自己相关信息
  repeated out_base.UserArenaRankData data = 3;  // 排行榜数据
}

message C2S_Arena_GetBattleRecord {
  uint32 record_type = 1;  // 0:表示获取进攻记录,1:表示获取防守记录
}

message S2C_Arena_GetBattleRecord {
  uint32 ret = 1;  // 返回错误码
  uint32 record_type = 2;  // 记录类型
  repeated out_base.UserArenaBattleRecord records = 3;  // 战斗记录
}

message C2S_Arena_GetTaskAward {
  uint32 id = 1;  // 领取奖励的 id
}

message S2C_Arena_GetTaskAward {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // id
}

message C2S_Arena_OneKeyGetTaskAward {
}

message S2C_Arena_OneKeyGetTaskAward {
  uint32 ret = 1;  // 状态码
  repeated uint32 obtain_awards = 2;  // 一键领奖记录
}

message C2S_Arena_SetDefendFormation {
  bool manual = 1;  // true-手动布阵 false-自动布阵
}

message S2C_Arena_SetDefendFormation {
  uint32 ret = 1;
  bool manual = 2;
}

message S2C_Arena_NotifyAttacked {
  uint32 id = 1;
}

message C2S_ScoreShop_Buy {
  uint64 id = 1;  // 商品ID和num的合并字段
  uint32 cnt = 2;  // 购买次数
}

message S2C_ScoreShop_Buy {
  uint32 ret = 1;
  uint64 id = 2;
  uint32 cnt = 3;
}

message C2S_ScoreShop_GetRefreshShop {
  uint32 shop_type = 1;  // 商店类型
}

message S2C_ScoreShop_GetRefreshShop {
  uint32 ret = 1;
  uint32 shop_type = 2;
  base.RefreshShop refresh_shop = 3;
}

// 0.2.0-佣兵抽卡
message C2S_Recruit_Roll {
  uint32 recruit_id = 1;  // 卡池ID
  uint32 tp = 2;  // 0-单抽 1-十连
  bool free = 3;  // 本次单抽是否免费
  uint32 recruit_tp = 4;  // 卡池类型 读enums.RECRUIT_POOL_TYPE
  bool adv = 5;  // 是否广告
}

message S2C_Recruit_Roll {
  uint32 ret = 1;
  uint32 recruit_id = 2;
  uint32 tp = 3;
  bool free = 4;
  uint32 recruit_tp = 5;
  repeated base.Award origin_awards = 6;   // 原始奖励
  repeated base.RealAwards awards = 7;   // 最终奖励
  uint32 free_num_cd = 8;   // 免费次数倒计时
  uint32 total_num = 9;   // 总抽取次数
  uint32 daily_num = 10;  // 今日抽取次数
  bool adv = 11;
}

message C2S_Recruit_AwardExtra {
  uint32 recruit_id = 1;  // 卡池ID
  uint32 num = 2;  // 领取次数
  uint32 recruit_tp = 3;  // 卡池类型 读enums.RECRUIT_POOL_TYPE
}

message S2C_Recruit_AwardExtra {
  uint32 ret = 1;
  uint32 recruit_id = 2;
  uint32 num = 3;
  uint32 recruit_tp = 4;
  base.Award origin_awards = 5;  // 原始奖励
  repeated base.RealAward awards = 6;  // 最终奖励
}

// 0.2.0-碎片
message C2S_Fragment_Compose {
  uint32 id = 1;  // 碎片ID
  uint32 num = 2;  // 碎片数量
  uint32 compose_num = 3;  // 合成数量，支持批量合成
  repeated base.Award replace = 4;  // 碎片不足时的替代品，如佣兵万能碎片
  bool quiet = 5;  // 是否静默使用，true时不推送MSG_S2C_GetAwardNotify
}

message S2C_Fragment_Compose {
  uint32 ret = 1;
  uint32 id = 2;
  uint32 num = 3;
  uint32 compose_num = 4;
  repeated base.Award replace = 5;
  bool quiet = 6;
  repeated base.RealAward award = 7;  // 合成结果
}

message C2S_UserInfo_GetDetail {
  repeated uint64 uids = 1;  // 需要拉取的 uids 列表,目前最多一次性拉取5个
  uint32 tp = 2;  // 0-默认 1-竞技场 2-公会战役
}

message S2C_UserInfo_GetDetail {
  uint32 ret = 1;
  repeated out_base.UserDetail users = 2;  // 玩家详细信息
  uint32 tp = 3;
}

message C2S_UserInfo_GetSnapshot {
  repeated uint64 uids = 1;  // 需要拉取的 uids 列表,目前最多一次性拉取30个
}

message S2C_UserInfo_GetSnapshot {
  uint32 ret = 1;
  repeated base.UserSnapshot users = 2;  // 玩家快照信息
}

message C2S_GetServerMergeInfo {
}

message S2C_GetServerMergeInfo {
  uint32 ret = 1;
  repeated out_base.ServerInfo servers = 2;
}

message C2S_GetServerMergeAward {
}

message S2C_GetServerMergeAward {
  uint32 ret = 1;
  repeated base.Award awards = 2;
}

message C2S_GetRechargeParams {
  uint32 id = 1;  // 充值id
  string currency = 2;  // 货币类型
}

message S2C_GetRechargeParams {
  uint32 ret = 1;
  out_base.RechargeParams params = 2;
}

// 防沉迷通知
message S2C_AdultCheck_Warning {
  uint32 game_time = 1;
  uint32 is_fcm = 2;
  uint32 is_adult = 3;
  uint32 is_warning = 4;
  uint32 remaining_time = 5;
  uint32 fcm_status = 6;
}

message C2S_Formation_Save {
  uint32 type = 1;  // 阵位类型，读enums.FORMATION_TYPE
  base.Formation formation = 2;  // 阵容
}

message S2C_Formation_Save {
  uint32 ret = 1;
  uint32 type = 2;
  base.Formation formation = 3;
}

message C2S_Formation_SaveTeam {
  uint32 id = 1;  // 编队ID,从1开始
  base.Formation formation = 2;  // 编队阵容
  string name = 3;  // 编队名
}

message S2C_Formation_SaveTeam {
  uint32 ret = 1;
  out_base.FormationTeam team = 2;
}

// message C2S_Formation_RecoveryBattleTeam {
//   uint32 type = 1;            // 阵位类型，读enums.FORMATION_TYPE
//   uint32 src_type = 2; //从源阵位类型中恢复
//   uint32 team_idx = 3;    // 队伍索引,从1开始
// }
//
// message S2C_Formation_RecoveryBattleTeam {
//   uint32 ret = 1;
//   uint32 type = 2;
//   uint32 src_type = 3;
//   uint32 team_idx = 4;
//   //repeated out_base.FormationSlot character_slot = 5;
//   repeated uint32 battle_formation = 6;
//   uint64 fight_value = 7;
// }

message C2S_Formation_RenameTeam {
  uint32 id = 1;  // 编队ID,从1开始
  string name = 2;  // 修改名
}

message S2C_Formation_RenameTeam {
  uint32 ret = 1;
  uint32 id = 2;
  string name = 3;
}

message C2S_Formation_Get {
  uint32 type = 1;  // 阵位类型，读enums.FORMATION_TYPE
}

message S2C_Formation_Get {
  uint32 ret = 1;
  uint32 type = 2;
  base.Formation formation = 3;
}

message C2S_InfiniteDungeon_ChallengeBegin {
  uint32 id = 1;  // 地牢ID
  uint32 stage = 2;  // 关卡ID
}

message S2C_InfiniteDungeon_ChallengeBegin {
  uint32 ret = 1;
  uint32 id = 2;
  uint32 stage = 3;
  uint64 battle_id = 4;
}

message S2C_InfiniteDungeon_ChallengeFinish {
  uint32 ret = 1;
  uint32 id = 2;  // 地牢ID
  uint32 stage = 3;  // 关卡ID
  bool is_win = 4;  // 战斗结果
  repeated base.Award awards = 5;  // 阶段奖励+挑战胜利奖励
}

message C2S_InfiniteDungeon_GetStageRecordInfo {
  uint32 id = 1;  // 地牢ID
  uint32 stage = 2;  // 关卡ID
}

message S2C_InfiniteDungeon_GetStageRecordInfo {
  uint32 ret = 1;
  uint32 id = 2;
  uint32 stage = 3;
  out_base.CommonFightRecordList records = 4;
}

message C2S_InfiniteDungeon_AwardHangup {
  uint32 tp = 1;  // 领奖类型，读enums.INFINITE_DUNGEON_HANGUP_AWARD_TP
}
message S2C_InfiniteDungeon_AwardHangup {
  uint32 ret = 1;
  uint32 tp = 2;
  repeated base.Award awards = 3;
  out_base.InfiniteDungeonHangUp hang_up = 4;
}

message C2S_InfiniteDungeon_StartHangup {}
message S2C_InfiniteDungeon_StartHangup {
  uint32 ret = 1;
  out_base.InfiniteDungeonHangUp hang_up = 2;
}

// 0.3.0-好友系统
message C2S_Friend_Apply {
  uint64 uid = 1;
}

message S2C_Friend_Apply {
  uint32 ret = 1;
  uint64 uid = 2;
}

message C2S_Friend_Ack {
  uint64 uid = 1;
  bool agree = 2;  // 是否同意
}

message S2C_Friend_Ack {
  uint32 ret = 1;
  uint64 uid = 2;
  bool agree = 3;
}

message C2S_Friend_Search {
  string name = 1;
}

message S2C_Friend_Search {
  uint32 ret = 1;
  base.SimpleUser user = 2;
}

message C2S_Friend_Recommend {
}

message S2C_Friend_Recommend {
  uint32 ret = 1;
  repeated base.SimpleUser user = 2;
}

message C2S_Friend_DelFriend {
  uint64 uid = 2;
}

message S2C_Friend_DelFriend {
  uint32 ret = 1;
  uint64 uid = 2;
}

message C2S_Friend_AddBlack {
  uint64 uid = 1;
}

message S2C_Friend_AddBlack {
  uint32 ret = 1;
  uint64 uid = 2;
}

message C2S_Friend_DelBlack {
  uint64 uid = 1;
}

message S2C_Friend_DelBlack {
  uint32 ret = 1;
  uint64 uid = 2;
}

message C2S_Friend_GiveGift {
  uint64 uid = 1;
}

message S2C_Friend_GiveGift {
  uint32 ret = 1;
  uint64 uid = 2;
}

message C2S_Friend_AcceptGift {
  uint64 uid = 1;
}

message S2C_Friend_AcceptGift {
  uint32 ret = 1;
  uint64 uid = 2;
}

message S2C_Friend_NotifyApply {
  base.SimpleUser user = 1;
}

message S2C_Friend_NotifyAck {
  base.SimpleUser user = 1;
  bool agree = 2;
}

message S2C_Friend_NotifyDelFriend {
  uint64 uid = 1;
}

message S2C_Friend_NotifyGiveGift {
  base.SimpleUser user = 1;
}

message S2C_Friend_NotifyAddBlack {
  uint64 uid = 1;
}

message C2S_Friend_BatchApply {
  repeated uint64 uids = 1;
}

message S2C_Friend_BatchApply {
  uint32 ret = 1;
  repeated uint64 uids = 2;
}

message C2S_Friend_BatchGiveGift {
  repeated uint64 uids = 1;
}

message S2C_Friend_BatchGiveGift {
  uint32 ret = 1;
  repeated uint64 uids = 2;
}

message C2S_Friend_BatchAcceptGift {
  repeated uint64 uids = 1;
}

message S2C_Friend_BatchAcceptGift {
  uint32 ret = 1;
  repeated uint64 uids = 2;
}

message C2S_Friend_BatchAck {
  repeated uint64 uids = 1;
  bool agree = 2;
}

message S2C_Friend_BatchAck {
  uint32 ret = 1;
  repeated uint64 uids = 2;
  bool agree = 3;
}

message C2S_Chat_Content {
  out_base.Chat chat = 1;  // 聊天内容结构
}

message S2C_Chat_Content {
  uint32 ret = 1;
  uint32 chat_type = 2;
  uint64 target_id = 3;
}

message S2C_Chat_Notify_Content {
  base.NotifyChat notify_chat = 1;  // 转发聊天消息内容
}

message S2C_Chat_Notify_System {
  base.NotifySystem notify = 1;  // 系统消息
}

message C2S_Chat_SetForbidPrivate {
  bool forbid = 1;
}

message S2C_Chat_SetForbidPrivate {
  uint32 ret = 1;
  bool forbid = 2;
}

message C2S_Chat_GetForbidPrivate {
  uint64 uid = 1;  // 查询玩家 id
}

message S2C_Chat_GetForbidPrivate {
  uint32 ret = 1;  // 返回错误码
  uint64 uid = 2;  // 查询玩家 id
  bool forbid = 3;  // 是否禁止
}

message S2C_Chat_Notify_GuildSystem {
  uint32 msg_id = 1;  // 公会系统 id
  repeated out_base.GuildEventLogUser users = 2;  // 玩家列表
  repeated string args = 3;  // 参数列表
  int64 timestamp = 4;  // 时间戳
}

message S2C_Recharge_NotifySuccess {
  uint32 id = 1;  // 充值ID
  string order_id = 2;  // 订单ID
  bool first = 3;  // 是否首充
  repeated base.Award awards = 4;  // rechargeInfo奖励
  uint32 param1 = 5;  // 前端透传参数
  repeated base.Award module_awards = 6;  // 模块奖励
  uint64 param2 = 7;  // 前端透传参数
}

// 神器升级
message C2S_Artifact_UpLevel {
  uint32 id = 1;  // 神器id
  uint32 level = 2;  // 目标等级
}

message S2C_Artifact_UpLevel {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 神器id
  uint32 level = 3;  // 目标等级
  bool is_free_upgrade = 4;  // 下一级是否免费
}

// 神器升星
message C2S_Artifact_UpStar {
  uint32 id = 1;  // 神器id
}

message S2C_Artifact_UpStar {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 神器id
  uint32 next_id = 3;  // 目标星级神器id
}

// 神器缘分激活
message C2S_Artifact_Compose_Active {
  uint32 id = 1;  // 神器缘分id
}

message S2C_Artifact_Compose_Active {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 神器缘分id
}

// 神器缘分升级
message C2S_Artifact_Compose_UpLevel {
  uint32 id = 1;  // 神器缘分id
}

message S2C_Artifact_Compose_UpLevel {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 神器缘分id
  uint32 next_id = 3;  // 目标神器缘分id
}

// 神器缘分激活/升级-一键
message C2S_Artifact_Compose_ActiveAndUpLevel {
  repeated uint32 ids = 1;  // 目标神器缘分id
}

message S2C_Artifact_Compose_ActiveAndUpLevel {
  uint32 ret = 1;  // 返回错误码
  repeated uint32 ids = 2;  // 目标神器缘分id
}

// 神器上阵
// 规则1：id不在阵，pos非0，表示上阵(包括替换)
// 规则2：id在阵，pos为0，表示下阵
// 规则3：id在阵，pos非0且无神器，表示移动到空阵位
// 规则4：id在阵，pos非0且有神器，表示阵位上互换
message C2S_Artifact_Equip {
  uint32 id = 1;  // 神器id
  uint32 pos = 2;  // 上阵的阵位位置（有效位置1-4，0表示下阵）
}

message S2C_Artifact_Equip {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 神器id
  uint32 pos = 3;  // 上阵的阵位位置（有效位置1-4，0表示下阵）
  repeated uint32 equip_artifact_ids = 4;  // 更新后上阵的神器id
}

// 神器上阵-一键
message C2S_Artifact_Equip_OneKey {
  repeated uint32 ids = 1;  // 上阵的神器id列表（对应位置1-4，0表示下阵）
}

message S2C_Artifact_Equip_OneKey {
  uint32 ret = 1;  // 返回错误码
  repeated uint32 ids = 2;  // 上阵的神器id列表（对应位置1-4，0表示下阵）
  repeated uint32 equip_artifact_ids = 4;  // 更新后上阵的神器id
}

message C2S_GuildBoss_ChallengeBegin {
  uint32 boss_id = 1;  // bossId
}

message S2C_GuildBoss_ChallengeBegin {
  uint32 ret = 1;
  uint32 boss_id = 2;
  uint64 battle_id = 3;
}

message S2C_GuildBoss_ChallengeFinish {
  uint32 ret = 1;
  uint32 boss_id = 2;  // bossId
  bool is_win = 3;  // 战斗结果
  repeated base.Award awards = 4;  // 挑战胜利奖励
  uint32 challenge_cnt = 5;  // 已使用挑战次数
  uint32 guild_boss_stage_level = 6;  // 公会BOSS阶段等级
  uint32 guild_boss_stage_progress = 7;  // 阶段进度
  uint32 guild_boss_stage_progress_max = 8;  // 当前阶段进度最大值
}

message C2S_GuildBoss_GetRank {
  uint32 boss_id = 1;  // bossId
  uint32 limit = 2;  // 0-全部拉取 非0-拉取前N个
}

message S2C_GuildBoss_GetRank {
  uint32 ret = 1;
  uint32 boss_id = 2;
  uint32 limit = 3;
  uint32 self_rank = 4;
  repeated out_base.RankUnit rank_units = 5;
}

// 获取迷宫信息
message C2S_Rogue_GetInfo {
}

message S2C_Rogue_GetInfo {
  uint32 ret = 1;
  out_base.Rogue info = 2;
}

// 选择地图难度
message C2S_Rogue_SelectDifficulty {
  uint32 type = 1;  // 地图类型
  uint32 difficulty = 2;  // 难度
  repeated uint64 character_ids = 3;  // 佣兵id
}

message S2C_Rogue_SelectDifficulty {
  uint32 ret = 1;
  uint32 type = 2;
  uint32 difficulty = 3;
  out_base.RogueInner inner = 4;
}

// 选择佣兵
message C2S_Rogue_SelectCharacter {
  repeated uint64 character_ids = 1;  // 佣兵id
}

message S2C_Rogue_SelectCharacter {
  uint32 ret = 1;
  repeated uint64 character_ids = 2;
}

// 进入格子
message C2S_Rogue_EnterGrid {
  uint32 layer = 1;  // 层ID
  uint32 grid_id = 2;  // 格子ID
}

message S2C_Rogue_EnterGrid {
  uint32 ret = 1;
}

message C2S_Rogue_ChallengeBegin {
}

message S2C_Rogue_ChallengeBegin {
  uint32 ret = 1;
  uint64 battle_id = 2;
}

message S2C_Rogue_ChallengeFinish {
  uint32 ret = 1;
  base.BattleResult result = 2;
  repeated base.Award awards = 3;
  uint32 id = 4;  // 迷宫ID
}

// 宝箱/掉落/温泉/事件
message C2S_Rogue_Try {
  uint32 option = 1;  // 选项（宝箱：0表示放弃，不可选宝箱传1）
  uint32 grid_id = 2;  // 格子ID
}

message S2C_Rogue_Try {
  uint32 ret = 1;
  uint32 option = 2;
  uint32 grid_id = 3;
  repeated base.Award awards = 4;  // 宝箱掉落为空时特殊逻辑
}

message C2S_Rogue_UseItem {
  uint32 item_id = 1;  // 道具ID
}

message S2C_Rogue_UseItem {
  uint32 ret = 1;
  uint32 item_id = 2;
}

message C2S_Rogue_SelectAward {
  repeated uint32 indexs = 1;  // 奖励索引
  uint32 type = 2;  // （1:战斗/2:事件/3:温泉/4:机制）
  bool give_up = 3;  // 是否放弃
}

message S2C_Rogue_SelectAward {
  uint32 ret = 1;
  repeated uint32 indexs = 2;
  repeated base.Award awards = 3;
  uint32 type = 4;
  bool give_up = 5;
}

message C2S_Rogue_FlushShop {
}

message S2C_Rogue_FlushShop {
  uint32 ret = 1;
}

message C2S_Rogue_BuyShop {
  uint32 goods_id = 1;  // 商品ID
}

message S2C_Rogue_BuyShop {
  uint32 ret = 1;
  uint32 goods_id = 2;
}

message C2S_Rogue_Recruit {
}

message S2C_Rogue_Recruit {
  uint32 ret = 1;
}

message C2S_Rogue_Wish {
  repeated uint32 ids = 1;  // 佣兵AdvanceId
}

message S2C_Rogue_Wish {
  uint32 ret = 1;
  repeated uint32 ids = 2;
}

message C2S_Rogue_RecruitSelect {
  uint32 option = 1;  // 佣兵选项
}

message S2C_Rogue_RecruitSelect {
  uint32 ret = 1;
  uint32 option = 2;
}

message C2S_Rogue_UseDevice {
  uint32 type = 1;  // 装置类型（1:复活装置/2:交换装置(0位置为新增佣兵，1位置为删除佣兵)）
  repeated uint64 characters = 2;  // 佣兵ID列表
}

message S2C_Rogue_UseDevice {
  uint32 ret = 1;
  uint32 type = 2;
  repeated uint64 characters = 3;
}

message C2S_Rogue_ActiveTree {
  uint32 id = 1;  // 节点ID
}

message S2C_Rogue_ActiveTree {
  uint32 ret = 1;
  uint32 id = 2;
}

message C2S_Rogue_TaskAward {
  repeated uint32 ids = 1;  // 任务ID
}

message S2C_Rogue_TaskAward {
  uint32 ret = 1;
  repeated uint32 ids = 2;
  repeated base.Award awards = 3;  // 奖励
}

message C2S_Rogue_BookAward {
  uint32 type = 1;  // 图鉴类型（4-事件/9-遗物/10-消耗品）
  uint32 value = 2;  // 事件ID/遗物AdvanceId/消耗品AdvanceId
}

message S2C_Rogue_BookAward {
  uint32 ret = 1;
  uint32 type = 2;
  uint32 value = 3;
  repeated base.Award awards = 4;  // 奖励
}

message C2S_Rogue_Quit {
}

message S2C_Rogue_Quit {
  uint32 ret = 1;
  repeated base.Award first_awards = 2;  // 首通奖励
  map<uint64, uint64> point = 3;  // 积分（1:倍率积分/2:积分/3:技能点）
  repeated base.TVS quests = 4;  // 任务积分明细（type:任务ID/value:任务计数/size:任务积分）
  bool is_win = 5;  // 是否通关
  bool first_pass_weekly = 6;  // 是否每周首次通关
  repeated base.KV32 inner_books = 7;  // 局内图鉴(key取值 4:佣兵/10001:遗物/10002:消耗品)
  uint32 level = 8;  // 队伍等级
}

message S2C_Rogue_SyncInnerInfo {
  out_base.RogueInner inner = 1;
}

message C2S_Rogue_UseSpring {
  uint32 id = 1;  // 温泉ID
  repeated uint64 character_id = 2;  // 佣兵ID
}

message S2C_Rogue_UseSpring {
  uint32 ret = 1;
  uint32 id = 2;
  repeated uint64 character_id = 3;
}

message C2S_Rogue_DiscardResource {
  uint32 type = 1;  // 资源类型（4:佣兵/10002:消耗品）
  repeated uint64 ids = 2;  // 资源ID
}

message S2C_Rogue_DiscardResource {
  uint32 ret = 1;
  uint32 type = 2;
  repeated uint64 ids = 3;
}

message S2C_Rogue_SyncBook {
  repeated base.TVS32 books = 1;  // 图鉴
}

message C2S_Rogue_RetryChallenge {
}

message S2C_Rogue_RetryChallenge {
  uint32 ret = 1;
  uint32 fail_count = 2;
}

message S2C_Rogue_TriggerEvent {
  repeated out_base.RoguePrivilege events = 1;  // 事件（触发机制）
}

message S2C_Rogue_TriggerEventResource {
  uint32 type = 1;  // 触发类型（1:获得/2:消耗）
  repeated base.Award resources = 2;  // 资源
}

message C2S_FirstRecord_GetInfo {
  uint32 type = 1;  // 记录类型（1:迷宫/2:爬塔）
  uint32 id = 2;  // 关卡ID
}

message S2C_FirstRecord_GetInfo {
  uint32 ret = 1;
  uint32 type = 2;
  uint32 id = 3;
  repeated out_base.CommonFirstRecord records = 4;
}

message C2S_Rogue_GetFirstAward {
  uint32 id = 1;  // 关卡ID
}

message S2C_Rogue_GetFirstAward {
  uint32 ret = 1;
  uint32 id = 2;
  repeated base.Award awards = 3;
}

// 首通红点通知
message S2C_FirstRecord_Notify {
  uint32 type = 1;  // 首通类型（1:迷宫/2:爬塔）
  uint32 id = 2;  // 关卡ID
}

// 0.4.0-公会
message C2S_Guild_Create {
  repeated uint32 icons = 1;  // 公会图标
  string prefix = 2;  // 公会前缀
  string name = 3;  // 公会名
  uint32 welcome = 4;  // 公会欢迎语
  string announce = 5;  // 公会宣言
  base.GuildJoinCondition join_condition = 6;  // 加入公会条件
  repeated string tags = 7;  // 公会标签
  repeated string custom_tags = 8;  // 玩家自定义公会标签
  repeated uint32 tag_index = 9;  // 公会标签索引
}

message S2C_Guild_Create {
  uint32 ret = 1;  // 错误码信息
  out_base.UserGuild guild = 2;  // 返回玩家公会信息
}

message C2S_Guild_Join {
  uint64 guild_id = 1;
}

message S2C_Guild_Join {
  uint32 ret = 1;
  uint64 guild_id = 2;
  out_base.UserGuild guild = 3;
}

message C2S_Guild_Quit {
}

message S2C_Guild_Quit {
  uint32 ret = 1;
}

message C2S_Guild_FastJoin {
}

message S2C_Guild_FastJoin {
  uint32 ret = 1;
  out_base.UserGuild guild = 2;
}

message C2S_Guild_EditName {
  string prefix = 1;
  string name = 2;
}

message S2C_Guild_EditName {
  uint32 ret = 1;
  string prefix = 2;
  string name = 3;
}

message C2S_Guild_SetUpgradeStrategy {
  uint32 upgrade_strategy = 1;
}

message S2C_Guild_SetUpgradeStrategy {
  uint32 ret = 1;
  uint32 upgrade_strategy = 2;
}

message C2S_Guild_ObtainTaskReward {
}

message S2C_Guild_ObtainTaskReward {
  uint32 ret = 1;
  repeated uint32 id = 2;
}

message C2S_Guild_ObtainQuestReward {
  uint32 id = 1;
}

message S2C_Guild_ObtainQuestReward {
  uint32 ret = 1;
  uint32 id = 2;
}

message C2S_Guild_GetQuestInfo {
}

message S2C_Guild_GetQuestInfo {
  uint32 ret = 1;
  out_base.GuildWeeklyQuestInfo quest = 2;
}

message C2S_Guild_AssignTitle {
  uint64 uid = 1;  // 公会成员 id
  uint32 title = 2;  // 职位
}

message S2C_Guild_AssignTitle {
  uint32 ret = 1;
  uint64 uid = 2;
  uint32 title = 3;
  repeated base.Award rewards = 4;
}

message C2S_Guild_Kick {
  uint64 uid = 1;
}

message S2C_Guild_Kick {
  uint32 ret = 1;
  uint64 uid = 2;
}

message C2S_Guild_InGuild {
  bool enter = 1;
}

message S2C_Guild_InGuild {
  uint32 ret = 1;
  bool enter = 2;
}

message C2S_Guild_DailySign {
}

message S2C_Guild_DailySign {
  uint32 ret = 1;
  uint32 point = 2;  // 签到获得的随机点数
}

message C2S_Guild_GetSignAward {
  repeated uint32 ids = 1;
}

message S2C_Guild_GetSignAward {
  uint32 ret = 1;
  repeated uint32 ids = 2;
}

message C2S_Guild_LearnTech {
  uint32 tech_id = 1;  // 公会科技 id
}

message S2C_Guild_LearnTech {
  uint32 ret = 1;
  uint32 tech_id = 2;  // 公会科技 id
  int64 upgrade_time = 3;  // 升级的时间
}

message C2S_Guild_Search {
  string guild_name = 1;
}

message S2C_Guild_Search {
  uint32 ret = 1;
  repeated base.SimpleGuild simple_guild = 2;
}

message C2S_Guild_Approve {
  uint64 uid = 1;
  bool agree = 2;
}

message S2C_Guild_Approve {
  uint32 ret = 1;
  uint64 uid = 2;
  bool agree = 3;
}

message C2S_Guild_UpspeedTech {
  uint32 id = 1;  // 加速表 id
}

message S2C_Guild_UpspeedTech {
  uint32 ret = 1;
  uint32 id = 2;
  int64 upgrade_time = 3;  // 加速后的时间
  uint32 level = 4;
}

message C2S_Guild_Recommend {
  repeated string tags = 1;
}

message S2C_Guild_Recommend {
  uint32 ret = 1;
  repeated base.SimpleGuild guilds = 2;
}

message C2S_Guild_GetGuildInfo {
  uint64 guild_id = 1;
}

message S2C_Guild_GetGuildInfo {
  uint32 ret = 1;
  out_base.Guild guild = 2;
}

message C2S_Guild_CancelApply {
  repeated uint64 guild_ids = 1;
}

message S2C_Guild_CancelApply {
  uint32 ret = 1;
  repeated uint64 guild_ids = 2;
}

message S2C_Guild_NotifyCancelApply {
  uint64 uid = 1;
}

message C2S_Guild_Attorn {
  uint64 uid = 1;  // 转让的玩家
}

message S2C_Guild_Attorn {
  uint32 ret = 1;  // 返回错误码
  uint64 uid = 2;
  uint64 attorn_uid = 3;  // 自己的 uid
}

message C2S_Guild_SetInfo {
  repeated uint32 icons = 1;  // 公会图标
  repeated string tags = 2;  // 公会标签
  base.GuildJoinCondition join_condition = 3;  // 公会加入条件
  uint32 welcome = 4;  // 公会欢迎信息
  string announce = 5;  // 公会宣言
  repeated string custom_tags = 6;  // 玩家自定义标签
  repeated uint32 tag_index = 7;  // 玩家自定义标签索引
}

message S2C_Guild_SetInfo {
  uint32 ret = 1;
  repeated uint32 icons = 2;  // 公会图标
  repeated string tags = 3;  // 公会标签
  base.GuildJoinCondition join_condition = 4;  // 公会加入条件
  uint32 welcome = 5;  // 公会欢迎信息
  string announce = 6;  // 公会宣言
  repeated string custom_tags = 7;  // 玩家自定义标签
  repeated uint32 tag_index = 8;  // 玩家自定义标签索引
}

message C2S_Guild_OnekeyObtainQuestReward {
}

message S2C_Guild_OnekeyObtainQuestReward {
  uint32 ret = 1;
  repeated uint32 ids = 2;
}

message C2S_Guild_SetAnnounce {
  string announce = 1;
}

message S2C_Guild_SetAnnounce {
  uint32 ret = 1;
  string announce = 2;
}

message C2S_Guild_CancelTechUpgrade {
}

message S2C_Guild_CancelTechUpgrade {
  uint32 ret = 1;
}

message C2S_Guild_AssistOther {
  repeated uint64 uid = 1;  // 被协助玩家 uid
}

message S2C_Guild_AssistOther {
  uint32 ret = 1;
  repeated base.Award rewards = 3;
  repeated uint64 success_uid = 4;  // 被协助成功的玩家 uid
}

message C2S_Guild_ReqAssist {
}
message S2C_Guild_ReqAssist {
  uint32 ret = 1;
  int64 assist_time = 2;  // 协助请求时间戳
}

message C2S_Guild_GetAssistInfo {
}

message S2C_Guild_GetAssistInfo {
  uint32 ret = 1;
  repeated out_base.UserGuildAssist assist_users = 2;  // 协助玩家列表
}

message S2C_Guild_NotifyDismiss {
}

message S2C_Guild_NotifyJoin {
  out_base.GuildMember member = 1;
}

message S2C_Guild_NotifyQuit {
  uint64 uid = 1;
}

message S2C_Guild_NotifyUserOnline {
  uint64 uid = 1;
}

message S2C_Guild_NotifyEditName {
  string prefix = 1;
  string name = 2;
}

message S2C_Guild_NotifySetUpgradeStrategy {
  uint32 upgrade_starategy = 1;
}

message S2C_Guild_NotifyLearnTech {
  uint32 upgrade_tech = 1;  // 科技节点 id
  int64 upgrade_time = 2;
}

message S2C_Guild_NotifyUpspeedTech {
  int64 upgrade_time = 1;  // 加速后的时间
  uint32 level = 2;
}

message S2C_Guild_NotifySignRecord {
  string name = 1;  // 玩家名
  uint32 point = 2;  // 点数
}

message S2C_Guild_NotifyAssignTitle {
  uint64 uid = 1;
  uint32 title = 2;
}

message S2C_Guild_NotifyKick {
  uint64 uid = 1;
}

message S2C_Guild_NotifyDeleteApply {
  uint64 uid = 1;
}

message S2C_Guild_NotifyGuildResourceOp {
  uint64 id = 1;  // 资源 id
  uint64 value = 2;  // 资源当前值
}

message S2C_Guild_NotifySetJoinCondition {
  base.GuildJoinCondition condition = 1;
}

message S2C_Guild_NotifyApplyJoin {
  base.SimpleUser user = 1;
  int64 apply_time = 2;  // 申请加入时间
}

message S2C_Guild_NotifyAttorn {
  uint64 attorn_uid = 1;  // 转让玩家 id
  uint64 uid = 2;  // 被转让玩家 id
}

message S2C_Guild_NotifySetInfo {
  repeated uint32 icons = 1;  // 公会图标
  repeated string tags = 2;  // 公会标签
  base.GuildJoinCondition join_condition = 3;  // 公会加入条件
  uint32 welcome = 4;  // 公会欢迎信息
  string announce = 5;  // 公会宣言
  repeated string custom_tags = 6;  // 玩家自定义标签
}

message S2C_Guild_NotifySetAnnounce {
  string announce = 1;
}

message S2C_Guild_NotifyApprove {
}

message S2C_Guild_NotifyGuildLog {
  out_base.GuildEventLog log = 1;
}

message S2C_Guild_NotifyUserOffline {
  uint64 uid = 1;
  uint32 offline_time = 2;
}

message S2C_Guild_NotifyCancelTech {
}

message S2C_Guild_NotifyAssistMe {
  uint32 treasure_box_level = 1;  // 宝箱等级
  int64 treasure_box_upgrade_time = 2;  // 宝箱升级时间戳
}

message S2C_Guild_NotifyReqAssist {
  uint64 uid = 1;
}

message S2C_Guild_NotifyUserGuildWeeklyData {
  out_base.UserGuildWeeklyData weekly_data = 1;
}

message C2S_Guild_GetDetail {
  uint64 guild_id = 1;
}

message S2C_Guild_GetDetail {
  uint32 ret = 1;
  base.GuildDetail detail = 2;
}

message C2S_Guild_SendMergeRequest {
  uint64 guild_id = 1;
  uint32 type = 2;  // 1-吞并（发起者成为主公会） 2-合并（接受者成为主公会）
}

message S2C_Guild_SendMergeRequest {
  uint32 ret = 1;
  uint64 guild_id = 2;
  uint32 type = 3;
  out_base.GuildMergeRequest request = 4;
}

message C2S_Guild_HandleMergeRequest {
  uint64 guild_id = 1;
  uint32 type = 2;  // 1-同意 2-拒绝 3-取消
}

message S2C_Guild_HandleMergeRequest {
  uint32 ret = 1;
  uint64 guild_id = 2;
  uint32 type = 3;
}

message C2S_Guild_SetMergeSetting {
  uint32 type = 1;  // 设置类型 1-设置合并条件 2-设置合并宣言
  base.GuildMergeSetting merge_setting = 2;
}

message S2C_Guild_SetMergeSetting {
  uint32 ret = 1;
  uint32 type = 2;
  base.GuildMergeSetting merge_setting = 3;
  out_base.GuildMergeIntention intention = 4;  // 设置宣言才有返回
}

message C2S_Guild_GetMergeIntentionList {
}

message S2C_Guild_GetMergeIntentionList {
  uint32 ret = 1;
  repeated out_base.GuildMergeIntention intentions = 2;
  uint32 index = 3;
  uint32 total = 4;
}

message C2S_Guild_GetMergeRequestList {
}

message S2C_Guild_GetMergeRequestList {
  uint32 ret = 1;
  repeated out_base.GuildMergeRequest requests = 2;
}

message S2C_Guild_NotifyMergeRequest {
  out_base.GuildMergeRequestRedPoint guild_merge = 1;
}

message S2C_Guild_NotifyMerge {
  uint64 target_guild_id = 1;
}

// 0.5.0-日常任务
message C2S_DailyQuest_AwardQuest {
  repeated uint32 ids = 1;
  bool with_active = 2;  // 是否同时领取活跃奖励
}

message S2C_DailyQuest_AwardQuest {
  uint32 ret = 1;
  repeated uint32 ids = 2;
  bool with_active = 3;
  uint32 battle_pass_lv = 4;  // 任务奖励的战令积分可能导致战令升级
  repeated base.Award awards = 5;
  repeated uint32 active_ids = 6;
}

message C2S_DailyQuest_AwardActive {
  repeated uint32 ids = 1;
}

message S2C_DailyQuest_AwardActive {
  uint32 ret = 1;
  repeated uint32 ids = 2;
  repeated base.Award awards = 3;
}

// 0.5.0-战令
message S2C_BattlePass_BuyNtf {
  uint32 unlock_lv = 1;  // 0-未解锁 1-解锁高级 2-解锁超级
  uint32 lv = 2;  // 解锁超级战令会导致战令升级
}

message C2S_BattlePass_AwardLv {
}

message S2C_BattlePass_AwardLv {
  uint32 ret = 1;
  uint32 low_awarded_lv = 2;  // 普通战令已领取的最高等级
  uint32 mid_awarded_lv = 3;  // 高级战令已领取的最高等级
  uint32 extra_awarded_lv = 4;  // 额外奖励已领取的最高等级
  repeated base.Award awards = 5;
}

message C2S_BattlePass_BuyLv {
  uint32 buy_lv = 1;  // 购买几级
}

message S2C_BattlePass_BuyLv {
  uint32 ret = 1;
  uint32 lv = 2;  // 购买后等级
}

message C2S_BattlePass_AwardQuest {
  repeated uint32 ids = 1;
}

message S2C_BattlePass_AwardQuest {
  uint32 ret = 1;
  repeated uint32 ids = 2;
  uint32 lv = 3;  // 任务奖励的战令积分可能导致战令升级
}

// 0.5.0-小游戏
message C2S_CasualGame_EnterGame {
  uint32 idx = 1;  // 小游戏下标，从0开始
}

message S2C_CasualGame_EnterGame {
  uint32 ret = 1;
  out_base.UserCasualGame casual_game = 2;
  uint32 idx = 3;
  out_base.CasualGameCard card = 4;  // 小游戏翻牌数据
  out_base.CasualGameCoinSpring coin_spring = 5;  // 小游戏红包雨
  out_base.CasualGameWheel wheel = 6;  // 小游戏转盘
}

message C2S_CasualGame_FinishGame {
  out_base.CasualGameCoinSpringFinish coin_spring = 1;  // 红包雨结束额外数据
}
message S2C_CasualGame_FinishGame {
  uint32 ret = 1;
  out_base.UserCasualGame casual_game = 2;
}

message S2C_CasualGame_NotifyPlayCnt {
  out_base.CasualGameItem item = 1;  // 触发的小游戏
}

// 0.5.0-割草游戏
message C2S_Mow_BeginMow {
  uint32 mow_id = 1;
}

message S2C_Mow_BeginMow {
  uint32 ret = 1;
  uint32 mow_id = 2;
}

message C2S_Mow_FinishMow {
  repeated uint32 compelete_targets = 1;  // 完成任务索引
}

message S2C_Mow_FinishMow {
  uint32 ret = 1;
  repeated uint32 compelete_targets = 2;  // 完成任务索引
  repeated base.Award rewards = 3;  // 奖励
}

message C2S_Mow_Sweep {
  uint32 mow_id = 1;
}

message S2C_Mow_Sweep {
  uint32 ret = 1;
  uint32 mow_id = 2;
  repeated base.Award rewards = 3;
}

message C2S_DailySpecials_Award {
  repeated uint32 ids = 1;  // 待领取的礼包id列表
}
message S2C_DailySpecials_Award {
  uint32 ret = 1;
  repeated uint32 ids = 2;  // 待领取的礼包id列表
  repeated base.Award awards = 3;
}

message S2C_DailySpecials_BuyNtf {
  uint32 id = 1;  // 礼包id
}

message S2C_DailySpecials_ContinueBuyNtf {
  uint32 id = 1;  // 连续购买id
  int64 endTm = 2;  // 连续购买结束时间戳
}

// 0.5.0-基金
message C2S_Fund_OnekeyObtainReward {
  uint32 fund_type = 1;  // 基金类型
}

message S2C_Fund_OnekeyObtainReward {
  uint32 ret = 1;
  out_base.UserFund fund = 2;
}

message C2S_Fund_ObtainReward {
  uint32 fund_type = 1;  // 基金类型
  uint32 id = 2;  // id
  bool pay = 3;  // 是否领取付费奖励
}

message S2C_Fund_ObtainReward {
  uint32 ret = 1;  // 返回错误码
  uint32 fund_type = 2;  // 基金类型
  uint32 id = 3;  // id
  bool pay = 4;  // 是否领取付费奖励
}

message S2C_FirstRecharge_BuyNtf {
  out_base.FirstRechargeGroup group = 1;
}

message C2S_FirstRecharge_Award {
  uint32 id = 1;  // 待领取的礼包id
}
message S2C_FirstRecharge_Award {
  uint32 ret = 1;
  uint32 id = 2;  // 待领取的礼包id
  repeated base.Award awards = 3;
}

message C2S_AccumulatedRecharge_Award {
  uint32 id = 1;  // 待领取的礼包id
}
message S2C_AccumulatedRecharge_Award {
  uint32 ret = 1;
  uint32 id = 2;  // 待领取的礼包id
  repeated base.Award awards = 3;
}

message C2S_MonthlyCard_DailyAward {
  repeated uint32 id = 1;  // 月卡id
}
message S2C_MonthlyCard_DailyAward {
  uint32 ret = 1;
  repeated uint32 id = 2;
  repeated base.Award awards = 3;
}

message S2C_MonthlyCard_BuyNtf {
  out_base.MonthlyCard monthly_card = 1;
}

message C2S_MonthlyCard_Active {}
message S2C_MonthlyCard_Active {
  uint32 ret = 1;
  out_base.MonthlyCard monthly_card = 2;
  repeated base.Award awards = 3;
}

// 设置头像
message C2S_Avatar_Set {
  uint32 id = 1;  // 头像id
}

message S2C_Avatar_Set {
  uint32 ret = 1;
  uint32 id = 2;  // 头像id
}

// 设置头像框
message C2S_Avatar_Frame_Set {
  uint32 id = 1;  // 头像框id
}

message S2C_Avatar_Frame_Set {
  uint32 ret = 1;
  uint32 id = 2;  // 头像框id
}

// 0.5.0-每日签到
message C2S_DailySign_ObtainReward {
}

message S2C_DailySign_ObtainReward {
  uint32 ret = 1;
}

// 0.5.0-推送礼包
message C2S_PushGift_Buy {
  uint64 uinq_id = 1;
  uint32 id = 2;
}

message S2C_PushGift_Buy {
  uint32 ret = 1;
  uint64 uniq_id = 2;
  uint32 id = 3;
}

message S2C_PushGift_NotifyTrigger {
  out_base.PushGiftData push_gift = 1;
}

// 1.2.60-自选礼包
message C2S_SelectGift_Buy {
  uint64 unique_id = 1;
  uint32 id = 2;
  repeated uint32 idx = 3;  // 自选礼包索引 从0开始
}

message S2C_SelectGift_Buy {
  uint32 ret = 1;
  uint64 unique_id = 2;
  uint32 id = 3;
  repeated uint32 idx = 4;
}

message S2C_SelectGift_NotifyTrigger {
  out_base.SelectGift gift = 1;
}

message C2S_SevenSign_Award {
  uint32 id = 1;  // 待领取的奖励id
}

message S2C_SevenSign_Award {
  uint32 ret = 1;
  uint32 id = 2;
  out_base.UserSevenSign seven_sign = 3;  // 签到数据
}

// 0.6.0-成就
message C2S_Achievement_Award {
  repeated uint32 ids = 1;  // 成就id
}

message S2C_Achievement_Award {
  uint32 ret = 1;
  repeated uint32 ids = 2;
  repeated base.Award awards = 3;  // 领取的奖励列表
}

message S2C_Achievement_Notify {
  out_base.AchievementInfo achievement = 1;  // 达成的成就
}

// 0.6.0-七日活动
message C2S_SevenAct_AwardPoint {
  repeated uint32 ids = 1;
}
message S2C_SevenAct_AwardPoint {
  uint32 ret = 1;
  repeated uint32 ids = 2;
  repeated base.Award awards = 3;
  out_base.UserSevenAct seven_act = 4;
}

message C2S_SevenAct_AwardQuest {
  repeated uint32 ids = 1;
}
message S2C_SevenAct_AwardQuest {
  uint32 ret = 1;
  repeated uint32 ids = 2;
  repeated base.Award awards = 3;
  out_base.UserSevenAct seven_act = 4;
}

// 0.8.0-背饰
message C2S_Back_Decompose {
  uint64 id = 1;  // 要分解的背饰id
}
message S2C_Back_Decompose {
  uint32 ret = 1;
  uint64 id = 2;
  repeated base.Award gift = 3;  // 分解返还
}

message C2S_Back_Lock {
  uint64 id = 1;  // 背饰id
  bool lock = 2;  // true-上锁 false-下锁
}
message S2C_Back_Lock {
  uint32 ret = 1;
  uint64 id = 2;
  bool lock = 3;
}

message C2S_Back_UpgradeLv {
  uint32 formation_id = 1;  // 参考enums.FORMATION_TYPE
  uint32 new_lv = 2;  // 目标等级
}
message S2C_Back_UpgradeLv {
  uint32 ret = 1;
  uint32 formation_id = 2;
  uint32 new_lv = 3;
  uint32 old_lv = 4;
}

message C2S_Back_UpgradeStar {
  uint64 id = 1;  // 背饰id
  uint64 consume_id = 2;  // 消耗的背饰id
}

message S2C_Back_UpgradeStar {
  uint32 ret = 1;
  uint64 id = 2;
  uint64 consume_id = 3;
  repeated base.Award gift = 4;  // 升星返还
  base.Back old_back = 5;  // 升星前的背饰
}

message C2S_Back_Refresh {
  bool adv = 1;  // 是否广告
}
message S2C_Back_Refresh {
  uint32 ret = 1;
  out_base.UserBack back = 2;
  bool adv = 3;
}

message C2S_Back_Buy {
  uint32 idx = 1;  // 第X个商品，从0开始
}
message S2C_Back_Buy {
  uint32 ret = 1;
  uint32 idx = 2;
  out_base.UserBack back = 3;
}

message C2S_Back_SetWish {
  uint32 wish_id = 1;  // 心愿对应的背饰id
}
message S2C_Back_SetWish {
  uint32 ret = 1;
  uint32 wish_id = 2;
  out_base.UserBack back = 3;
}

message C2S_Back_ExpandBag {}
message S2C_Back_ExpandBag {
  uint32 ret = 1;
  out_base.UserBack back = 2;
}

message C2S_Back_UpgradeBook {
  map<uint32, uint32> advance_ids = 1;  // key:advance_id value:target_lv
}
message S2C_Back_UpgradeBook {
  uint32 ret = 1;
  map<uint32, uint32> advance_ids = 2;
  out_base.UserBack back = 3;
}

// 0.9.0-爬塔
message C2S_Tower_GetInfo {
}

message S2C_Tower_GetInfo {
  uint32 ret = 1;
  out_base.UserTower tower = 2;
}

message C2S_Tower_ChallengeBegin {
  uint32 id = 1;  // 挑战层数(关卡)
}

message S2C_Tower_ChallengeBegin {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 挑战层数(关卡)
  uint64 battle_id = 3;  // 战斗 id
}

message S2C_Tower_ChallengeFinish {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 挑战关卡 id
  repeated base.Award rewards = 3;  // 挑战关卡获得奖励
  bool is_win = 4;  // 是否胜利
  repeated uint32 drop_buff_ids = 5;  // 掉落 buff id 列表
  repeated base.Award first_rewards = 6;  // 首通奖励
  repeated out_base.TowerBuffSlot buff_slots = 7;  // buff 槽位中的数据
  uint32 debug_buff_id = 8;  // 用于QA测试的buff_id
}

message C2S_Tower_ObtainGlobalFirstPassRewards {
  uint32 id = 1;  // 爬塔关卡 id
}

message S2C_Tower_ObtainGlobalFirstPassRewards {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 领取关卡id
}

message C2S_Tower_FastSweep {
}

message S2C_Tower_FastSweep {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 扫荡当前关卡
  repeated base.Award rewards = 3;  // 扫荡获得的奖励
  repeated out_base.TowerBuffSlot buff_slots = 4;  // 扫荡后的 buff 槽位数据
}

message C2S_Tower_UnlockBuffSlot {
}

message S2C_Tower_UnlockBuffSlot {
  uint32 ret = 1;
}

message C2S_Tower_RefreshBuff {
}

message S2C_Tower_RefreshBuff {
  uint32 ret = 1;
  repeated uint32 drop_buff_ids = 2;
}

message C2S_Tower_SelectBuff {
  uint32 slot_idx = 1;  // buff 槽位索引
  uint32 buff_id = 2;
}

message S2C_Tower_SelectBuff {
  uint32 ret = 1;
  uint32 slot_idx = 2;
  uint32 buff_id = 3;
  repeated out_base.TowerBuffSlot buff_slots = 4;
}

message C2S_Tower_SetBuffPefer {
  repeated uint32 pefer_buff_types = 1;  // 偏好 buff 类型
  uint32 max_refresh_cnt = 2;  // 最大刷新次数
  bool is_open = 3;  // 是否开启,当 该字段为 false 时，上面两个字段忽略
}

message S2C_Tower_SetBuffPefer {
  uint32 ret = 1;
  repeated uint32 pefer_buff_types = 2;  // 偏好 buff 类型
  uint32 max_refresh_cnt = 3;  // 最大刷新次数
  bool is_open = 4;  // 是否开启
}

message S2C_Tower_NotifyServerMaxId {
  uint32 id = 1;
}

message C2S_Tower_GetUserByFloors {
  repeated uint32 floors = 1;  // 需要获取的层数集合
}

message S2C_Tower_GetUserByFloors {
  uint32 ret = 1;
  repeated out_base.TowerFloorUsers floor_users = 2;
}

// 0.9.0-佣兵图鉴
message C2S_CompanionBook_UpgradeLv {
  uint32 advance_id = 1;
  uint32 new_lv = 2;  // 目标等级
}
message S2C_CompanionBook_UpgradeLv {
  uint32 ret = 1;
  uint32 advance_id = 2;
  repeated base.Award awards = 3;
  uint32 new_lv = 4;  // 目标等级
  uint32 book_lv = 5;  // 图鉴等级
  uint32 book_point = 6;  // 图鉴值
}

// 0.9.0-头衔
message C2S_Honor_AwardQuest {
  repeated uint32 quest_id = 1;  // 待领取的任务列表
}
message S2C_Honor_AwardQuest {
  uint32 ret = 1;
  repeated uint32 quest_id = 2;
  repeated base.Award awards = 3;
  out_base.UserHonor honor = 4;
}

message C2S_Honor_Upgrade {
}
message S2C_Honor_Upgrade {
  uint32 ret = 1;
  out_base.UserHonor honor = 2;
}

message C2S_SeriesGift_Buy {
  uint32 id = 1;  // 购买礼包 id
  uint32 activity_id = 2;  // 活动 id
}

message S2C_SeriesGift_Buy {
  uint32 ret = 1;
  uint32 id = 2;
  uint32 activity_id = 3;
}

message S2C_SeriesGift_NotifyTrigger {
  out_base.UserSeriesGift series_gift = 1;
}

// 0.9.50-每日惊喜福利
message C2S_DailySurpriseBenefit_ObtainRewards {
  bool adv = 1;  // 是否广告
}

message S2C_DailySurpriseBenefit_ObtainRewards {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 获得奖励 id
  bool adv = 3;
}

// 0.9.50-功能预览
message C2S_FunctionPreview_ObtainRewards {
  uint32 id = 1;
}

message S2C_FunctionPreview_ObtainRewards {
  uint32 ret = 1;
  repeated uint32 ids = 2;
}

// 0.9.50-宝库
message C2S_Treasury_ChallengeBegin {
}

message S2C_Treasury_ChallengeBegin {
  uint32 ret = 1;
  uint64 battle_id = 2;
}

message S2C_Treasury_ChallengeFinish {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 宝库 id
  bool is_win = 3;  // 战斗结果
  repeated base.Award awards = 4;  // 挑战胜利奖励
  repeated base.PrivilegeAward privilege_awards = 5;  // 特权奖励
}

message C2S_Treasury_Sweep {
}

message S2C_Treasury_Sweep {
  uint32 ret = 1;
  repeated base.Award rewards = 2;  // 扫荡奖励
  repeated base.PrivilegeAward privilege_awards = 3;  // 特权奖励
}
// 0.9.50-广告
message C2S_Advertise_Use {
  uint32 id = 1;
}
message S2C_Advertise_Use {
  uint32 ret = 1;
  uint32 id = 2;
}

// 0.9.50-礼包码
message C2S_GiftCode_Award {
  string code = 1;
}
message S2C_GiftCode_Award {
  uint32 ret = 1;
}

message C2S_Chat_GetInfos {
  uint32 channel_type = 1;  // 频道类型,目前只支持世界频道以及公会频道
}

message S2C_Chat_GetInfos {
  uint32 ret = 1;
  uint32 channel_type = 2;
  repeated base.NotifyChat infos = 3;
}

message C2S_Chat_GetSystemInfos {
  uint32 system_type = 1;  // 系统类型(enums.NOTIFY_SYSTEM_TYPE)
}

message S2C_Chat_GetSystemInfos {
  uint32 ret = 1;
  uint32 system_type = 2;
  repeated base.NotifySystem infos = 3;
}

// 1.0.0-短期战令
message C2S_ShortBattlePass_Start {
}
message S2C_ShortBattlePass_Start {
  uint32 ret = 1;
  out_base.UserShortBattlePass bp = 2;
}

message C2S_ShortBattlePass_AwardBp {
  uint32 tp = 1;  // 1-活跃战令 2-签到战令
  repeated uint32 ids = 2;  // 签到战令不支持领取多个id
}
message S2C_ShortBattlePass_AwardBp {
  uint32 ret = 1;
  uint32 tp = 2;
  repeated uint32 ids = 3;
  repeated base.Award awards = 4;
  out_base.UserShortBattlePass bp = 5;
}

message S2C_ShortBattlePass_BuyBpNtf {
  uint32 tp = 1;  // 1-活跃战令 2-签到战令
  out_base.UserShortBattlePass bp = 2;
}

message C2S_ShortBattlePass_AwardQuest {
  repeated uint64 ids = 1;
}
message S2C_ShortBattlePass_AwardQuest {
  uint32 ret = 1;
  repeated uint64 ids = 2;
  repeated base.Award awards = 3;
  out_base.UserShortBattlePass bp = 4;
}

message C2S_ShortBattlePass_AwardPack {
  uint32 id = 1;  // 礼包id
}
message S2C_ShortBattlePass_AwardPack {
  uint32 ret = 1;
  uint32 id = 2;
  repeated base.Award awards = 3;
  out_base.UserShortBattlePass bp = 4;
}

message S2C_ShortBattlePass_BuyPackNtf {
  uint32 id = 1;  // 礼包id
  out_base.UserShortBattlePass bp = 2;
}

message C2S_ShortBattlePass_AwardProgress {
  uint32 id = 1;  // 进度id
}
message S2C_ShortBattlePass_AwardProgress {
  uint32 ret = 1;
  uint32 id = 2;
  repeated base.Award awards = 3;
  out_base.UserShortBattlePass bp = 4;
}

// 1.0.0-主题活动
message S2C_ThemeActivity_Notify {
  out_base.UserThemeActivity theme_activity = 1;
}

message C2S_ThemeActivity_Roll {
  uint32 tp = 1;  // 0-单抽 1-十连
}
message S2C_ThemeActivity_Roll {
  uint32 ret = 1;
  uint32 tp = 2;
  repeated base.Award awards = 3;
  out_base.UserThemeActivity theme_activity = 4;
  repeated uint32 levels = 5;  // 每抽的等级
}

message C2S_ThemeActivity_Scrape {
  repeated uint32 idx = 1;  // 要刮的位置 从0开始
}
message S2C_ThemeActivity_Scrape {
  uint32 ret = 1;
  repeated uint32 idx = 2;
  repeated base.Award awards = 3;
  out_base.UserThemeActivity theme_activity = 4;
}

message C2S_ThemeActivity_AwardAccRoll {
  repeated uint32 id = 1;  // 累抽id
}
message S2C_ThemeActivity_AwardAccRoll {
  uint32 ret = 1;
  repeated uint32 id = 2;
  repeated base.Award awards = 3;
  out_base.UserThemeActivity theme_activity = 4;
}

message S2C_ThemeActivity_BuyPackNtf {
  uint32 id = 1;  // 礼包id
  out_base.UserThemeActivity theme_activity = 2;
}

message C2S_ThemeActivity_AwardQuest {
  repeated uint32 ids = 1;
}
message S2C_ThemeActivity_AwardQuest {
  uint32 ret = 1;
  repeated uint32 ids = 2;
  repeated base.Award awards = 3;
  out_base.UserThemeActivity theme_activity = 4;
}

message C2S_ThemeActivity_NewLottery {
}
message S2C_ThemeActivity_NewLottery {
  uint32 ret = 1;
  out_base.UserThemeActivity theme_activity = 2;
}

message C2S_ThemeActivity_AwardPack {
  uint32 id = 1;  // 礼包id
  uint32 cnt = 2;  // 购买次数
}
message S2C_ThemeActivity_AwardPack {
  uint32 ret = 1;
  uint32 id = 2;
  repeated base.Award awards = 3;
  out_base.UserThemeActivity theme_activity = 4;
  uint32 cnt = 5;
}

message C2S_ThemeActivity_SetWish {
  uint32 wish_index = 1;  // 心愿索引 从1开始
  base.Award wish_award = 2;  // 心愿奖励
}
message S2C_ThemeActivity_SetWish {
  uint32 ret = 1;
  uint32 wish_index = 2;
  base.Award wish_award = 3;
  out_base.UserThemeActivity theme_activity = 4;
}

// 1.0.0-领地
message C2S_Territory_GetInfo {
}

message S2C_Territory_GetInfo {
  uint32 ret = 1;
  out_base.UserTerritory territory = 2;
}

// 主城升级
message C2S_Territory_UpgradeMainCity {
  uint32 cost_type = 1;  // 消耗类型(0:正常消耗类型,1:通用道具类型)
}

message S2C_Territory_UpgradeMainCity {
  uint32 ret = 1;
  out_base.TerritoryMainCity main_city = 2;
  uint32 cost_type = 3;
}

// 刷新贸易区域
message C2S_Territory_RefreshTradeArea {
  bool is_adv = 1;
}

message S2C_Territory_RefreshTradeArea {
  uint32 ret = 1;
  bool is_adv = 2;
  repeated uint32 trader_areas = 3;
}

// 贸易派遣
message C2S_Territory_TradeDispatch {
  uint32 dispatch_area = 1;  // 贸易派遣 id
}

message S2C_Territory_TradeDispatch {
  uint32 ret = 1;
  uint32 dispatch_area = 2;
  int64 dispatch_time = 3;  // 派遣开始时间戳
}

message C2S_Territory_AutoTradeDispatch {
  bool open = 1;  // 开启或者取消
}

message S2C_Territory_AutoTradeDispatch {
  uint32 ret = 1;
  bool open = 2;
  out_base.TerritoryMainCity main_city = 3;
}

message C2S_Territory_ObtainTradeDispatchRewards {
}

message S2C_Territory_ObtainTradeDispatchRewards {
  uint32 ret = 1;
  out_base.TerritoryMainCity main_city = 2;  // 返回主城数据
  repeated base.Award rewards = 3;
}

// 建筑升级
message C2S_Territory_UpgradeBuilding {
  uint32 type = 1;  // 建筑类型
  uint32 cost_type = 2;  // 消耗类型(0:正常消耗类型,1:通用道具类型)
}

message S2C_Territory_UpgradeBuilding {
  uint32 ret = 1;
  out_base.TerritoryBuilding building = 2;  // 返回建筑结构
  uint32 cost_type = 3;
}

// 领取建筑产出
message C2S_Territory_ObtainBuildingReward {
  uint32 type = 1;  // 建筑类型
}

message S2C_Territory_ObtainBuildingReward {
  uint32 ret = 1;
  uint32 type = 2;
  out_base.TerritoryBuilding building = 3;  // 返回建筑结构
  repeated base.Award rewards = 4;  // 获得奖励
  repeated base.PrivilegeAward privilege_awards = 5;  // 特权奖励
}

// 使用道具获得建筑产出
message C2S_Territory_ObtainBuildingRewardsUseItem {
  uint32 type = 1;  // 建筑类型
  base.Award cost_item = 2;  // 消耗道具
}

message S2C_Territory_ObtainBuildingRewardsUseItem {
  uint32 ret = 1;
  uint32 type = 2;  // 建筑类型
  base.Award cost_item = 3;  // 道具数量
  repeated base.Award rewards = 4;  // 获得奖励
  map<uint32, uint32> params = 5;  // 存一些额外参数,如暴击次数等
  repeated base.KV debugs = 6;  // 调试信息
}

message C2S_Territory_VisitFriend {
  uint64 friend_uid = 1;  // 好友 uid
}

message S2C_Territory_VisitFriend {
  uint32 ret = 1;
  uint64 friend_uid = 2;
  out_base.FriendTerritory firend_territory = 3;  // 好友领地信息
}

message S2C_Territory_NotifyLog {
  out_base.TerritoryLog log = 1;
}

message C2S_Territory_Like {
  uint64 uid = 1;
}

message S2C_Territory_Like {
  uint32 ret = 1;
  uint64 uid = 2;
}

message S2C_Territory_NotifyLike {
  uint64 uid = 1;
  uint32 like = 2;
}

message C2S_Territory_ObtainEventRewards {
  uint32 id = 1;  // 事件 id
  uint32 option_index = 2;  // 选项 index 从 1 开始
  int64 trigger_time = 3;  // 触发时间
}

message S2C_Territory_ObtainEventRewards {
  uint32 ret = 1;
  uint32 id = 2;
  repeated base.Award rewards = 3;
  uint32 event_id = 4;
  uint32 option_index = 5;
  int64 trigger_time = 6;  // 触发时间
}

message C2S_Territory_ObtainFriendEventRewards {
  uint64 uid = 1;  // 好友 uid
  uint32 id = 2;  // 事件 id
  uint32 option_index = 3;
}

message S2C_Territory_ObtainFriendEventRewards {
  uint32 ret = 1;
  uint64 uid = 2;
  uint32 id = 3;
  repeated base.Award rewards = 4;
  uint32 option_index = 5;
}

message C2S_Territory_ObtainQuestRewards {
}

message S2C_Territory_ObtainQuestRewards {
  uint32 ret = 1;
  repeated base.Award rewards = 2;
  uint32 new_quest_id = 3;
}

message S2C_Territory_NotifyEventAssignFriend {
  out_base.TerritoryFriendEvent event = 1;
}

message C2S_Territory_ObtainRewardsByAdv {
  uint32 type = 1;  // 建筑类型
}

message S2C_Territory_ObtainRewardsByAdv {
  uint32 ret = 1;
  uint32 type = 2;
  repeated base.Award rewards = 3;
}

message C2S_Territory_CompanionEquip {
  uint32 type = 1;  // 建筑类型
  uint32 idx = 2;  // 驻守位置 从0开始
  uint64 companion_id = 3;  // 佣兵ID 0代表下阵
}
message S2C_Territory_CompanionEquip {
  uint32 ret = 1;
  uint32 type = 2;
  uint32 idx = 3;
  uint64 companion_id = 4;
  repeated out_base.TerritoryBuilding building = 5;  // 变化的建筑列表
}

message C2S_TerritoryLord_GetInfo {
  uint64 user_id = 1;
}

message S2C_TerritoryLord_GetInfo {
  uint32 ret = 1;
  uint64 user_id = 2;
  repeated out_base.TerritoryVassal vassals = 3;   // 领地封臣
  out_base.TerritoryLord lord = 4;   // 领地领主
  out_base.TerritoryLord last_week_lord = 5;   // 上周领主
  bool is_grant_awarded = 6;   // 是否已领取封赏奖励
  int64 protect_start_time = 7;   // 保护开始时间
  int64 func_open_time = 8;   // 功能开启时间
  repeated base.Award grant_awards = 9;   // 封赏奖励
  uint32 grant_city_id = 10;  // 封赏奖励的城池id
}

message C2S_TerritoryLord_CaptureChallengeBegin {
  uint32 pos = 1;
  uint64 vassal_user_id = 2;  // 要征服的封臣id
  uint64 lord_user_id = 3;  // 对方所属的领主id
  uint32 confront_state = 4;  // 要征服的封臣的迎战状态(1: 领主迎战，2: 自身迎战)
}

message S2C_TerritoryLord_CaptureChallengeBegin {
  uint32 ret = 1;
  uint32 pos = 2;
  uint64 vassal_user_id = 3;  // 要征服的封臣id
  uint64 lord_user_id = 4;  // 对方所属的领主id 检验使用
  uint64 battle_id = 5;
}

message S2C_TerritoryLord_CaptureChallengeFinish {
  uint32 ret = 1;
  uint32 pos = 2;
  uint64 vassal_user_id = 3;
  uint64 lord_user_id = 4;  // 对方所属的领主id 检验使用
  bool is_win = 5;
}

message C2S_TerritoryLord_EscapeChallengeBegin {
  uint64 lord_user_id = 1;
}

message S2C_TerritoryLord_EscapeChallengeBegin {
  uint32 ret = 1;
  uint64 battle_id = 2;
  uint64 lord_user_id = 3;  // 领主id
}

message S2C_TerritoryLord_EscapeChallengeFinish {
  uint32 ret = 1;
  bool is_win = 2;
  uint64 lord_user_id = 3;  // 领主id
  int64 protect_start_time = 4;  // 保护开始时间
}

message C2S_TerritoryLord_FastEscape {
  uint64 lord_user_id = 1;
}

message S2C_TerritoryLord_FastEscape {
  uint32 ret = 1;
  uint64 lord_user_id = 2;
  int64 protect_start_time = 3;  // 保护开始时间
}

message C2S_TerritoryLord_SetConfrontState {
  uint32 pos = 1;
  uint32 state = 2;
}

message S2C_TerritoryLord_SetConfrontState {
  uint32 ret = 1;
  uint32 pos = 2;
  uint32 state = 3;
}

// 征收
message C2S_TerritoryLord_LevyAward {
  uint32 pos = 1;  // 槽位
}

message S2C_TerritoryLord_LevyAward {
  uint32 ret = 1;
  uint32 pos = 2;
  repeated base.Award awards = 3;
  repeated base.PrivilegeAward privilege_awards = 4;
}

// 封赏
message C2S_TerritoryLord_GrantAward {
  uint64 lord_user_id = 1;  // 封赏的领主id,检验使用
}

message S2C_TerritoryLord_GrantAward {
  uint32 ret = 1;
  uint64 lord_user_id = 2;
  repeated base.Award awards = 3;
}

// 推荐列表
message C2S_TerritoryLord_Recommend {
}

message S2C_TerritoryLord_Recommend {
  uint32 ret = 1;
  repeated base.TerritoryLordSimpleUser users = 2;
  int64 last_refresh_time = 3;
}

// 刷新推荐列表
message C2S_TerritoryLord_RefreshRecommend {
}

message S2C_TerritoryLord_RefreshRecommend {
  uint32 ret = 1;
  repeated base.TerritoryLordSimpleUser users = 2;
  int64 last_refresh_time = 3;
}

// 精确查找
message C2S_TerritoryLord_Search {
  string name = 1;
}

message S2C_TerritoryLord_Search {
  uint32 ret = 1;
  string name = 2;
  base.TerritoryLordSimpleUser user = 3;
}

// 驱逐封臣
message C2S_TerritoryLord_ReleaseVassal {
  uint64 vassal_user_id = 1;
}

message S2C_TerritoryLord_ReleaseVassal {
  uint32 ret = 1;
  uint64 vassal_user_id = 2;
}

// 一键设置迎战状态
message C2S_TerritoryLord_FastSetConfrontState {
  uint32 state = 1;
}

message S2C_TerritoryLord_FastSetConfrontState {
  uint32 ret = 1;
  uint32 state = 2;
}

message S2C_TerritoryLord_Notify {
  out_base.TerritoryLord lord = 1;  // 要更新或者插入的领主数据(为nil不操作)
  bool del_lord = 2;  // 是否要删除领主数据
  repeated uint32 del_vassal_poses = 3;  // 要删除的封臣位置
}

message C2S_CompanionEquip_ChangeFormation {
  repeated out_base.CompanionEquipmentFormation formations = 1;
}

message S2C_CompanionEquip_ChangeFormation {
  uint32 ret = 1;
  repeated out_base.CompanionEquipmentFormation formations = 2;
}

message C2S_CompanionEquip_Upgrade {
  uint32 slot = 1;  // 对应佣兵阵位（当前版本只能取2和3）
  uint32 type = 2;  // 装备类型
  uint32 level = 3;  // 目标等级
}

message S2C_CompanionEquip_Upgrade {
  uint32 ret = 1;
  uint32 slot = 2;
  uint32 type = 3;
  uint32 level = 4;
}

message C2S_CompanionEquip_Forge {
  uint32 size = 1;  // 锻造数量
}

message S2C_CompanionEquip_Forge {
  uint32 ret = 1;
  uint32 size = 2;
  repeated base.RealAward awards = 3;
}

message C2S_CompanionEquip_Decompose {
  repeated uint64 ids = 1;  // 装备ID
}

message S2C_CompanionEquip_Decompose {
  uint32 ret = 1;
  repeated uint64 ids = 2;
  repeated base.Award awards = 3;
}

message C2S_CompanionEquip_Combine {
  repeated out_base.CompanionEquipmentCombineGroup groups = 1;
  uint32 op_type = 2;  // 操作类型（1:合成/2:一键）
}

message S2C_CompanionEquip_Combine {
  uint32 ret = 1;
  repeated out_base.CompanionEquipmentCombineGroup groups = 2;
  uint32 op_type = 3;
}

message C2S_CompanionEquip_Lock {
  uint64 id = 1;  // 装备ID
  bool lock = 2;  // true-上锁 false-下锁
}

message S2C_CompanionEquip_Lock {
  uint32 ret = 1;
  uint64 id = 2;
  bool lock = 3;
}

// 1.1.0-公会GVE
message C2S_GuildGVE_ChallengeBegin {
  uint32 stage_id = 1;  // 挑战关卡 id
  uint32 difficult = 2;  // 难度
}
message S2C_GuildGVE_ChallengeBegin {
  uint32 ret = 1;
  uint32 stage_id = 2;
  uint32 difficult = 3;
  uint64 battle_id = 4;
}
message S2C_GuildGVE_ChallengeFinish {
  uint32 ret = 1;
  uint32 stage_id = 2;
  uint32 difficult = 3;
  repeated base.Award awards = 4;
  bool is_win = 5;
  repeated base.Award assist_awards = 6;  // 协助奖励
}

message C2S_GuildGVE_GetRank {
}
message S2C_GuildGVE_GetRank {
  uint32 ret = 1;
  uint32 self_rank = 2;
  repeated out_base.RankUnit rank_units = 3;
}

message C2S_GuildGVE_GetGiveLog {
}
message S2C_GuildGVE_GetGiveLog {
  uint32 ret = 1;
  repeated out_base.GuildGVEGiveLog logs = 2;
}

message C2S_GuildGVE_Give {
  uint64 target = 1;  // 目标玩家
}
message S2C_GuildGVE_Give {
  uint32 ret = 1;
  uint64 target = 2;
  repeated base.Award awards = 3;
  uint32 target_receive_num = 4;  // 目标受赠次数
  uint32 give_num = 5;  // 今日赠送次数
}
message S2C_GuildGVE_GiveNtf {
  uint64 source = 1;  // 来源玩家
}

message C2S_GuildGVE_BoxAward {
  uint32 tp = 1;  // 副本阶段
  bool limit = 2;  // 是否有限奖
  uint32 pos = 3;  // 有限牌的翻牌位置 从0开始
}
message S2C_GuildGVE_BoxAward {
  uint32 ret = 1;
  uint32 tp = 2;
  bool limit = 3;  // 是否有限奖
  uint32 pos = 4;
  repeated base.Award awards = 5;
  out_base.GuildGVEReward reward = 6;
  uint32 num = 7;  // 今日领奖次数
}

message C2S_GuildGVE_StartAddition {
}
message S2C_GuildGVE_StartAddition {
  uint32 ret = 1;
  int64 addition_start_tm = 8;  // 公会加成开始时间
  int64 addition_end_tm = 9;  // 公会加成结束时间
}

message C2S_GuildGVE_GetInfo {
}
message S2C_GuildGVE_GetInfo {
  uint32 ret = 1;
  out_base.GuildGVE data = 2;
}

message S2C_GuildGVE_MonsterNtf {
  uint32 lv = 1;  // 副本等级
  uint32 tp = 2;  // 副本阶段
  map<uint32, uint32> monsters = 3;  // 对怪物造成的伤害 key-stage_id value-伤害
}

message S2C_GuildGVE_OpenNtf {
  uint32 lv = 1;  // 副本等级
  uint32 tp = 2;  // 副本阶段
  uint32 turn = 3;  // 轮次
}

message S2C_GuildGVE_AdditionNtf {
  uint64 uid = 1;  // 发起者
  string name = 2;  // 发起者名字
  int64 addition_start_tm = 3;  // 公会加成开始时间
  int64 addition_end_tm = 4;  // 公会加成结束时间
  uint32 news_id = 5;  // 新闻id
}

message C2S_GuildGVE_Sweep {
  uint32 stage_id = 1;  // 挑战关卡 id
  uint32 difficult = 2;  // 难度
}
message S2C_GuildGVE_Sweep {
  uint32 ret = 1;
  uint32 stage_id = 2;
  uint32 difficult = 3;
  repeated base.Award awards = 5;
  repeated base.Award assist_awards = 6;  // 协助奖励
}

// 签到-信息
message S2C_FlushUserSignIn {
  repeated out_base.UserSignIn user_sign_ins = 1;  // 可以存在多个签到活动，看策划配置
}

// 每日签到奖励
message C2S_SignIn_DailyAward {
  uint32 base_id = 1;  // 签到的配置id
  uint32 reward_id = 2;  // 奖励表id sign_in_daily_reward_info
}

message S2C_SignIn_DailyAward {
  uint32 ret = 1;
  uint32 base_id = 2;
  uint32 reward_id = 3;
  repeated base.RealAward awards = 4;  // 获得的奖励
}

// 累计签到奖励
message C2S_SignIn_CumulateAward {
  uint32 base_id = 1;  // 签到的配置id
  uint32 reward_id = 2;  // 要领取的奖励id
}

message S2C_SignIn_CumulateAward {
  uint32 ret = 1;
  uint32 base_id = 2;  // 签到的配置id
  uint32 reward_id = 3;  // 奖励表id sign_in_cumulate_reward_info
  uint32 reward_group_id = 4;  // 奖励掉落的id
  repeated base.RealAward awards = 5;  // 获得的奖励
}

//---------------------------1.1.0-战宠--------------------------------
// 战宠信息
message S2C_FlushPet {
  map<uint32, base.PetFormation> slots = 1;  // 宠物阵容(阵位id:1-出战位 2-助战位)
  map<uint64, base.Pet> pets = 2;  // 宠物背包列表
  map<uint64, base.PetEquipment> equips = 3;  // 宠物装备背包列表
  repeated uint32 compose_ids = 4;  // 已激活的收藏id列表
  repeated uint32 owned_pet_ids = 5;  // 已经获得过的战宠id列表
}

// 战宠升级
message C2S_Pet_UpLevel {
  uint32 slot = 1;  // 阵位ID(阵位id:1-出战位 2-助战位)
  uint32 level = 2;  // 目标等级
}

message S2C_Pet_UpLevel {
  uint32 ret = 1;
  uint32 slot = 2;  // 阵位ID(阵位id:1-出战位 2-助战位)
  uint32 level = 3;  // 目标等级
}

// 战宠合成(升品)
message C2S_Pet_UpQuality {
  uint64 main_id = 1;  // 待升品宠物id
  uint64 sub_id = 2;  // 材料宠物id
  repeated base.Award addition_items = 3;  // 提升概率道具
}

message S2C_Pet_UpQuality {
  uint32 ret = 1;
  uint64 main_id = 2;  // 待升品宠物id
  uint64 sub_id = 3;  // 材料宠物id
  repeated base.Award addition_items = 4;  // 提升概率道具
  base.Pet main_pet = 5;  // 升品后的宠物信息
}

// 战宠一键合成
message C2S_Pet_UpQuality_OneKey {
  repeated uint64 ids = 1;  // 选择的宠物id列表
  bool auto_use_add_items = 2;  // 是否自动使用提升概率道具
}

message S2C_Pet_UpQuality_OneKey {
  uint32 ret = 1;
  repeated uint64 ids = 2;  // 选择的宠物id列表
  bool auto_use_add_items = 3;  // 是否自动使用提升概率道具
  repeated base.Pet up_pets = 4;  // 升品成功后的宠物列表
  repeated base.Pet pets = 5;  // 剩余的宠物列表
  repeated base.Award costs = 6;  // 自动使用消耗的道具
}

// 战宠上阵
message C2S_Pet_Formation_Equip {
  uint32 slot = 1;  // 阵位ID(阵位id:1-出战位 2-助战位)
  uint64 id = 2;  // 战宠id(若0则表示下阵)
}

message S2C_Pet_Formation_Equip {
  uint32 ret = 1;
  uint32 slot = 2;  // 阵位ID(阵位id:1-出战位 2-助战位)
  uint64 id = 3;  // 战宠id(若0则表示下阵)
  map<uint32, base.PetFormation> slots = 4;  // 宠物阵容(阵位id:1-出战位 2-助战位)
}

// 战宠装备升级
message C2S_Pet_Equipment_UpLevel {
  uint32 pet_slot = 1;  // 阵位ID(阵位id:1-出战位 2-助战位)
  uint32 equip_slot = 2;  // 装备槽位
  repeated uint64 ids = 3;  // 消耗装备列表
  map<uint32, uint32> items = 4;  // 消耗道具列表
}

message S2C_Pet_Equipment_UpLevel {
  uint32 ret = 1;
  uint32 pet_slot = 2;  // 阵位ID(阵位id:1-出战位 2-助战位)
  uint32 equip_slot = 3;  // 装备槽位
  repeated uint64 ids = 4;  // 消耗装备列表
  map<uint32, uint32> items = 5;  // 消耗道具列表
  base.PetEquipmentFormation equip = 6;  // 升级后的装备槽位信息
}

// 战宠装备上阵
message C2S_Pet_Equipment_Equip {
  uint32 pet_slot = 1;  // 阵位ID(阵位id:1-出战位 2-助战位)
  uint32 equip_slot = 2;  // 装备槽位
  uint64 id = 3;  // 装备id(若0则表示下阵)
}

message S2C_Pet_Equipment_Equip {
  uint32 ret = 1;
  uint32 pet_slot = 2;  // 阵位ID(阵位id:1-出战位 2-助战位)
  uint32 equip_slot = 3;  // 装备槽位
  uint64 id = 4;  // 装备id(若0则表示下阵)
  map<uint32, base.PetFormation> slots = 5;  // 宠物阵容(阵位id:1-出战位 2-助战位)
}

// 战宠装备上锁
message C2S_Pet_Equipment_Lock {
  uint64 id = 1;  // 装备id
  bool lock = 2;  // true-上锁 false-下
}

message S2C_Pet_Equipment_Lock {
  uint32 ret = 1;
  uint64 id = 2;  // 装备id
  bool lock = 3;  // true-上锁 false-下
}

// 战宠收藏激活
message C2S_Pet_Compose_Active {
  repeated uint32 ids = 1;  // 收藏id
}

message S2C_Pet_Compose_Active {
  uint32 ret = 1;
  repeated uint32 ids = 2;  // 收藏id
}

// 战宠招募信息
message C2S_Pet_Recruit_GetInfo {
}

message S2C_Pet_Recruit_GetInfo {
  uint32 ret = 1;
  base.PetRecruit recruit = 2;  // 招募信息
}

// 战宠招募
message C2S_Pet_Recruit_Roll {
  uint32 cost_type = 1;  // 消耗类型（1-使用免费次数 2-使用道具 3-使用钻石 4-使用广告）
}

message S2C_Pet_Recruit_Roll {
  uint32 ret = 1;
  uint32 cost_type = 2;  // 招募类型
  base.PetRecruit recruit = 3;  // 招募信息
}

// 战宠招募选择
message C2S_Pet_Recruit_Select {
}

message S2C_Pet_Recruit_Select {
  uint32 ret = 1;
  uint32 select_id = 2;  // 获得的宠物id
  base.PetRecruit recruit = 3;  // 招募信息
  repeated base.RealAward awards = 4;
  repeated base.PrivilegeAward privilege_awards = 5;
}

// 战宠招募设置多倍
message C2S_Pet_Recruit_SetMultiple {
  bool multiple = 1;  // 是否多倍
}

message S2C_Pet_Recruit_SetMultiple {
  uint32 ret = 1;
  bool multiple = 2;  // 是否多倍
}
//--------------------------------------------------------------------

// 1.1.0-神兽秘境
message C2S_Secret_GetInfo {
}

message S2C_Secret_GetInfo {
  uint32 ret = 1;
  out_base.Secret secret = 2;  // 神兽秘境数据
}

message C2S_Secret_ChallengeBegin {
  uint32 chapter_id = 1;  // 章节ID
  uint32 stage_id = 2;  // 关卡ID
}

message S2C_Secret_ChallengeBegin {
  uint32 ret = 1;
  uint64 battle_id = 2;
}

message S2C_Secret_ChallengeFinish {
  uint32 ret = 1;
  uint32 chapter_id = 2;  // 章节ID
  uint32 stage_id = 3;  // 关卡ID
  bool is_win = 4;  // 战斗结果
  repeated base.Award awards = 5;  // 挑战胜利奖励
}

message C2S_Secret_ChallengeQuick {
  uint32 count = 1;  // 挑战次数
}

message S2C_Secret_ChallengeQuick {
  uint32 ret = 1;
  uint32 count = 2;  // 挑战次数
  repeated base.Award awards = 3;  // 挑战胜利奖励
}

message C2S_Secret_GetBossInfo {
}

message S2C_Secret_GetBossInfo {
  uint32 ret = 1;
  repeated out_base.SecretBoss boss_list = 2;  // 所有可挑战Boss
  out_base.UserSecretBoss user_boss = 3;  // 个人Boss相关数据
}

message C2S_Secret_EnterBossRoom {
  uint32 boss_id = 1;  // BossId
}

message S2C_Secret_EnterBossRoom {
  uint32 ret = 1;
  uint32 boss_id = 2;
  out_base.UserSecretBoss user_boss = 3;  // 个人Boss相关数据
}

message C2S_Secret_LeaveBossRoom {
  uint32 boss_id = 1;  // BossId
}

message S2C_Secret_LeaveBossRoom {
  uint32 ret = 1;
  uint32 boss_id = 2;
}

message C2S_Secret_GetBossRankList {
  uint32 boss_id = 1;  // BossId
}

message S2C_Secret_GetBossRankList {
  uint32 ret = 1;
  uint32 boss_id = 2;
  repeated out_base.SecretBossRank rank_units = 3;
}

message C2S_Secret_ChallengeBossBegin {
  uint32 boss_id = 1;
}

message S2C_Secret_ChallengeBossBegin {
  uint32 ret = 1;
  uint64 battle_id = 2;
}

message S2C_Secret_ChallengeBossFinish {
  uint32 ret = 1;
  uint32 boss_id = 2;
  uint64 score = 3;  // 获得积分
  out_base.UserSecretBoss user_boss = 4;  // 个人Boss相关数据
  uint32 boss_stage_level = 5;  // BOSS阶段等级
  uint32 boss_stage_progress = 6;  // 阶段进度
  uint32 boss_stage_progress_max = 7;  // 当前阶段进度最大值
  uint32 self_rank = 8;  // 个人排名
}

message C2S_Secret_ClearBossCD {
  uint32 boss_id = 1;
}

message S2C_Secret_ClearBossCD {
  uint32 ret = 1;
  uint32 boss_id = 2;
}

message S2C_Secret_BossRankAward {
  uint32 ret = 1;
  uint32 boss_id = 2;
  uint32 rank = 3;
  repeated base.Award awards = 4;
}

message S2C_Secret_BossRankNotify {
  uint32 boss_id = 1;
}

message C2S_PeakArena_GetInfo {
}

message S2C_PeakArena_GetInfo {
  uint32 ret = 1;
  out_base.UserPeakArena peak_arena = 2;
}

message C2S_PeakArena_RefreshMatch {
  uint32 refresh_type = 1;  // 刷新类型,0:表示默认优先扣除免费次数然后付费刷新,1:表示广告刷新,2:表示进入界面修改当前名次上的玩家
}

message S2C_PeakArena_RefreshMatch {
  uint32 ret = 1;
  uint32 refresh_type = 2;
  repeated base.PeakArenaMatchData matches = 3;
  uint32 use_free_match = 4;
  int64 latest_match_time = 5;
}

message C2S_PeakArena_ChallengeBegin {
  uint64 uid = 1;  // 挑战玩家 uid
  uint32 battle_reason = 2;  // 挑战原因,0:表示正常挑战匹配到的玩家,1:表示复仇挑战玩家
  uint32 id = 3;  // 复仇需要传唯一 id
}

message S2C_PeakArena_ChallengeBegin {
  uint32 ret = 1;  // 返回错误码
  uint64 uid = 2;  // 挑战玩家 uid
  uint64 battle_id = 3;  // 战斗 id
}

message S2C_PeakArena_ChallengeFinish {
  uint32 ret = 1;  // 返回错误码
  uint64 uid = 2;  // 挑战玩家 uid
  bool is_win = 3;  // 战斗结果
  uint32 rank = 4;  // 当前排名
  repeated base.Award awards = 5;  // 奖励
  repeated base.PeakArenaMatchData matches = 6;  // 刷新的对手
}

message C2S_PeakArena_GetDefendTeamDetail {
  uint64 uid = 1;
}

message S2C_PeakArena_GetDefendTeamDetail {
  uint32 ret = 1;
  uint64 uid = 2;
  out_base.PeakArenaDefenseTeamDetail defense_team_detail = 3;
}

message C2S_PeakArena_SetTeam {
  uint32 type = 1;
  repeated base.PeakArenaTeamUnit team = 2;
}

message S2C_PeakArena_SetTeam {
  uint32 ret = 1;
  uint32 type = 2;
  repeated base.PeakArenaTeamUnit team = 3;
}

message C2S_PeakArena_GetBattleRecord {
  uint32 record_type = 1;  // 0:表示获取进攻记录,1:表示获取防守记录
}

message S2C_PeakArena_GetBattleRecord {
  uint32 ret = 1;  // 返回错误码
  uint32 record_type = 2;  // 记录类型
  repeated out_base.UserPeakArenaBattleRecord records = 3;  // 战斗记录
}

message S2C_PeakArena_NotifyAttacked {
  int64 id = 1;
}

message C2S_PeakArena_GetRank {
  uint32 page = 1;  // 页数
  uint32 page_size = 2;  // 每页数量
}

message S2C_PeakArena_GetRank {
  uint32 ret = 1;  // 返回错误码
  uint32 page = 2;  // 页数
  uint32 page_size = 3;  // 每页数量
  base.PeakArenaRankUnit self_rank = 4;  // 自己的排名
  repeated base.PeakArenaRankUnit rank_units = 5;  // 玩家排行榜数据
}

message C2S_PeakArena_Sweep {
  uint64 uid = 1;
  uint32 num = 2;
}

message S2C_PeakArena_Sweep {
  uint32 ret = 1;
  uint64 uid = 2;
  uint32 num = 3;
  repeated base.Award award = 4;
}

message S2C_FlushCompetitions {
  repeated out_base.Competition competitions = 1;
}

// 任务奖励
message C2S_Competition_ObtainQuestAward {
  repeated uint32 ids = 1;
  uint32 act_id = 2;
}

message S2C_Competition_ObtainQuestAward {
  uint32 ret = 1;
  repeated uint32 ids = 2;
  uint32 act_id = 3;
  repeated base.RealAward awards = 4;
}

// 积分奖励
message C2S_Competition_ObtainScoreAward {
  uint32 act_id = 1;
}

message S2C_Competition_ObtainScoreAward {
  uint32 ret = 1;
  uint32 act_id = 2;
  uint32 awarded_score_id = 3;
  repeated base.RealAward awards = 4;
}

message S2C_FlushPeakArenaActivity {
  base.DynamicActivityInfo activity_info = 1;  // 活动信息
}

message C2S_Pack_Buy {
  uint32 id = 1;  // 礼包ID
  uint32 cnt = 2;  // 购买次数
}
message S2C_Pack_Buy {
  uint32 ret = 1;
  uint32 id = 2;
  uint32 cnt = 3;
  repeated base.Award awards = 4;
}

//-------------------------1.2.0-节庆活动------------------------------
// 获取活动信息
message C2S_FestivalActivity_GetInfo {
}
message S2C_FestivalActivity_GetInfo {
  uint32 ret = 1;
  out_base.FestivalActivityInfo activity_info = 2;  // 活动信息
  uint32 stage_id = 3;  // 当前关卡(层数)
  repeated out_base.FestivalActivityRoundGrids rounds = 4;  // 当前关卡的圈信息
  repeated uint32 award_quests = 5;  // 已领取的任务
}

// 关卡挑战
message C2S_FestivalActivity_StageChallenge {
  uint32 stage_id = 1;  // 关卡id(层数)
  uint32 num = 2;  // 挑战次数
}

message S2C_FestivalActivity_StageChallenge {
  uint32 ret = 1;
  uint32 stage_id = 2;  // 关卡id(层数)
  uint32 num = 3;  // 挑战次数(实际)
  repeated out_base.FestivalActivityRoundResults round_results = 4;  // 每次挑战的圈结果
  repeated base.Award done_awards = 5;  // 通关奖励
}

// 进入下一关
message C2S_FestivalActivity_StageEnd {
  uint32 stage_id = 1;  // 关卡id(层数)
}

message S2C_FestivalActivity_StageEnd {
  uint32 ret = 1;
  uint32 stage_id = 2;  // 关卡id(层数)
  uint32 next_stage_id = 3;  // 下一关卡id
  repeated out_base.FestivalActivityRoundGrids next_stage_rounds = 4;  // 下一关卡的圈信息
}

// 领取任务奖励
message C2S_FestivalActivity_QuestAward {
  repeated uint32 quest_ids = 1;  // 任务id
}

message S2C_FestivalActivity_QuestAward {
  uint32 ret = 1;
  repeated uint32 quest_ids = 2;  // 任务id
  repeated base.Award awards = 3;  // 奖励
}

// 活动信息更新推送
message S2C_FestivalActivity_NoticeInfo {
  uint32 ret = 1;
  out_base.FestivalActivityInfo activity_info = 2;  // 活动信息
}
//--------------------------------------------------------------------

//-------------------------1.2.0-公会-红包------------------------------
// 获取公会红包信息
message C2S_Guild_RedPacket_GetInfo {
}
message S2C_Guild_RedPacket_GetInfo {
  uint32 ret = 1;
  repeated base.GuildRedPacketData red_packets = 2;  // 公会中发放的红包列表
  out_base.UserGuildRedPacket user_red_packet = 3;  // 玩家红包信息
}

// 发送红包
message C2S_Guild_RedPacket_Send {
  uint32 base_id = 1;  // 红包id
}

message S2C_Guild_RedPacket_Send {
  uint32 ret = 1;
  uint32 base_id = 2;
  repeated base.GuildRedPacketData red_packets = 3;  // 发送成功后的红包列表
  uint64 sender_id = 4;  // 发送者id
}

// 拾取红包
message C2S_Guild_RedPacket_Pick {
  uint64 id = 1;  // 红包唯一id
}

message S2C_Guild_RedPacket_Pick {
  uint32 ret = 1;
  uint64 id = 2;
  out_base.UserGuildRedPacket user_red_packet = 3;  // 玩家红包信息
}

// 开启红包
message C2S_Guild_RedPacket_Open {
  map<uint32, uint32> ids = 1;  // 红包id列表（key：baseid value：数量）
}

message S2C_Guild_RedPacket_Open {
  uint32 ret = 1;
  map<uint32, uint32> ids = 2;  // 红包id列表（key：baseid value：数量）
  out_base.UserGuildRedPacket user_red_packet = 3;  // 玩家红包信息
  repeated base.Award awards = 4;  // 开启红包获得的奖励
}
//--------------------------------------------------------------------

message C2S_Slg_Enter {
}

message S2C_Slg_Enter {
  uint32 ret = 1;
  out_base.SlgMainCity main_city = 2;
  repeated out_base.SlgBarrack barracks = 3;   // 兵营
  base.SlgSupply supply = 4;   // 补给站
  repeated base.SlgUserTeam teams = 5;   // 队伍
  repeated base.SlgMonster monsters = 6;   // 个人野怪
  base.SlgGuild guild = 7;   // 公会玩法数据
  repeated base.SlgMapUserShow show_data = 8;   // 地图展示数据
  uint32 challenged_boss_level = 9;   // 已挑战得组队boss等级
  uint32 max_monster_level = 10;  // 个人野怪最高等级
  uint64 max_team_authority = 11;  // 最大队伍统御
  uint32 main_quest_id = 12;  // 主线任务ID
  int64 latest_move_home_time = 13;  // 最近迁城时间
  out_base.SlgCityQuest city_quest = 15;  // 攻城任务
  repeated base.SlgBossTeam boss_teams = 16;  // 正在参与的组队boss队伍信息
  uint64 max_report_id = 17;  // 最大战报id
  uint64 score = 18;  // 贡献
  bool guild_change = 19;  // 公会变化
  map<uint32, uint64> city_occupier = 20;  // 所有城池的占领者 key-城池id value-占领公会id
  map<uint32, base.SimpleGuilds> city_be_declared = 21;  // 城池被宣战公会 key-城池id value-宣战公会列表
  repeated base.SlgMoveUnit move_units = 22;  // 移动单位
}

message S2C_Slg_SyncUserScore {
  uint64 score = 1;  // 贡献
}

message C2S_Slg_UpgradeMainCity {
  uint32 level = 1;
}

message S2C_Slg_UpgradeMainCity {
  uint32 ret = 1;
  uint32 level = 2;
}

message C2S_Slg_StationMainCity {
  uint32 tp = 1;  // 驻扎胚子类型
  uint32 pos = 2;
  uint64 id = 3;
}

message S2C_Slg_StationMainCity {
  uint32 ret = 1;
  uint32 tp = 2;  // 驻扎胚子类型
  uint32 pos = 3;  // 传0代表下阵
  uint64 id = 4;
}

message C2S_Slg_UpgradeBarrack {
  uint32 tp = 1;  // 要更新哪个类型的兵营
  uint32 level = 2;
}

message S2C_Slg_UpgradeBarrack {
  uint32 ret = 1;
  uint32 tp = 2;
  uint32 level = 3;  // 升级后的兵营的等级
}

message C2S_Slg_UpgradeSupply {
  uint32 level = 1;
}

message S2C_Slg_UpgradeSupply {
  uint32 ret = 1;
  uint32 level = 2;
  base.SlgSupply supply = 3;
}

// 获得补给站奖励
message C2S_Slg_ObtainSupplyReward {
}

message S2C_Slg_ObtainSupplyReward {
  uint32 ret = 1;
  base.SlgSupply supply = 2;  // 补给站
  repeated base.Award rewards = 3;  // 获得奖励
}

message C2S_Slg_ObtainPreheatRewards {
}

message S2C_Slg_ObtainPreheatRewards {
  uint32 ret = 1;
  repeated base.Award rewards = 2;  // 获得奖励
}

message C2S_Slg_GetUserShowStatistics {
}

message S2C_Slg_GetUserShowStatistics {
  uint32 ret = 1;
  base.SlgShowStatistic kill_monster = 2;  // 击杀怪物数量
  base.SlgShowStatistic boss_team_win = 3;  // 组队boss胜利次数
  base.SlgShowStatistic attack_city = 4;  // 公会攻城数量
}

message C2S_Slg_GetUserShowRankStatistic {
}

message S2C_Slg_GetUserShowRankStatistic {
  uint32 ret = 1;
  base.SlgShowRankStatistic person_contribute = 2;  // 个人贡献
  base.SlgShowRankStatistic guild_contribute = 3;  // 公会贡献
  base.SlgShowRankStatistic final_contribute = 4;  // 最终龙堡共享
}

message C2S_Slg_ObtainShowRewards {
}

message S2C_Slg_ObtainShowRewards {
  uint32 ret = 1;
  repeated base.Award rewards = 2;  // 获得奖励
}

// 永恒战场 - 组队boss 创建队伍
message C2S_Slg_BossCreateTeam {
  uint32 boss_id = 1;  // 要挑战的bossId
  repeated base.Point move_path = 3;  // 行军路径
  int64 supply_troop = 4;  // 补给或返还兵力
  uint32 team_index = 5;  // 队伍索引
  repeated base.SlgUserTeam teams = 6;  // 攻击队伍阵容及兵种兵力
}

message S2C_Slg_BossCreateTeam {
  uint32 ret = 1;
  uint32 boss_id = 2;
  repeated base.Point move_path = 4;  // 行军路径
  base.SlgBossTeam team = 5;  // 创建得队伍信息
  int64 supply_troop = 6;  // 补给或返还兵力
  uint32 team_index = 7;  // 队伍索引
}

// 组队boss - 加入队伍
message C2S_Slg_BossJoinTeam {
  uint64 team_id = 1;  // 队伍id
  repeated base.SlgUserTeam teams = 2;  // 攻击队伍阵容及兵种兵力
  repeated base.Point move_path = 3;  // 行军路径
  int64 supply_troop = 4;  // 补给或返还兵力
  uint32 team_index = 5;  // 队伍索引
}

message S2C_Slg_BossJoinTeam {
  uint32 ret = 1;
  uint64 team_id = 2;
  repeated base.Point move_path = 4;  // 行军路径
  base.SlgBossTeam team = 5;
  int64 supply_troop = 6;  // 补给或返还兵力
  uint32 team_index = 7;  // 队伍索引
}

// 组队boss - 踢出队伍
message C2S_Slg_BossTeamKickOut {
  uint64 team_id = 1;
  uint64 user_id = 2;  // 要踢的玩家id
}

message S2C_Slg_BossTeamKickOut {
  uint32 ret = 1;
  uint64 team_id = 2;
  uint64 user_id = 3;
}

message C2S_Slg_BossTransferLeader {
  uint64 team_id = 1;
  uint64 user_id = 2;  // 要转让的玩家id
}

message S2C_Slg_BossTransferLeader {
  uint32 ret = 1;
  uint64 team_id = 2;
  uint64 user_id = 3;  // 要转让的玩家id
}

message C2S_Slg_BossLeave {
  uint64 team_id = 1;
  bool is_dismiss = 2;  // 是否解散
}

message S2C_Slg_BossLeave {
  uint32 ret = 1;
  uint64 team_id = 2;
  bool is_dismissed = 3;  // 是否解散
}

message C2S_Slg_BossTeamList {
  map<uint32, int64> boss_ids = 1;  // key=>boss_id value=>行军时长
  uint64 team_id = 2;  // 需要查看的队伍id
}

message S2C_Slg_BossTeamList {
  uint32 ret = 1;
  map<uint32, int64> boss_ids = 2;  // key=>boss_id value=>行军时长
  uint64 team_id = 3;  // 需要查看的队伍id
  repeated base.SlgBossTeam teams = 4;
}

message C2S_Slg_BossTeamInfo {
  repeated uint64 team_ids = 1;
}

message S2C_Slg_BossTeamInfo {
  uint32 ret = 1;
  repeated uint64 team_ids = 2;
  repeated base.SlgBossTeam teams = 3;
}

message S2C_Slg_BossUserStateNotify {
  uint64 team_id = 1;
  uint64 user_id = 2;  // 离开的玩家id(可以是自己)
  uint32 tp = 3;  // 操作类型 1：通知别人他是主动离开 2：被踢出队伍 3:队伍解散 4: 转让队长
  uint64 new_leader_id = 4;  // 转让队长时的新队长
  repeated base.SlgBossTeamUser robot_users = 5;  // 机器人数据更新
}

message S2C_Slg_BossTeamJoinNotify {
  uint64 team_id = 1;  // 要操作的队伍id
  base.SlgBossTeamUser join_user = 2;  // 加入的玩家
}

message C2S_Slg_BossDismissTeam {
  uint64 team_id = 1;
}

message S2C_Slg_BossDismissTeam {
  uint32 ret = 1;
  uint64 team_id = 2;
}

// 组队boss - 战斗开始推送
message S2C_Slg_BossBattleStartNotify {
  uint64 team_id = 1;
  base.SlgBattleReport report = 2;  // 战报
  uint32 boss_id = 3;
}

// 组队boss - 战斗完成推送
message S2C_Slg_BossBattleFinishNotify {
  uint64 team_id = 1;
  base.SlgBattleResult result = 2;
  uint32 boss_id = 3;
  uint32 challenged_boss_level = 4;  // 已挑战得组队boss等级
}

// 组队boss - 快速加入队伍
message C2S_Slg_BossQuickJoinTeam {
  uint32 boss_id = 1;  // 要挑战的bossId
  repeated base.Point move_path = 3;  // 行军路径
  int64 supply_troop = 4;  // 补给或返还兵力
  uint32 team_index = 5;  // 队伍索引
  repeated base.SlgUserTeam teams = 6;  // 攻击队伍阵容及兵种兵力
}

message S2C_Slg_BossQuickJoinTeam {
  uint32 ret = 1;
  uint32 boss_id = 2;
  repeated base.Point move_path = 4;  // 行军路径
  base.SlgBossTeam team = 5;
  int64 supply_troop = 6;  // 补给或返还兵力
  uint32 team_index = 7;  // 队伍索引
}

// 组队boss - 立即到达
message C2S_Slg_BossTeamInstantArrival {
  uint64 team_id = 1;
}

message S2C_Slg_BossTeamInstantArrival {
  uint32 ret = 1;
  uint64 team_id = 2;
}

message S2C_Slg_BossTeamInstantArrivalNotify {
  uint64 team_id = 1;
  string instant_arrival_op_name = 2;  // 立即到达操作者名字
}

//--------------------------------------------------------------------
message C2S_Slg_GetReport {
}
message S2C_Slg_GetReport {
  uint32 ret = 1;
  repeated base.SlgBattleReport reports = 2;  // 需要前端根据时间排序
  bool is_final = 3;  // 是否是最后一条协议(因数据量可能会大)
}

message C2S_Slg_GetRank {
  uint32 id = 1;  // 1-个人榜 2-公会内部榜 3-公会榜 4-最终龙堡榜
  uint32 city_id = 2;
  uint32 limit = 3;  // 0-全部拉取 非0-拉取前N个
}
message S2C_Slg_GetRank {
  uint32 ret = 1;
  uint32 id = 2;
  uint32 city_id = 3;
  uint32 limit = 4;
  uint32 self_rank = 5;
  repeated out_base.RankUnit rank_units = 6;
  out_base.RankUnit self_unit = 7;
}

message S2C_Slg_CityNtf {
  repeated base.SlgMapCityShow city_show = 1;  // 城池数据（包含战车）
}

message S2C_Slg_CityBattleEnd {
  base.SlgBattleResult result = 1;
}

message C2S_Slg_SimulateBattle {
  uint64 atk_authority = 1;   // 攻击方统御
  uint64 atk_troops = 2;   // 攻击方兵力
  uint32 atk_troop_type = 3;   // 攻击方兵种
  repeated uint32 atk_characters = 4;   // 攻击方佣兵
  uint32 atk_num = 5;   // 攻击方人数
  uint64 def_authority = 6;   // 防守方统御
  uint64 def_troops = 7;   // 防守方兵力
  uint32 def_troop_type = 8;   // 防守方兵种
  repeated uint32 def_characters = 9;   // 防守方佣兵
  uint32 def_num = 10;  // 防守方人数
  uint32 battle_tp = 11;  // 战斗类型 参考enums.SLG_BATTLE_TYPE
  uint32 def_monster_team = 12;  // 防守方怪物id 用于攻城
}
message S2C_Slg_SimulateBattle {
  uint32 ret = 1;
  base.SlgBattleReport report = 2;
}

message C2S_Slg_CityMarch {
  uint32 city_id = 1;  // 城池id
  repeated base.SlgUserTeam teams = 2;  // 攻击队伍阵容及兵种兵力（包括编辑队伍）
  repeated base.Point move_path = 3;  // 战车行军路径
  int64 supply_troop = 4;  // 补给或返还兵力
  repeated base.Point city_move_path = 5;  // 城池行军路径
  uint32 team_index = 6;  // 出征队伍索引
  uint32 march_tp = 7;  // 出征类型 0-攻城 1-守城
}

message S2C_Slg_CityMarch {
  uint32 ret = 1;
  uint32 city_id = 3;
  base.SlgSimpleMove move = 5;  // 行军数据
  uint32 team_index = 6;  // 出征队伍索引
  uint32 march_tp = 7;  // 出征类型 0-攻城 1-守城
}

message C2S_Slg_CityCancelMove {
  uint32 team_index = 1;  // 队伍索引
}
message S2C_Slg_CityCancelMove {
  uint32 ret = 1;
  uint32 team_index = 2;  // 队伍索引
  base.SlgSimpleMove move = 3;  // 行军数据
}

message C2S_Slg_GetCityGather {
  uint32 city_id = 1;
  uint32 car_id = 2;
}
message S2C_Slg_GetCityGather {
  uint32 ret = 1;
  repeated base.SlgUserTeam teams = 2;
  repeated base.SimpleUser users = 3;
  map<uint64, uint32> guild_title = 4;  // 公会职位
  uint32 city_id = 5;
  uint32 car_id = 6;
}

message C2S_Slg_GetCityDefInfo {
  uint32 city_id = 1;
}
message S2C_Slg_GetCityDefInfo {
  uint32 ret = 1;
  uint32 city_id = 2;
  repeated base.SlgBattleTeam def_teams = 3;  // 防守队伍
  repeated base.SimpleUser users = 4;
}

message C2S_Slg_CityDeclare {
  uint32 city_id = 1;
  uint32 tp = 2;  // 0-宣战 1-取消宣战
}
message S2C_Slg_CityDeclare {
  uint32 ret = 1;
  uint32 city_id = 2;
  uint32 tp = 3;
}

message S2C_Slg_CityDeclareNtf {
  repeated uint32 cities = 1;  // 已宣战城池 全量
  uint64 guild_id = 2;  // 宣战公会id
}

message S2C_Slg_CityBeDeclaredNtf {
  map<uint32, base.SimpleGuilds> city_be_declared = 1;  // 城池被宣战公会 key-城池id value-宣战公会列表 全量
}

message S2C_Slg_CityMarchNtf {
  uint32 city_id = 1;
  uint32 num = 2;  // 全量
}

message C2S_Slg_BuildCity {
  uint32 city_id = 1;
  uint64 num = 2;  // 捐赠数量
}
message S2C_Slg_BuildCity {
  uint32 ret = 1;
  uint32 city_id = 2;
  base.SlgCityBuild build = 3;
  uint64 num = 4;
}

message C2S_Slg_GetCityBuildInfo {
  uint32 city_id = 1;
}
message S2C_Slg_GetCityBuildInfo {
  uint32 ret = 1;
  uint32 city_id = 2;
  repeated base.SlgCityBuildLog logs = 3;  // 捐赠日志
  base.SlgCityBuild build = 4;
}

message S2C_Slg_CityBattleGuildSummaryNtf {
  uint64 guild_id = 1;
  repeated base.SlgGuildCityBattle cities = 2;  // 城池战斗结果
  uint64 score = 3;  // 个人贡献
  map<uint32, uint64> score_addition = 4;  // 州贡献加成
}

message C2S_Slg_GetInfoOnCityBattleEnd {
}
message S2C_Slg_GetInfoOnCityBattleEnd {
  uint32 ret = 1;
  map<uint32, uint64> city_occupier = 2;  // 城池占领者 全量
  map<uint32, uint64> score_addition = 3;  // 本州贡献加成 key:州id value:加成万分比
  map<uint32, uint64> res_addition = 4;  // 本州资源加成 key:州id value:加成万分比
}

message C2S_Slg_GetCityShowData {
  repeated uint32 city_id = 1;
}
message S2C_Slg_GetCityShowData {
  uint32 ret = 1;
  repeated base.SlgMapCitySimpleShow shows = 2;
}

message C2S_Slg_GetCityExtraShowData {
  repeated uint32 city_id = 1;  // 城池id 不超过10个
  uint32 tp = 2;  // 透传参数
}
message S2C_Slg_GetCityExtraShowData {
  uint32 ret = 1;
  uint32 tp = 2;
  map<uint32, string> declaration = 3;  // 城池宣言
}

message C2S_Slg_EditUserTeam {
  repeated base.SlgUserTeam teams = 1;  // 攻击队伍阵容及兵种兵力
}

message S2C_Slg_EditUserTeam {
  uint32 ret = 1;
  repeated uint32 team_index = 2;  // 出征队伍索引
}

message C2S_Slg_PVEMarch {
  uint32 monster_id = 1;  // 怪物id
  repeated base.Point move_path = 3;  // 行军路径
  int64 supply_troop = 4;  // 补给或返还兵力
  repeated uint32 team_indexs = 5;  // 出征队伍索引
  repeated base.SlgUserTeam teams = 6;  // 攻击队伍阵容及兵种兵力（包括编辑队伍）
}

message S2C_Slg_PVEMarch {
  uint32 ret = 1;
  uint32 monster_id = 2;
  base.SlgMonster monster = 3;
  repeated base.SlgSimpleMove move = 4;  // 行军数据
  repeated uint32 team_indexs = 5;  // 出征队伍索引
}

message S2C_Slg_PVEBattleReport {
  base.SlgBattleResult result = 1;
  base.SlgBattleReport report = 2;  // 战报
}

message S2C_Slg_PVEBattleResult {
  base.SlgBattleResult result = 1;
  base.SlgMonster monster = 2;
}

message C2S_Slg_GetMonsterInfo {
  base.Point target_point = 1;  // 目标位置
  uint32 monster_id = 2;  // 怪物id
}

message S2C_Slg_GetMonsterInfo {
  uint32 ret = 1;
  base.Point target_point = 2;
  uint32 monster_id = 3;
  base.SlgMonster monster = 4;
}

message C2S_Slg_PVEWithdraw {
  uint32 index = 1;  // 队伍索引
}

message S2C_Slg_PVEWithdraw {
  uint32 ret = 1;
  uint32 index = 2;  // 队伍索引
  base.SlgUserTeam team = 3;
}

message S2C_Slg_SyncUserTeam {
  repeated base.SlgUserTeam teams = 1;
}

message S2C_Slg_SyncMainQuest {
  base.SlgMainQuest main_quest = 1;
}

message C2S_Slg_MainQuestAward {
  uint32 id = 1;
}

message S2C_Slg_MainQuestAward {
  uint32 ret = 1;
  uint32 id = 2;
  repeated base.Award awards = 3;
  uint32 new_id = 4;
}

message C2S_Slg_CityQuestAward {
  repeated uint32 ids = 1;
}

message S2C_Slg_CityQuestAward {
  uint32 ret = 1;
  repeated uint32 ids = 2;
  repeated base.Award awards = 3;
}

message C2S_Slg_GetBattlePassInfo {
}

message S2C_Slg_GetBattlePassInfo {
  uint32 ret = 1;
  out_base.SlgBattlePass battle_pass = 2;
}

message C2S_Slg_BattlePassAwardQuest {
  repeated uint32 ids = 1;
}

message S2C_Slg_BattlePassAwardQuest {
  uint32 ret = 1;
  repeated uint32 ids = 2;
  repeated base.Award awards = 3;
  uint32 lv = 4;
}

message S2C_Slg_BattlePassBuyNtf {
  uint32 unlock_lv = 1;  // 0-未解锁 1-解锁高级 2-解锁超级
  uint32 lv = 2;  // 解锁超级战令会导致战令升级
}

message C2S_Slg_BattlePassAwardLv {
}

message S2C_Slg_BattlePassAwardLv {
  uint32 ret = 1;
  uint32 low_awarded_lv = 2;  // 普通战令已领取的最高等级
  uint32 mid_awarded_lv = 3;  // 高级战令已领取的最高等级
  uint32 extra_awarded_lv = 4;  // 额外奖励已领取的最高等级
  repeated base.Award awards = 5;
}

message C2S_Slg_BattlePassBuyLv {
  uint32 buy_lv = 1;  // 购买几级
}

message S2C_Slg_BattlePassBuyLv {
  uint32 ret = 1;
  uint32 lv = 2;  // 购买后等级
}

message C2S_Slg_UseSupplyToken {
  uint32 item_id = 1;
  uint64 size = 2;  // 要使用的数量
}

message S2C_Slg_UseSupplyToken {
  uint32 ret = 1;
  uint32 item_id = 2;
  uint64 size = 3;  // 要使用的数量
  repeated base.Award awards = 4;
}

message S2C_Slg_NotifyActivity {
  base.DynamicActivityInfo activity_info = 1;  // 活动信息
  bool is_new = 2;  // 是否新活动
}

message C2S_Slg_CancelMove {
  uint64 id = 1;  // 行军唯一id
}

message S2C_Slg_CancelMove {
  uint32 ret = 1;
  uint64 id = 2;  // 行军唯一id
  base.SlgSimpleMove move = 3;  // 行军数据
}

message C2S_Slg_BossMonsterTeam {
  uint32 boss_id = 1;
}

message S2C_Slg_BossMonsterTeam {
  uint32 ret = 1;
  uint32 boss_id = 2;
  base.SlgBattleTeam team = 3;
}

message C2S_Slg_MoveHome {
  repeated base.Point path = 1;  // 迁城的目的地
}

message S2C_Slg_MoveHome {
  uint32 ret = 1;
  repeated base.Point path = 2;
  int64 latest_move_home_time = 3;  // 最近迁城时间
}

message C2S_Slg_GetMapShowData {
  base.Point center = 1;  // 中心点
}

message S2C_Slg_GetMapShowData {
  uint32 ret = 1;
  base.Point center = 2;  // 中心点
  repeated base.SlgMapUserShow user_show = 3;
  repeated base.SlgMapCityShow city_show = 4;  // 城池数据（包含战车）
  repeated base.SlgMapBossShow boss_show = 5;  // 组队boss数据
  map<uint32, uint64> boss_authorities = 6;  // 组队boss统御
}

message C2S_Slg_GetMapSimpleShowData {
}

message S2C_Slg_GetMapSimpleShowData {
  uint32 ret = 1;
  repeated base.SlgMapSimpleUserShow simple_user_show = 2;
  repeated base.SlgMapSimpleCityShow simple_city_show = 3;
}

message S2C_Slg_FlushBattleResults {
  repeated base.SlgBattleResult results = 1;
  repeated base.SlgGuildCityBattle cities = 2;  // 最近城池战斗结果汇总
  uint64 score = 3;  // 最近个人攻城贡献总和
}

message C2S_Slg_ObtainBattleReward {
  uint64 id = 1;
}

message S2C_Slg_ObtainBattleReward {
  uint32 ret = 1;
  uint64 id = 2;
  repeated base.Award awards = 3;
}

message S2C_Slg_NotifyMoveUnit {
  base.SlgMoveUnit move = 1;
}

message C2S_Slg_GetUserDetail {
  uint64 uid = 1;
}

message S2C_Slg_GetUserDetail {
  uint32 ret = 1;
  base.SlgUserDetail detail = 2;
}

message C2S_Slg_Leave {
}

message S2C_Slg_Leave {
  uint32 ret = 1;
}

message S2C_Slg_NotifyCheckpointQuest {
  uint32 checkpoint_id = 1;
  uint32 count = 2;
}

message S2C_Slg_SyncCityQuestProgress {
  map<uint32, uint32> city_progress = 1;  // 攻城任务进度
}

message S2C_Slg_NotifyMapShow {
  base.SlgMapUserShow user_show = 1;
  bool deleted = 2;  // 是否删除,删除:true, 添加:false
}

message C2S_Slg_ObtainSupplyRewardsByAdv {
}

message S2C_Slg_ObtainSupplyRewardsByAdv {
  uint32 ret = 1;
  repeated base.Award awards = 2;
}

message C2S_Slg_ObtainQuestReward {
  uint32 id = 1;  // 领取任务id,配置表id
}

message S2C_Slg_ObtainQuestReward {
  uint32 ret = 1;
  uint32 id = 2;
  repeated base.Award awards = 3;
}

message C2S_Slg_OnekeyObtainRewards {
  uint32 type = 1;  // 1-个人任务 2-公会任务
}

message S2C_Slg_OnekeyObtainRewards {
  uint32 ret = 1;
  uint32 type = 2;
  repeated uint32 ids = 3;
  repeated base.Award awards = 4;
}

message C2S_Slg_MoveTargetRightNow {
  uint64 move_id = 1;
  int64 end_time = 2;
}

message S2C_Slg_MoveTargetRightNow {
  uint32 ret = 1;
  uint64 move_id = 2;
  int64 end_time = 3;
}

message S2C_Slg_DeleteMoveUnit {
  uint64 move_id = 1;
}

message C2S_WishPool_GetInfo {
  uint32 pool_type = 1;  // 活动类型（1:钓鱼、2:老虎机、3:弹弹乐）
}

message S2C_WishPool_GetInfo {
  uint32 ret = 1;
  base.WishPoolInfo info = 2;  // 活动信息
  out_base.WishPool wish_pool = 3;  // 活动数据
}

message S2C_WishPool_Sync {
  uint32 pool_type = 1;
  out_base.WishPoolDaily daily = 2;
}

// 领每日免费奖励
message C2S_WishPool_DailyAward {
  uint32 pool_type = 1;
}

message S2C_WishPool_DailyAward {
  uint32 ret = 1;
  repeated base.Award awards = 2;
  uint32 pool_type = 3;
}

// 抽奖
message C2S_WishPool_Draw {
  uint32 pool_type = 1;
}

message S2C_WishPool_Draw {
  uint32 ret = 1;
  repeated base.Award awards = 2;
  repeated uint32 drop_id = 3;
  uint32 pool_type = 4;
  uint32 pop_type = 5;  // 弹弹球类型（1:正常/2:双倍/3:分裂）
  map<uint32, uint32> guarantee_times = 6;  // 保底次数
}

// 兑换
message C2S_WishPool_Exchange {
  uint32 pool_type = 1;
}

message S2C_WishPool_Exchange {
  uint32 ret = 1;
  repeated base.Award awards = 2;
  uint32 pool_type = 3;
}

message C2S_WishPool_GetResource {
  uint32 type = 1;  // 资源类型 1-免费 2-充值
  uint32 pool_type = 2;
}

message S2C_WishPool_GetResource {
  uint32 ret = 1;
  uint32 type = 2;
  repeated base.Award awards = 3;
  uint32 pool_type = 4;
}

// 哥布林 - 穿戴时装
message C2S_Goblin_WearDress {
  uint32 dress_id = 1;
}

message S2C_Goblin_WearDress {
  uint32 ret = 1;
  uint32 dress_id = 2;
}

message C2S_Gacha_GetInfo {
}

message S2C_Gacha_GetInfo {
  uint32 ret = 1;
  base.GachaInfo gacha_info = 2;  // 活动数据
  out_base.UserGacha user_gacha = 3;  // 用户数据
}

// 领取任务奖励
message C2S_Gacha_QuestAward {
  repeated uint32 quest_ids = 1;
}

message S2C_Gacha_QuestAward {
  uint32 ret = 1;
  repeated uint32 quest_ids = 2;
  repeated base.Award awards = 3;
}

// 抽奖
message C2S_Gacha_Draw {
  uint32 num = 1;  // 抽奖次数
}

message S2C_Gacha_Draw {
  uint32 ret = 1;
  uint32 num = 2;
  uint32 lucky_value = 4;  // 幸运值
  uint32 round = 5;  // 轮次
  repeated uint32 reward_ids = 6;  // 已经抽到的奖励
}

// 重置奖池
message C2S_Gacha_Reset {
}

message S2C_Gacha_Reset {
  uint32 ret = 1;
  out_base.UserGacha user_gacha = 2;  // 用户数据
}

// 选择奖品
message C2S_Gacha_ChoseAward {
  uint32 award_id = 1;  // 奖励id
  uint32 index = 2;  // drop index
}

message S2C_Gacha_ChoseAward {
  uint32 ret = 1;
  uint32 award_id = 2;  // 奖励id
  uint32 index = 3;  // drop index
}

// 累抽奖励
message C2S_Gacha_AccumulatedAward {
  repeated uint32 ids = 1;  // 奖励id
}

message S2C_Gacha_AccumulatedAward {
  uint32 ret = 1;
  repeated uint32 ids = 2;  // 奖励id
  repeated base.Award awards = 3;
}

message C2S_CirculateAct_GetInfo {
}
message S2C_CirculateAct_GetInfo {
  uint32 ret = 1;
  repeated out_base.CirculateAct circulate_acts = 2;
}

message C2S_CirculateAct_QuestAward {
  uint32 act_id = 1;
  repeated uint32 quest_ids = 2;
}
message S2C_CirculateAct_QuestAward {
  uint32 ret = 1;
  uint32 act_id = 2;
  repeated uint32 quest_ids = 3;
  repeated base.Award awards = 4;
  out_base.CirculateAct act = 5;
}

message C2S_Alchemy_GetInfo {
}

message S2C_Alchemy_GetInfo {
  uint32 ret = 1;
  uint64 guild_point = 2;   // 公会积分
  repeated uint32 awarded_guild_point_ids = 3;   // 已领取的公会积分奖励
  repeated uint64 awarded_chest_ids = 4;   // 已领取宝箱id
  repeated uint64 sids = 5;   // 本区服务器列表
  map<uint32, uint32> potion_compose_times = 6;   // 药剂兑换次数 key=>alchemy_potion_info得id value=>次数
  uint32 build_progress = 7;   // 炼金进度
  repeated out_base.AlchemyAwardLog logs = 8;   // 大奖日志
  repeated uint32 awarded_quest_ids = 9;   // 已领取的任务奖励
  uint32 guild_rank = 10;  // 公会排名
}

// 获得宝箱数据
message C2S_Alchemy_GuildChests {
  uint32 tp = 1;  // 宝箱类型
}

message S2C_Alchemy_GuildChests {
  uint32 ret = 1;
  uint32 tp = 2;  // 宝箱类型
  repeated out_base.AlchemyGuildChest chests = 3;
  bool is_final = 4;  // 是否是最后一条协议(因数据量可能会大)
}

// 获得宝箱奖励
message C2S_Alchemy_ObtainChestAward {
  repeated uint64 ids = 1;  // 要领取的宝箱id
}

message S2C_Alchemy_ObtainChestAward {
  uint32 ret = 1;
  repeated uint64 ids = 2;
  repeated base.Award awards = 3;  // 获得的奖励
  uint64 guild_point = 4;  // 公会积分
  uint32 guild_rank = 5;  // 公会排名
  repeated base.Award big_awards = 6;  // 大奖
}

// 药剂合成
message C2S_Alchemy_PotionCompose {
  uint32 id = 1;  // 对应alchemy_potion_info表的id
  uint32 num = 2;  // 要兑换的次数
}

message S2C_Alchemy_PotionCompose {
  uint32 ret = 1;
  uint32 id = 2;
  uint32 num = 3;
  repeated base.Award awards = 4;
  uint32 potion_compose_times = 5;  // 该药剂兑换次数
}

// 炼金
message C2S_Alchemy_Build {
  uint32 material_id = 1;  // 对应alchemy_material_info的id
  uint64 size = 2;  // 投入的材料数量
  uint32 stone_id = 3;  // 要炼得石头id, 对应alchemy_stone_info得id
}

message S2C_Alchemy_Build {
  uint32 ret = 1;
  uint32 material_id = 2;
  uint64 size = 3;
  uint32 stone_id = 4;
  uint32 build_progress = 5;  // 进度(进度满得情况下，不能再炼金, 炼金完成的话，自动发奖，进度会重置为0)
  repeated base.Award awards = 6;
  bool is_complete = 7;  // 炼金是否完成
  uint64 guild_point = 8;  // 公会积分
  uint32 guild_rank = 9;  // 公会排名
}

message S2C_Alchemy_AwardLogNotify {
  out_base.AlchemyAwardLog log = 2;  // 大奖日志
}

message C2S_Alchemy_RequestLogs {
}

message S2C_Alchemy_RequestLogs {
  uint32 ret = 1;
  repeated out_base.AlchemyRequestLog request_logs = 2;  // 帮助日志
}

// 发布求助需求
message C2S_Alchemy_SendRequest {
  uint32 item_id = 1;  // 药剂id
}

message S2C_Alchemy_SendRequest {
  uint32 ret = 1;
  uint32 item_id = 2;
  out_base.AlchemyRequest request = 3;
}

message S2C_Alchemy_SendRequestNotify {
  out_base.AlchemyRequest request = 1;
}

// 帮助求助
message C2S_Alchemy_SupportRequest {
  uint64 id = 1;  // 求助id
}

message S2C_Alchemy_SupportRequest {
  uint32 ret = 1;
  uint64 id = 2;
  repeated base.Award awards = 3;
}

// 领取求助奖励
message C2S_Alchemy_ObtainRequestAward {
  uint64 id = 1;  // 求助id
}

message S2C_Alchemy_ObtainRequestAward {
  uint32 ret = 1;
  uint64 id = 2;
  repeated base.Award awards = 3;
}

// 求助列表
message C2S_Alchemy_RequestList {
}

message S2C_Alchemy_RequestList {
  uint32 ret = 1;
  repeated out_base.AlchemyRequest requests = 2;
}

// 玩家在线 收到帮助的通知
message S2C_Alchemy_SupportNotify {
  uint64 request_id = 1;  // 求助id
  out_base.AlchemyRequestLog log = 2;  // 求助日志
}

// 新增军团宝箱通知
message S2C_Alchemy_AppendGuildChestNotify {
  repeated out_base.AlchemyGuildChest chests = 1;  // 新增宝箱
}

// 领取公会积分奖励
message C2S_Alchemy_ObtainGuildPointAward {
  repeated uint32 ids = 1;  // 要领取的奖励id
}

message S2C_Alchemy_ObtainGuildPointAward {
  uint32 ret = 1;
  repeated uint32 ids = 2;  // 要领取的奖励id
  repeated base.Award awards = 3;  // 获得的奖励
}

// 领取任务奖励
message C2S_Alchemy_ObtainQuestAward {
  repeated uint32 ids = 1;  // 要领取的任务id
}

message S2C_Alchemy_ObtainQuestAward {
  uint32 ret = 1;
  repeated uint32 ids = 2;  // 要领取的任务id
  repeated base.Award awards = 3;  // 获得的奖励
}

// 输出炼金工坊数据
message S2C_FlushAlchemy {
  base.DynamicActivityInfo activity_info = 1;  // 活动信息
  int64 latest_request_time = 2;  // 公会内最新别人求助时间
  int64 latest_receive_support_time = 3;  // 最新的受赠时间
  repeated uint32 has_chest_award_tps = 4;  // 是否有可领取的宝箱奖励类型
  bool is_open_server_activity = 5;  // 是否开服活动
}

message C2S_Alchemy_GetSimpleInfo {
}

message S2C_Alchemy_GetSimpleInfo {
  uint32 ret = 1;
  uint64 guild_point = 2;  // 公会积分
  uint32 guild_rank = 3;
}

message S2C_Advertisement_NotifyUpdate {
  repeated base.GMAdvertisement advs = 1;
}

message S2C_Advertisement_NotifyDelete {
  repeated uint32 ids = 1;
}

// 滚屏公告
message C2S_ScrollAnnounce_GetInfo {
}

message S2C_ScrollAnnounce_GetInfo {
  uint32 ret = 1;
  repeated base.ScrollAnnounce infos = 2;
}

message S2C_ScrollAnnounce_Update {
  repeated base.ScrollAnnounceOp infos = 1;
}

message C2S_PersonalComp_GetInfo {
  uint32 comp_id = 1;
}

message S2C_PersonalComp_GetInfo {
  uint32 ret = 1;
  out_base.PersonalComp comp = 2;
}

message C2S_PersonalComp_AwardQuest {
  uint32 comp_id = 1;
  repeated uint64 quest_ids = 2;
}

message S2C_PersonalComp_AwardQuest {
  uint32 ret = 1;
  uint32 comp_id = 2;
  repeated uint64 quest_ids = 3;
  repeated base.Award awards = 4;
}

message C2S_PersonalComp_AwardScore {
  uint32 comp_id = 1;
  repeated uint64 score_ids = 2;
}

message S2C_PersonalComp_AwardScore {
  uint32 ret = 1;
  uint32 comp_id = 2;
  repeated uint64 score_ids = 3;
  repeated base.Award awards = 4;
}

message C2S_CommonAction_Trigger {
  uint32 type = 1;
  uint64 key = 2;
  uint64 value = 3;
}

message S2C_CommonAction_Trigger {
  uint32 ret = 1;
}

message C2S_GuildGvg_GetInfo {
}

message S2C_GuildGvg_GetInfo {
  uint32 ret = 1;
  base.GuildGvgGuildBase own_guild = 2;   // 己方公会信息
  base.GuildGvgGuildBase enemy_guild = 3;   // 地方公会信息
  uint32 guild_rank = 4;   // 公会排名
  uint32 total_guild_count = 5;   // 公会总数
  repeated uint64 challenged_user_ids = 6;   // 已挑战的玩家id
  repeated base.GuildGvgBattleLog battle_logs = 7;   // 战斗记录
  repeated uint64 liked_battle_log_ids = 8;   // 点赞过的战绩id
  base.GuildGvgUserBase self_base = 9;   // 自己的基础信息
  map<uint32, string> period_his_rank_path = 10;  // 期数对应的排行榜oss路径
  uint32 used_like_cnt = 11;  // 已使用的点赞次数
  bool manual_defend = 12;  // 是否手动布防
  repeated uint64 weakened_user_ids = 13;  // 已削弱的玩家id
  bool is_enemy_mirror = 14;  // 敌方是否是镜像
}

// 公会战况
message C2S_GuildGvg_GuildMatchDetail {
  uint32 tp = 1;  // 1、自己公会 2、敌方公会
}

message S2C_GuildGvg_GuildMatchDetail {
  uint32 ret = 1;
  uint32 tp = 2;
  repeated base.GuildGvgUserBase users = 3;
}

// 发起挑战
message C2S_GuildGvg_ChallengeBegin {
  uint64 user_id = 1;  // 要挑战的玩家id
}

message S2C_GuildGvg_ChallengeBegin {
  uint32 ret = 1;
  uint64 user_id = 2;
  uint64 battle_id = 3;
}

// 战斗完成
message S2C_GuildGvg_ChallengeFinish {
  uint32 ret = 1;
  uint64 user_id = 2;
  bool is_win = 3;
  base.GuildGvgUserBase self = 4;  // 自己信息
  base.GuildGvgUserBase enemy = 5;  // 敌方信息
  uint64 score = 6;  // 获得的积分
  uint64 assist_score = 7;  // 协助积分
}

// 削弱
message C2S_GuildGvg_Weaken {
  uint64 user_id = 1;  // 要削弱的玩家id
}

message S2C_GuildGvg_Weaken {
  uint32 ret = 1;
  uint64 user_id = 2;
  base.GuildGvgUserBase self = 3;  // 自己信息
  base.GuildGvgUserBase enemy = 4;  // 敌方信息
  uint64 score = 5;  // 获得的积分
}

message C2S_GuildGvg_GuildContributeRank {
}

message S2C_GuildGvg_GuildContributeRank {
  uint32 ret = 1;
  repeated base.GuildGvgContributeRankUnit users = 2;
}

message C2S_GuildGvg_GetUserBase {
  uint32 tp = 1;  // 1、自己公会 2、敌方公会
  uint64 uid = 2;
}

message S2C_GuildGvg_GetUserBase {
  uint32 ret = 1;
  uint32 tp = 2;
  uint64 uid = 3;
  base.GuildGvgUserBase user_base = 4;
}

message C2S_GuildGvg_GetBattleRecords {
}

message S2C_GuildGvg_GetBattleRecords {
  uint32 ret = 1;
  repeated base.GuildGvgBattleRecord logs = 2;
}

message S2C_GuildGvg_BattleLogNotify {
  base.GuildGvgBattleLog log = 1;
}

message C2S_GuildGvg_BattleLogLike {
  uint64 id = 1;
}

message S2C_GuildGvg_BattleLogLike {
  uint32 ret = 1;
  uint64 id = 2;  // 战斗记录id
  uint32 liked_num = 3;  // 更新下点赞数
  repeated base.Award awards = 4;
  uint32 used_like_cnt = 5;  // 已使用的点赞次数
}

message C2S_GuildGvg_GuildRank {
}

message S2C_GuildGvg_GuildRank {
  uint32 ret = 1;
  base.GuildGvgRank rank = 2;
  base.GuildGvgRankUnit self_unit = 3;
}

message C2S_GuildGvg_BattleResult {
}

message S2C_GuildGvg_BattleResult {
  uint32 ret = 1;
  repeated base.GuildGvgBattleResult results = 2;
}

message S2C_GuildGvg_BattleDefendNotify {
  uint64 battle_record_id = 1;  // 相关的战报id
}

message C2S_GuildGvg_SetDefendFormation {
  bool manual = 1;  // true-手动布阵 false-自动布阵
}

message S2C_GuildGvg_SetDefendFormation {
  uint32 ret = 1;
  bool manual = 2;  // true-手动布阵 false-自动布阵
}

message S2C_GuildGvg_GuildScoreNotify {
  uint64 mine_guild_score = 1;  // 我方公会积分
  uint64 enemy_guild_score = 2;  // 敌方公会积分
  uint32 change_user_tp = 3;  // 变化的玩家类型 1-自己 2-敌方
  base.GuildGvgUserBase change_user_base = 4;  // 变化的玩家信息
}

message C2S_GuildGvg_DynamicGuildRank {
}

message S2C_GuildGvg_DynamicGuildRank {
  uint32 ret = 1;
  base.GuildGvgRank rank = 2;
  base.GuildGvgRankUnit self_unit = 3;
}

message S2C_GuildGvg_NotifyActivity {
  base.DynamicActivityInfo activity_info = 1;  // 活动信息
}

message C2S_GuildGvg_Leave {
}

message S2C_GuildGvg_Leave {
  uint32 ret = 1;
}

message C2S_GuildGvg_PreGuildContributeRank {
  uint32 round = 1;
}

message S2C_GuildGvg_PreGuildContributeRank {
  uint32 ret = 1;
  uint32 round = 2;
  repeated base.GuildGvgContributeRankUnit users = 3;
}

message C2S_PiggyBank_ObtainAward {
}

message S2C_PiggyBank_ObtainAward {
  uint32 ret = 1;
  repeated base.Award awards = 2;
  uint64 progress = 3;  // 进度
}

message S2C_PiggyBank_NotifyRechargeSuccess {
  uint64 progress = 1;  // 进度
  repeated uint32 recharges = 2;  // 已付费档位
}

message C2S_Slg_SetCityDeclaration {
  uint32 city_id = 1;
  string declaration = 2;  // 传空字符串表示删除
  bool is_send_mail = 3;  // 是否发送邮件
}

message S2C_Slg_SetCityDeclaration {
  uint32 ret = 1;
  uint32 city_id = 2;
  string declaration = 3;
}

message C2S_Guild_SendMail {
  string content = 1;  // 邮件内容
}

message S2C_Guild_SendMail {
  uint32 ret = 1;
  string content = 2;
  string name = 3;  // 发件人名字
}

// 删除好友聊天记录
message C2S_Chat_DeleteFriendChat {
  uint64 uid = 1;
}

message S2C_Chat_DeleteFriendChat {
  uint32 ret = 1;
  uint64 uid = 2;
}

// 设置最后阅读时间戳
message C2S_Chat_SetLatestReadTm {
  uint32 chat_type = 1;  // 频道
  uint64 uid = 2;  // 玩家id(私聊时需要该值)
}

message S2C_Chat_SetLatestReadTm {
  uint32 ret = 1;
  uint32 chat_type = 2;  // 频道
  uint64 uid = 3;  // 玩家id
  int64 latest_tm = 4;  // 最后阅读时间戳
}

message S2C_FlushGuildGvg {
  base.DynamicActivityInfo info = 1;   // 活动信息
  uint32 used_challenge_cnt = 2;   // 已使用的挑战次数
  uint32 period = 3;   // 期数
  bool is_guild_join_gvg = 4;   // 公会是否参与公会战役
  bool is_user_join_gvg = 5;   // 玩家是否参与公会战役
  uint32 used_like_cnt = 6;   // 已使用的点赞次数
  bool has_like_battle_log = 7;   // 是否有可点赞的的战绩
  uint64 latest_defend_record_id = 8;   // 最新的自己的防守战报id
  repeated uint64 sids = 9;   // 匹配组内的服务器列表
  uint32 total_guild_count = 10;  // 公会总数
  map<uint32, string> period_his_rank_path = 11;  // 期数对应的排行榜oss路径
  uint32 guild_rank = 12;  // 公会排名
}

// 获取公会列表
message C2S_Guild_GetGuildList {
}

message S2C_Guild_GetGuildList {
  uint32 ret = 1;
  repeated base.SimpleGuild guilds = 2;  // 公会列表
}

// 钻石购买
message C2S_PiggyBank_DiamondBuy {
}

message S2C_PiggyBank_DiamondBuy {
  uint32 ret = 1;
  repeated base.Award awards = 2;
  uint64 progress = 3;  // 进度
  repeated uint32 recharges = 4;  // 已付费档位
}

// 1.4.0-宝石棋盘
message S2C_FlushGemBoard {
  repeated out_base.GemBoard boards = 1;  // 棋盘数据
  uint32 max_gem_total_lv = 2;  // 历史最大镶嵌宝石总等级
}

message C2S_GemBoard_UnlockGrid {
  map<uint32, base.Uint32Slice> board_pos = 1;  // key-棋盘ID value-方块组中心坐标列表
  bool one_key = 2;  // 是否一键操作
}
message S2C_GemBoard_UnlockGrid {
  uint32 ret = 1;
  map<uint32, base.Uint32Slice> board_pos = 2;
  bool one_key = 3;
}

message C2S_GemBoard_Save {
  map<uint32, out_base.GemBoardEquip> boards = 1;  // key-棋盘ID
  bool one_key = 2;  // 是否一键操作
}
message S2C_GemBoard_Save {
  uint32 ret = 1;
  map<uint32, out_base.GemBoardEquip> boards = 2;
  uint32 max_gem_total_lv = 3;  // 历史最大镶嵌宝石总等级
  bool one_key = 4;
}

message S2C_FlushGem {
  uint32 ret = 1;
  map<uint32, base.Gem> gems = 2;  // 宝石背包列表
  map<uint32, uint32> compose_times = 3;  // 升品保底次数
}

message C2S_Gem_Compose {
  repeated uint32 list = 1;  // 合成列表
}

message S2C_Gem_Compose {
  uint32 ret = 1;
  repeated uint32 list = 2;
  uint32 compose_quality = 3;  // 本次合成品质
  uint32 compose_num = 4;  // 合成次数
  repeated out_base.GemCompose composes = 5;  // 合成的宝石
}

// 1.4.0-跨服组队
message C2S_CrossTeam_Create {
  uint32 level = 1;  // 等级条件
  bool public = 2;  // 是否公开
}

message S2C_CrossTeam_Create {
  uint32 ret = 1;  // 返回值
  base.CrossTeam team = 2;  // 返回队伍信息
}

message C2S_CrossTeam_Search {
  uint32 id = 1;  // 使用队伍 id 搜索
  bool magic = 2;  // 魔法搜索,true可以搜到隐藏的队伍
}

message S2C_CrossTeam_Search {
  uint32 ret = 1;
  uint32 id = 2;
  repeated base.CrossTeam teams = 3;  // 检索到的队伍信息
  bool magic = 4;  // 魔法搜索
}

message C2S_CrossTeam_Join {
  uint32 id = 1;  // 加入队伍 id
}

message S2C_CrossTeam_Join {
  uint32 ret = 1;
  uint32 id = 2;
  base.CrossTeam team = 3;  // 队伍信息
}

message S2C_CrossTeam_NotifyJoin {
  base.CrossTeamMember join_member = 1;  // 加入成员
}

message C2S_CrossTeam_Quit {
}

message S2C_CrossTeam_Quit {
  uint32 ret = 1;
}

message S2C_CrossTeam_NotifyQuit {
  uint64 uid = 1;  // 退出队伍的玩家 id
}

message C2S_CrossTeam_Attorn {
  uint64 uid = 1;  // 转让队员 uid
}

message S2C_CrossTeam_Attorn {
  uint32 ret = 1;
  uint64 uid = 2;  // 转让队员 uid
}

message S2C_CrossTeam_NotifyAttorn {
  uint64 uid = 1;  // 转让队员 uid
}

message C2S_CrossTeam_Kick {
  uint64 uid = 1;  // 踢出队员 uid
}

message S2C_CrossTeam_Kick {
  uint32 ret = 1;
  uint64 uid = 2;  // 踢出队员 uid
}

message S2C_CrossTeam_NotifyKick {
  uint64 uid = 1;  // 踢出队员 uid
}

message C2S_CrossTeam_FastJoin {
}

message S2C_CrossTeam_FastJoin {
  uint32 ret = 1;
  base.CrossTeam team = 2;  // 队伍信息
}

message C2S_CrossTeam_ModifyBaseInfo {
  uint32 join_level = 1;  // 加入队伍需要满足的等级
  bool public = 2;  // 是否公开
}

message S2C_CrossTeam_ModifyBaseInfo {
  uint32 ret = 1;
  uint32 join_level = 2;
  bool public = 3;
}

message S2C_CrossTeam_NotifyModifyBaseInfo {
  uint32 join_level = 1;
  bool public = 2;
}

message C2S_CrossTeam_GetInfo {
}

message S2C_CrossTeam_GetInfo {
  uint32 ret = 1;
  out_base.UserCrossTeam team_info = 2;
  map<uint32, string> his_rank_path = 3;  // 历史排行榜oss路径(key:rankId, value:路径)
  map<uint32, uint32> self_ranks = 4;  // 玩家所在榜排名(key:rankId, value:排名)
}

message C2S_CrossTeam_Refresh {
}

message S2C_CrossTeam_Refresh {
  uint32 ret = 1;
  repeated base.CrossTeam teams = 2;
  int64 last_refresh_time = 3;
}

message C2S_CrossTeam_Dismiss {
}

message S2C_CrossTeam_Dismiss {
  uint32 ret = 1;
}

message S2C_CrossTeam_NotifyDismiss {
}

message C2S_CrossTeam_Enter_MainRoom {
  uint32 id = 1;
}

message S2C_CrossTeam_Enter_MainRoom {
  uint32 ret = 1;
  uint32 id = 2;
  base.CrossTeamMapStageMain main_room = 3;
  uint32 score = 4;  // 新增加的积分
}

message C2S_CrossTeam_Enter_SubRoom {
  uint32 id = 1;
}

message S2C_CrossTeam_Enter_SubRoom {
  uint32 ret = 1;
  uint32 id = 2;
  base.CrossTeamMapStageSubroom sub_room = 3;
  uint32 score = 4;  // 新增加的积分
}

message S2C_CrossTeam_NotifyEnterRoom {
  uint32 id = 1;  // 进入房间唯一 id
  uint64 uid = 2;  // 玩家 id
}

message C2S_CrossTeam_ChallengeBegin {
  uint32 id = 1;  // 挑战怪物 id
}

message S2C_CrossTeam_ChallengeBegin {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 挑战怪物 id
  uint64 battle_id = 3;  // 战斗 id
}

message S2C_CrossTeam_ChallengeFinish {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 挑战怪物 id
  bool is_win = 3;  // 战斗结果
  repeated base.Award awards = 4;  // 挑战胜利奖励
  out_base.CrossTeamBuff buff_bag = 5;  // buff背包
  uint32 score = 6;  // 新增加的积分
}

message C2S_CrossTeam_DigMine {
  uint32 id = 1;  // 领奖id
}

message S2C_CrossTeam_DigMine {
  uint32 ret = 1;  // 返回错误码
  uint32 id = 2;  // 领奖id
  repeated base.Award awards = 3;  // 领奖奖励
}

message S2C_CrossTeam_NotifyActivity {
  base.DynamicActivityInfo activity = 1;  // 活动信息
  repeated uint64 sids = 2;  // 匹配组内的服务器列表
}

message S2C_CrossTeam_NotifyForceEnterNextMain {
  uint32 id = 1;  // 下一个主房间 id
  uint64 uid = 2;  // 玩家 id
}

message C2S_CrossTeam_GetRoomChat {
}

message S2C_CrossTeam_GetRoomChat {
  uint32 ret = 1;
  repeated base.NotifyChat chats = 2;
}

message C2S_CrossTeam_UseItem {
  uint32 id = 1;  // 使用道具索引
  uint32 type = 2;  // 类型
  bool is_discard = 3;  // 是否丢弃
}

message S2C_CrossTeam_UseItem {
  uint32 ret = 1;
  uint32 id = 2;
  uint32 type = 3;
  bool is_discard = 4;
  out_base.CrossTeamBuff buff_bag = 5;  // buff背包
  out_base.CrossTeamUseItemBag use_item_bag = 6;  // 使用道具背包
  out_base.CrossTeamRelicBag relic_bag = 7;  // 遗物背包
}

message C2S_CrossTeam_SelectEvent {
  uint32 id = 1;  // 房间 id
  uint32 select_option = 2;  // 选项索引
}

message S2C_CrossTeam_SelectEvent {
  uint32 ret = 1;
  uint32 id = 2;
  uint32 select_option = 3;
  repeated base.Award awards = 4;  // 选择事件后得到的奖励
}

message C2S_CrossTeam_TimeBossChallengeBegin {
  uint32 monster_difficulty = 1;  // 挑战怪物难度
}

message S2C_CrossTeam_TimeBossChallengeBegin {
  uint32 ret = 1;  // 返回错误码
  uint32 monster_difficulty = 2;  // 挑战怪物难度
  uint64 battle_id = 3;  // 战斗 id
}

message S2C_CrossTeam_TimeBossChallengeFinish {
  uint32 ret = 1;  // 返回错误码
  uint32 monster_difficulty = 2;  // 挑战怪物难度
  bool is_win = 3;  // 战斗结果
  repeated base.Award awards = 4;  // 挑战胜利奖励
  out_base.CrossTeamBuff buff_bag = 5;  // buff背包
}

message C2S_CrossTeam_SelectItems {
  uint32 id = 1;  // 房间唯一 id
  repeated uint32 item_idxs = 2;  // 选择道具索引,从1开始，如果为空表示全部放弃
}

message S2C_CrossTeam_SelectItems {
  uint32 ret = 1;
  uint32 id = 2;  // 房间唯一 id
  repeated uint32 item_idxs = 3;  // 道具索引
  out_base.CrossTeamRelicBag relic_bag = 4;  // 遗物背包
  out_base.CrossTeamUseItemBag use_item_bag = 5;  // 使用道具背包
  out_base.CrossTeamBuff buff_bag = 6;  // buff背包
}

message S2C_CrossTeam_NotifyOnline {
  uint64 uid = 1;  // 离线玩家 id
  bool online = 2;  // 是否在线
}

message S2C_CrossTeam_NotifyTimeBossStart {
  base.CrossTeamMapStageSubroom time_boss = 1;
}

message S2C_CrossTeam_NotifyMainRoomMonsterAttacked {
  uint32 monster_id = 1;  // 怪物 id
  uint64 uid = 2;  // 攻击玩家
}

message S2C_CrossTeam_NotifyMainRoomMontserKilled {
  uint32 monster_id = 1;  // 怪物 id
  uint64 uid = 2;  // 攻击玩家
}

message S2C_CrossTeam_NotifyTimeBossMonsterKilled {
  uint32 diffculty = 1;  // 怪物难度
  uint64 uid = 2;  // 攻击玩家
}

message C2S_CrossTeam_OpenTreasureBox {
  uint32 id = 1;  // 房间唯一 id
  uint32 idx = 2;  // 奖励索引
}

message S2C_CrossTeam_OpenTreasureBox {
  uint32 ret = 1;
  uint32 id = 2;
  uint32 idx = 3;
  out_base.CrossTeamBuff buff_bag = 4;  // buff背包
  out_base.CrossTeamUseItemBag use_item_bag = 5;  // 使用道具背包
  out_base.CrossTeamRelicBag relic_bag = 6;  // 遗物背包
}

message C2S_CrossTeam_GetRankList {
  uint32 rank_type = 1;  // 19-个人榜 20-队伍榜
  uint32 limit = 2;  // 0-全部拉取 非0-拉取前N个
}

message S2C_CrossTeam_GetRankList {
  uint32 ret = 1;
  uint32 rank_type = 2;  // 19-个人榜 20-队伍榜
  uint32 limit = 3;  // 0-全部拉取 非0-拉取前N个
  repeated base.CrossTeamRankUnit rank_units = 4;  // 排名数据
  base.CrossTeamRankUnit self_unit = 5;  // 自己排名数据
  uint32 stage_num = 6;
}

message S2C_CrossTeam_NotifyObtainRewards {
  uint32 tp = 1;  // 1:主房间奖励, 2:限时boss奖励
  uint64 uid = 2;  // 击杀玩家
}

message S2C_CrossTeam_NotifyMainMonsterFightValue {
  uint32 monster_id = 1;  // 怪物 id
  uint64 fight_value = 2;  // 当前战力
  uint32 fail_cnt = 3;  // 失败次数
}

message S2C_CrossTeam_FlushTeamCrossRedpoint {
  uint32 team_id = 1;  // 队伍 id
  string leader_name = 2;  // 队长名
  bool is_pass_all = 3;  // 是否通关
  bool is_full = 4;  // 是否满员
}

message S2C_Privilege_UpdateNotify {
  repeated out_base.UserPrivilege privileges = 1;
}

// 1.3.90-节庆BOSS
message C2S_CelebrationBoss_Roll {
  uint32 recruit_id = 1;  // 奖池id
}
message S2C_CelebrationBoss_Roll {
  uint32 ret = 1;
  uint32 recruit_id = 2;
  out_base.CelebrationBoss boss = 3;
}

message C2S_CelebrationBoss_GetInfo {
}
message S2C_CelebrationBoss_GetInfo {
  uint32 ret = 1;
  map<uint64, out_base.CelebrationBoss> boss = 2;
  repeated uint64 rank_extra_award_uid = 3;
  uint64 rank_extra_score = 4;
  uint32 help_num = 5;  // 今日助战次数
  uint32 max_kill_star = 6;  // 最大击杀星数
  map<uint32, uint64> boss_fv = 7;  // BOSS战力 key:星级 value:战力
  bool is_final = 8;  // 是否是最后一条协议(因数据量可能会大)
}

message C2S_CelebrationBoss_GetShare {
  uint32 channel = 1;  // 频道
}
message S2C_CelebrationBoss_GetShare {
  uint32 ret = 1;
  uint32 channel = 2;
  repeated out_base.CelebrationShareBoss boss = 3;
}

message C2S_CelebrationBoss_Share {
  uint64 boss_id = 1;  // BOSSid
  uint32 channel = 2;  // 频道
  uint64 target = 3;  // 分享目标
}
message S2C_CelebrationBoss_Share {
  uint32 ret = 1;
  out_base.CelebrationBoss boss = 2;
}

message C2S_CelebrationBoss_ShareAward {
  repeated uint64 boss_id = 1;  // BOSSid
}
message S2C_CelebrationBoss_ShareAward {
  uint32 ret = 1;
  repeated uint64 boss_id = 2;
  repeated base.Award awards = 3;
}

message C2S_CelebrationBoss_ChallengeBegin {
  uint64 boss_id = 1;  // BOSSid
}
message S2C_CelebrationBoss_ChallengeBegin {
  uint32 ret = 1;
  uint64 boss_id = 2;
  uint64 battle_id = 3;
}

message S2C_CelebrationBoss_ChallengeFinish {
  uint32 ret = 1;
  uint64 boss_id = 2;
  bool is_win = 3;  // 战斗结果
  repeated base.Award awards = 4;  // 挑战胜利奖励 击杀奖励 or 助战奖励
  out_base.CelebrationBoss drop = 5;  // 击杀掉落新BOSS
  uint32 max_kill_star = 6;  // 最大击杀星数
}

message S2C_CelebrationBoss_HelpKillNtf {
  uint64 boss_id = 1;  // BOSSid
  uint64 help_uid = 2;  // 助战击杀玩家
}

message C2S_CelebrationBoss_RankExtraAward {
  repeated uint64 uid = 1;  // 待蹭奖励的玩家列表
}
message S2C_CelebrationBoss_RankExtraAward {
  uint32 ret = 1;
  repeated uint64 uid = 2;  // 实际蹭奖励的玩家列表
  repeated base.Award awards = 3;
  uint64 rank_extra_score = 4;
}

message C2S_CelebrationBoss_GetAlive {
  repeated uint64 boss_ids = 1;  // 最多50个
}
message S2C_CelebrationBoss_GetAlive {
  uint32 ret = 1;
  map<uint64, base.KV64> boss_channel = 2;  // key:BOSSid value:频道-目标 0代表失效
}

message C2S_Celebration_GetInfo {
}

message S2C_Celebration_GetInfo {
  uint32 ret = 1;
  repeated uint32 awarded_tree_ids = 2;   // 已领取的阶段奖励id
  repeated uint32 signed_in_ids = 3;   // 已签到的id
  map<uint32, uint32> submit_pray_cards = 4;   // key-祈愿卡id value-已投入数量
  uint32 pray_group = 5;   // 祈愿卡组
  uint32 fes_group = 6;   // 配置表分组
  out_base.CelebrationBattlePass battle_pass = 7;   // 战令信息
  map<uint32, uint32> total_team_buy_nums = 8;   // 战区团购购买总次数, key:team_buy_info的id value:购买次数
  map<uint32, uint32> team_buy_nums = 9;   // 自身购买次数, key:team_buy_info的id value:购买次数
  repeated uint32 awarded_quest_ids = 10;  // 已领取的任务id
  repeated uint64 sids = 11;  // 匹配组内的服务器列表
}

// 节庆活动 - 领取阶段奖励
message C2S_Celebration_ObtainTreeAward {
  repeated uint32 ids = 1;
}

message S2C_Celebration_ObtainTreeAward {
  uint32 ret = 1;
  repeated uint32 ids = 2;
  repeated base.Award awards = 3;
}

// 节庆活动 - 团购
message C2S_Celebration_TeamBuy {
  uint32 id = 1;
  uint32 num = 2;
}

message S2C_Celebration_TeamBuy {
  uint32 ret = 1;
  uint32 id = 2;
  uint32 num = 3;
  repeated base.Award awards = 4;
}

// 节庆活动 - 签到
message C2S_Celebration_SignIn {
  repeated uint32 ids = 1;
}

message S2C_Celebration_SignIn {
  uint32 ret = 1;
  repeated uint32 ids = 2;
  repeated base.Award awards = 3;
}

message C2S_Celebration_SharePrayCard {
  uint32 card_id = 1;  // 卡片id
  uint32 num = 2;  // 分享的数量
  uint32 channel = 3;  // 分享的频道
  uint64 target = 4;  // 分享的目标
}

message S2C_Celebration_SharePrayCard {
  uint32 ret = 1;
  uint32 card_id = 2;
  uint32 num = 3;
  uint32 channel = 4;  // 分享的频道
  uint64 target = 5;  // 分享的目标
  uint64 share_id = 6;  // 分享的唯一id
  repeated base.Award awards = 7;
}

message C2S_Celebration_ReceivePrayCard {
  uint64 share_id = 1;  // 分享的唯一id
  uint64 from_uid = 2;  // 分享的玩家id
}

message S2C_Celebration_ReceivePrayCard {
  uint32 ret = 1;
  uint64 share_id = 2;
  uint64 from_uid = 3;  // 分享的玩家id
  repeated base.Award awards = 4;
  uint64 receive_uid = 5;  // 领取的玩家id
}

message C2S_Celebration_SubmitPrayCard {
  uint32 id = 1;  // 祈愿卡id, 必然投入满足条件的祈福卡数量, 这里数据就不传了
}

message S2C_Celebration_SubmitPrayCard {
  uint32 ret = 1;
  uint32 id = 2;
  repeated base.Award awards = 3;
}

message C2S_Celebration_PrayCardShareState {
  repeated uint64 share_ids = 1;  // 分享的id礼包
}

message S2C_Celebration_PrayCardShareState {
  uint32 ret = 1;
  repeated uint64 share_ids = 2;
  repeated base.CelebrationPrayShareState states = 3;
}

message C2S_Celebration_BattlePassAwardQuest {
  repeated uint32 ids = 1;
}

message S2C_Celebration_BattlePassAwardQuest {
  uint32 ret = 1;
  repeated uint32 ids = 2;
  repeated base.Award awards = 3;
}

message C2S_Celebration_BattlePassBuyLv {
  uint32 buy_lv = 1;  // 购买几级
}

message S2C_Celebration_BattlePassBuyLv {
  uint32 ret = 1;
  uint32 buy_lv = 2;
}

message S2C_Celebration_BattlePassBuyNtf {
  uint32 unlock_type = 1;  // 1、代表普通(low) 2、代表高级(mid) 3、代表豪华(high)
}

message C2S_Celebration_BattlePassAwardLv {
}

message S2C_Celebration_BattlePassAwardLv {
  uint32 ret = 1;
  map<uint32, uint32> awarded_lvs = 2;  // 已领取的等级奖励 key:战令类型(1.普通 2.高级 3.豪华) value:已领取的等级
  uint32 extra_awarded_count = 3;  // 额外奖励已领取的最高等级
  repeated base.Award awards = 4;  // 主要是获得积分
}

message S2C_FlushCelebration {
  base.DynamicActivityInfo activity_info = 1;  // 活动信息
  bool boss_challenge = 2;  // 是否有可挑战的BOSS（自己名下的BOSS）
  bool boss_share_award = 3;  // 是否有可领取的BOSS分享奖励
  bool boss_rank_extra_award = 4;  // 是否有可领取的BOSS排行榜额外奖励
  uint32 fes_group = 5;  // 分组
}

message C2S_Celebration_PrayCardGiveLog {
  uint32 tp = 1;  // 1:主动分享 2:他人赠送
}

message S2C_Celebration_PrayCardGiveLog {
  uint32 ret = 1;
  uint32 tp = 2;
  repeated base.CelebrationPrayCardGiveLog logs = 3;
}

message C2S_Celebration_GetTeamBuyInfo {
}

message S2C_Celebration_GetTeamBuyInfo {
  uint32 ret = 1;
  map<uint32, uint32> total_team_buy_nums = 2;  // 战区团购购买总次数, key:team_buy_info的id value:购买次数
}

message C2S_Celebration_ObtainQuestAward {
  repeated uint32 ids = 1;
}

message S2C_Celebration_ObtainQuestAward {
  uint32 ret = 1;
  repeated uint32 ids = 2;
  repeated base.Award awards = 3;
}

// 获取vip基础信息
message C2S_Vip_GetInfo {
}

message S2C_Vip_GetInfo {
  uint32 ret = 1;
  out_base.UserVip data = 2;
}

// 领奖
message C2S_Vip_GetAwards {
  uint32 tp = 1;  // 领奖类型(1-免费vip经验奖励 2-免费礼包)
  uint32 vip_lv = 2;
}

message S2C_Vip_GetAwards {
  uint32 ret = 1;
  uint32 tp = 2;  // 领奖类型(1-免费vip经验奖励 2-免费礼包奖励)
  uint32 vip_lv = 3;
  repeated base.Award awards = 4;
}

// 充值成功回调
message S2C_Vip_RechargeNotify {
  uint32 ret = 1;
  uint32 vip_lv = 2;
}

// 升级推送
message S2C_Vip_UpgradeNotify {
  uint32 ret = 1;
  out_base.UserVip data = 2;
}

message C2S_LuckyWheel_GetInfo {
}

message S2C_LuckyWheel_GetInfo {
  uint32 ret = 1;
  uint64 wheel_diamond_num = 2;  // 转盘中钻石数量
}

message C2S_LuckyWheel_Roll {
  uint32 roll_num = 1;  // 摇奖次数,次数目前只能为1或者10
}

message S2C_LuckyWheel_Roll {
  uint32 ret = 1;
  uint32 roll_num = 2;  // 摇奖次数
  repeated uint32 grids = 3;  // 格子索引
  uint64 wheel_diamond_num = 4;  // 转盘中钻石数量
  repeated base.Award awards = 5;  // 奖励
}

message S2C_LuckyWheel_NotifyWheelDiamond {
  uint64 wheel_diamond_num = 1;  // 转盘中钻石数量
}

message C2S_RecommendTeam_GetAward {
}

message S2C_RecommendTeam_GetAward {
  uint32 ret = 1;
  repeated base.Award awards = 2;  // 奖励
}

message S2C_CmdRet {
  uint32 ret = 1;
  uint32 cmd = 2;
}

message C2S_TeamBoss_GetInfo {
}

message S2C_TeamBoss_GetInfo {
  uint32 ret = 1;
  uint32 floor_id = 2;  // 当前层数
  repeated uint32 awarded_achievements = 3;  // 已领取的成就id
  repeated uint32 awarded_level_achievements = 4;  // 已领取的成就等级id
  repeated uint32 awarded_first_passes = 5;  // 已领取的首通奖励
  repeated uint32 awarded_self_first_passes = 6;  // 已领取的自身的首通奖励
  repeated uint32 first_pass_records = 7;  // 已通关的层数
}

message C2S_TeamBoss_CreateTeam {
  uint32 floor_id = 1;  // 层数
}

message S2C_TeamBoss_CreateTeam {
  uint32 ret = 1;
  out_base.TeamBossTeam team = 2;
}

message C2S_TeamBoss_JoinTeam {
  uint64 team_id = 1;  // 队伍id
}

message S2C_TeamBoss_JoinTeam {
  uint32 ret = 1;
  out_base.TeamBossTeam team = 2;
}

message S2C_TeamBoss_JoinTeamNotify {
  out_base.TeamBossTeamMember member = 1; //加入的玩家数据
}

message C2S_TeamBoss_RemindStart {
}

message S2C_TeamBoss_RemindStart {
  uint32 ret = 1;
}

message S2C_TeamBoss_RemindStartNotify {
}

message C2S_TeamBoss_ArrangeFormation {
  map<uint64, uint32> formation = 1;  // 阵型,key:玩家id value:位置
}

message S2C_TeamBoss_ArrangeFormation {
  uint32 ret = 1;
  map<uint64, uint32> formation = 2;
  out_base.TeamBossTeam team = 3;  // 同步下队伍信息
}

message S2C_TeamBoss_ArrangeFormationNotify {
  out_base.TeamBossTeam team = 1;  // 同步下队伍信息
}

message C2S_TeamBoss_KickOut {
  uint64 uid = 1;  // 踢出玩家id
}

message S2C_TeamBoss_KickOut {
  uint32 ret = 1;
}

message S2C_TeamBoss_KickOutNotify {
  uint64 uid = 1;  // 踢出玩家id
}

message S2C_TeamBoss_BattleStartNotify {
}

message C2S_TeamBoss_ConfirmBattle {
}

message S2C_TeamBoss_ConfirmBattle {
  uint32 ret = 1;
}

message S2C_TeamBoss_ConfirmBattleNotify {
  uint64 user_id = 1;  // 确认战斗的玩家id
}

message C2S_TeamBoss_RefuseBattle {
}

message S2C_TeamBoss_RefuseBattle {
  uint32 ret = 1;
}

message S2C_TeamBoss_RefuseBattleNotify {
  uint64 user_id = 1;  // 拒绝战斗的玩家id
}

message C2S_TeamBoss_BattleStart {
}

message S2C_TeamBoss_BattleStart {
  uint32 ret = 1;
}

message S2C_TeamBoss_BattleFinish {
  uint32 ret = 1;
  repeated base.Award awards = 2;
  out_base.TeamBossTeam team = 3;  // 同步下队伍信息
  out_base.BattleRecord battle_record = 4;  // 直接发战斗结果，前端播放
}

message C2S_TeamBoss_InviteUserList {
}

message S2C_TeamBoss_InviteUserList {
  uint32 ret = 1;
  repeated base.SimpleUser users = 2;
}

message C2S_TeamBoss_InviteUser {
  uint64 user_id = 1;  // 邀请玩家id
}

message S2C_TeamBoss_InviteUser {
  uint32 ret = 1;
  uint64 user_id = 2;  // 邀请玩家id
}

message S2C_TeamBoss_InviteUserNotify {
  uint64 team_id = 1;  // 队伍id
  uint64 user_id = 2;  // 发起邀请的玩家id
  string user_name = 3;  // 发起邀请的玩家名
}

message C2S_TeamBoss_LeaveTeam {
}

message S2C_TeamBoss_LeaveTeam {
  uint32 ret = 1;
}

message S2C_TeamBoss_LeaveTeamNotify {
  uint64 user_id = 1;  // 离开队伍的玩家id
  uint64 new_leader_id = 2;  // 新队长id
}

message C2S_TeamBoss_ObtainAchievementAward {
  repeated uint32 ids = 1;  // 领取的成就id
}

message S2C_TeamBoss_ObtainAchievementAward {
  uint32 ret = 1;
  repeated uint32 ids = 2;
  repeated base.Award awards = 3;
}

message C2S_TeamBoss_ObtainAchievementLevelAward {
  repeated uint32 ids = 1;  // 领取的成就等级id
}

message S2C_TeamBoss_ObtainAchievementLevelAward {
  uint32 ret = 1;
  repeated uint32 ids = 2;
  repeated base.Award awards = 3;
}

message C2S_TeamBoss_GetFirstPassRecord {
  uint32 floor_id = 1;  // 层数
}

message S2C_TeamBoss_GetFirstPassRecord {
  uint32 ret = 1;
  uint32 floor_id = 2;  // 层数
  out_base.TeamBossTeam team = 3;  // 队伍信息
}

message C2S_TeamBoss_ObtainFirstPassAward {
  uint32 floor_id = 1;  // 层数
}

message S2C_TeamBoss_ObtainFirstPassAward {
  uint32 ret = 1;
  uint32 floor_id = 2;  // 层数
  repeated base.Award awards = 3;
}

message C2S_TeamBoss_ObtainSelfFirstPassAward {
  uint32 floor_id = 1;  // 层数
}

message S2C_TeamBoss_ObtainSelfFirstPassAward {
  uint32 ret = 1;
  uint32 floor_id = 2;  // 层数
  repeated base.Award awards = 3;
}

message C2S_TeamBoss_Like {
  uint64 user_id = 1;
}

message S2C_TeamBoss_Like {
  uint32 ret = 1;
  uint64 user_id = 2;
}
